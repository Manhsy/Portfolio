"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _icons = require("./icons");

var _getBackgroundColor = require("./getBackgroundColor");

var _getBackgroundColor2 = _interopRequireDefault(_getBackgroundColor);

var _hexColorPropType = require("./hexColorPropType");

var _hexColorPropType2 = _interopRequireDefault(_hexColorPropType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactSwitch = function (_Component) {
  _inherits(ReactSwitch, _Component);

  function ReactSwitch(props) {
    _classCallCheck(this, ReactSwitch);

    var _this = _possibleConstructorReturn(this, (ReactSwitch.__proto__ || Object.getPrototypeOf(ReactSwitch)).call(this, props));

    _initialiseProps.call(_this);

    var height = props.height,
        width = props.width,
        handleDiameter = props.handleDiameter,
        checked = props.checked;

    _this.handleDiameter = handleDiameter || height - 2;
    _this.checkedPos = Math.max(width - height, width - (height + _this.handleDiameter) / 2);
    _this.uncheckedPos = Math.max(0, (height - _this.handleDiameter) / 2);
    _this.state = {
      pos: checked ? _this.checkedPos : _this.uncheckedPos,
      startX: null,
      isDragging: false,
      hasOutline: false
    };
    return _this;
  }

  _createClass(ReactSwitch, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var checked = _ref.checked;

      var pos = checked ? this.checkedPos : this.uncheckedPos;
      this.setState({ pos: pos });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          checked = _props.checked,
          disabled = _props.disabled,
          className = _props.className,
          offColor = _props.offColor,
          onColor = _props.onColor,
          offHandleColor = _props.offHandleColor,
          onHandleColor = _props.onHandleColor,
          checkedIcon = _props.checkedIcon,
          uncheckedIcon = _props.uncheckedIcon,
          boxShadow = _props.boxShadow,
          activeBoxShadow = _props.activeBoxShadow,
          height = _props.height,
          width = _props.width,
          id = _props.id,
          ariaLabelledby = _props["aria-labelledby"],
          ariaLabel = _props["aria-label"];
      var _state = this.state,
          pos = _state.pos,
          isDragging = _state.isDragging,
          hasOutline = _state.hasOutline;


      var rootStyle = {
        position: "relative",
        display: "inline-block",
        opacity: disabled ? 0.5 : 1,
        borderRadius: height / 2,
        WebkitTransition: "opacity 0.25s",
        MozTransition: "opacity 0.25s",
        transition: "opacity 0.25s",
        touchAction: "none",
        WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
        WebkitUserSelect: "none",
        MozUserSelect: "none",
        msUserSelect: "none",
        userSelect: "none"
      };

      var backgroundStyle = {
        height: height,
        width: width,
        margin: Math.max(0, (this.handleDiameter - height) / 2),
        position: "relative",
        background: (0, _getBackgroundColor2.default)(pos, this.checkedPos, this.uncheckedPos, offColor, onColor),
        borderRadius: height / 2,
        cursor: disabled ? "default" : "pointer",
        WebkitTransition: isDragging ? null : "background 0.25s",
        MozTransition: isDragging ? null : "background 0.25s",
        transition: isDragging ? null : "background 0.25s"
      };

      var checkedIconStyle = {
        height: height,
        width: Math.min(height * 1.5, width - (this.handleDiameter + height) / 2 + 1),
        position: "relative",
        opacity: (pos - this.uncheckedPos) / (this.checkedPos - this.uncheckedPos),
        pointerEvents: "none",
        WebkitTransition: isDragging ? null : "opacity 0.25s",
        MozTransition: isDragging ? null : "opacity 0.25s",
        transition: isDragging ? null : "opacity 0.25s"
      };

      var uncheckedIconStyle = {
        height: height,
        width: Math.min(height * 1.5, width - (this.handleDiameter + height) / 2 + 1),
        position: "absolute",
        opacity: 1 - (pos - this.uncheckedPos) / (this.checkedPos - this.uncheckedPos),
        right: 0,
        top: 0,
        pointerEvents: "none",
        WebkitTransition: isDragging ? null : "opacity 0.25s",
        MozTransition: isDragging ? null : "opacity 0.25s",
        transition: isDragging ? null : "opacity 0.25s"
      };

      var handleStyle = {
        height: this.handleDiameter,
        width: this.handleDiameter,
        background: (0, _getBackgroundColor2.default)(pos, this.checkedPos, this.uncheckedPos, offHandleColor, onHandleColor),
        cursor: disabled ? "default" : "pointer",
        display: "inline-block",
        borderRadius: "50%",
        position: "absolute",
        transform: "translateX(" + pos + "px)",
        top: Math.max(0, (height - this.handleDiameter) / 2),
        outline: 0,
        boxShadow: hasOutline ? activeBoxShadow : boxShadow,
        border: 0,
        WebkitTransition: isDragging ? null : "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
        MozTransition: isDragging ? null : "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
        transition: isDragging ? null : "background-color 0.25s, transform 0.25s, box-shadow 0.15s"
      };

      return _react2.default.createElement(
        "div",
        { className: className, style: rootStyle },
        _react2.default.createElement(
          "div",
          {
            className: "react-switch-bg",
            style: backgroundStyle,
            onClick: disabled ? null : this.handleClick
          },
          checkedIcon && _react2.default.createElement(
            "div",
            { style: checkedIconStyle },
            checkedIcon
          ),
          uncheckedIcon && _react2.default.createElement(
            "div",
            { style: uncheckedIconStyle },
            uncheckedIcon
          )
        ),
        _react2.default.createElement("div", {
          className: "react-switch-handle",
          role: "checkbox",
          tabIndex: disabled ? null : 0,
          onMouseDown: disabled ? null : this.handleMouseDown,
          onTouchStart: disabled ? null : this.handleTouchStart,
          onTouchMove: disabled ? null : this.handleTouchMove,
          onTouchEnd: disabled ? null : this.handleTouchEnd,
          onTouchCancel: disabled ? null : this.handleTouchCancel,
          onKeyDown: this.handleKeyDown,
          onFocus: function onFocus() {
            return _this2.setState({ hasOutline: true });
          },
          onBlur: function onBlur() {
            return _this2.setState({ hasOutline: false });
          },
          style: handleStyle,
          id: id,
          "aria-checked": checked,
          "aria-disabled": disabled,
          "aria-labelledby": ariaLabelledby,
          "aria-label": ariaLabel
        })
      );
    }
  }]);

  return ReactSwitch;
}(_react.Component);

ReactSwitch.propTypes = {
  checked: _propTypes2.default.bool.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool,
  offColor: _hexColorPropType2.default,
  onColor: _hexColorPropType2.default,
  offHandleColor: _hexColorPropType2.default,
  onHandleColor: _hexColorPropType2.default,
  handleDiameter: _propTypes2.default.number,
  uncheckedIcon: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.element]),
  checkedIcon: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.element]),
  boxShadow: _propTypes2.default.string,
  activeBoxShadow: _propTypes2.default.string,
  height: _propTypes2.default.number,
  width: _propTypes2.default.number,
  className: _propTypes2.default.string,
  id: _propTypes2.default.string,
  "aria-labelledby": _propTypes2.default.string,
  "aria-label": _propTypes2.default.string
};
ReactSwitch.defaultProps = {
  disabled: false,
  offColor: "#888",
  onColor: "#080",
  offHandleColor: "#fff",
  onHandleColor: "#fff",
  handleDiameter: null,
  uncheckedIcon: _icons.uncheckedIcon,
  checkedIcon: _icons.checkedIcon,
  boxShadow: null,
  activeBoxShadow: "0px 0px 2px 3px #33bbff",
  height: 28,
  width: 56,
  className: null,
  id: null,
  "aria-labelledby": null,
  "aria-label": null
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.handleDragStart = function (clientX) {
    _this3.setState({ startX: clientX, hasOutline: true });
  };

  this.handleDrag = function (clientX) {
    var startX = _this3.state.startX;
    var checked = _this3.props.checked;

    var startPos = checked ? _this3.checkedPos : _this3.uncheckedPos;
    var newPos = startPos + clientX - startX;
    var pos = Math.min(_this3.checkedPos, Math.max(_this3.uncheckedPos, newPos));
    _this3.setState({ pos: pos, isDragging: true });
  };

  this.handleDragStop = function (event) {
    var _state2 = _this3.state,
        pos = _state2.pos,
        isDragging = _state2.isDragging;
    var _props2 = _this3.props,
        checked = _props2.checked,
        onChange = _props2.onChange,
        id = _props2.id;

    // Simulate clicking the handle

    if (!isDragging) {
      _this3.setState({ startX: null, hasOutline: false });
      onChange(!checked, event, id);
      return;
    }
    if (checked) {
      if (pos > (_this3.checkedPos + _this3.uncheckedPos) / 2) {
        _this3.setState({
          pos: _this3.checkedPos,
          startX: null,
          isDragging: false,
          hasOutline: false
        });
        return;
      }
      _this3.setState({ startX: null, isDragging: false, hasOutline: false });
      onChange(false, event, id);
      return;
    }
    if (pos < (_this3.checkedPos + _this3.uncheckedPos) / 2) {
      _this3.setState({
        pos: _this3.uncheckedPos,
        startX: null,
        isDragging: false,
        hasOutline: false
      });
      return;
    }
    _this3.setState({ startX: null, isDragging: false, hasOutline: false });
    onChange(true, event, id);
  };

  this.handleMouseDown = function (event) {
    // Ignore right click and scroll
    if (typeof event.button === "number" && event.button !== 0) {
      return;
    }

    _this3.handleDragStart(event.clientX);
    document.addEventListener("mousemove", _this3.handleMouseMove);
    document.addEventListener("mouseup", _this3.handleMouseUp);
  };

  this.handleMouseMove = function (event) {
    event.preventDefault();
    _this3.handleDrag(event.clientX);
  };

  this.handleMouseUp = function (event) {
    _this3.handleDragStop(event);
    document.removeEventListener("mousemove", _this3.handleMouseMove);
    document.removeEventListener("mouseup", _this3.handleMouseUp);
  };

  this.handleTouchStart = function (event) {
    _this3.handleDragStart(event.touches[0].clientX);
  };

  this.handleTouchMove = function (event) {
    _this3.handleDrag(event.touches[0].clientX);
  };

  this.handleTouchEnd = function (event) {
    event.preventDefault();
    _this3.handleDragStop(event);
  };

  this.handleTouchCancel = function () {
    _this3.setState({ startX: null, hasOutline: false });
  };

  this.handleClick = function (event) {
    var _props3 = _this3.props,
        checked = _props3.checked,
        onChange = _props3.onChange,
        id = _props3.id;

    onChange(!checked, event, id);
  };

  this.handleKeyDown = function (event) {
    var _props4 = _this3.props,
        checked = _props4.checked,
        onChange = _props4.onChange,
        id = _props4.id;
    var isDragging = _this3.state.isDragging;
    // Trigger change on spacebar and enter keys (in violation of wai-aria spec).

    if ((event.keyCode === 32 || event.keyCode === 13) && !isDragging) {
      event.preventDefault();
      onChange(!checked, event, id);
    }
  };
};

exports.default = ReactSwitch;