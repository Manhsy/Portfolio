{"version":3,"file":"index.js","sources":["../../../../components/Tooltip/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { tpSpace3 } from '@thumbtack/thumbprint-tokens';\nimport assign from 'lodash/assign';\nimport classNames from 'classnames';\nimport { Manager, Reference, Popper, RefHandler } from 'react-popper';\n\nimport ConditionalPortal from '../../utils/ConditionalPortal';\nimport useCloseOnEscape from '../../utils/use-close-on-escape';\nimport canUseDOM from '../../utils/can-use-dom';\n\nimport styles from './index.module.scss';\n\n// Timeout in milliseconds to wait before showing the tooltip after the user hovers. This prevents\n// tooltips from flickering in and out when the user moves their cursor rapidly over the launcher.\n// Higher values are more likely to prevent flickering, but increased the perceived lag when the\n// user _is_ trying to open the tooltip.\nconst OPEN_TIMEOUT = 100;\n\ninterface WhenChildrenChangePropTypes {\n    children: React.ReactNode;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    do: () => any;\n}\n\nclass WhenChildrenChange extends React.Component<WhenChildrenChangePropTypes> {\n    componentDidUpdate(prevProps: WhenChildrenChangePropTypes): null {\n        const { children, do: doProp } = this.props;\n\n        if (children !== prevProps.children) {\n            doProp();\n        }\n        return null;\n    }\n\n    render(): React.ReactNode {\n        const { children } = this.props;\n\n        return children;\n    }\n}\n\nconst doesWindowSupportTouch = (): boolean =>\n    typeof window !== 'undefined' && 'ontouchstart' in window;\n\ninterface ChildrenPropTypes {\n    ref: RefHandler;\n    onMouseEnter: () => void;\n    onFocus: () => void;\n    onMouseLeave: () => void;\n    onBlur: () => void;\n    onClick: () => void;\n    ariaLabel: string;\n}\n\ninterface TooltipPropTypes {\n    /**\n     * A function that renders JSX and receives an object with `ref`, `onMouseEnter`, `onFocus`,\n     * `onMouseLeave`, `onBlur`, `onClick`, and `ariaLabel`. All of these props must be added to\n     * the component within the render prop.\n     */\n    children: (args: ChildrenPropTypes) => JSX.Element;\n    /**\n     * Plain text that will appear within the tooltip. Links and formatted content are not allowed.\n     */\n    text: string;\n    /**\n     * Controls the look of the tooltip.\n     */\n    theme?: 'light' | 'dark';\n    /**\n     * Determines where the tooltip will attempt to position itself relative to the `children`. The\n     * tooltip will reposition itself to fit within the contianer.\n     */\n    position?: 'top' | 'bottom';\n    /**\n     * Number in milliseconds that determines how long to wait before closing the tooltip when the\n     * `onMouseLeave` event fires. A small delay prevents the tooltip from closing if the user\n     * moves their cursor from the button to the tooltip. This value should only be set to `0` when\n     * two or more tooltip components are used near each other.\n     */\n    closeDelayLength?: 0 | 200;\n    /**\n     * By default tooltips will render right before the `</body>` tag.\n     *\n     * Setting the `container` to `inline` causes the tooltip to remain where it was added to the\n     * DOM.\n     *\n     * This option is helpful to work around z-index and positioning issues.\n     */\n    container?: 'inline' | 'body';\n    /**\n     * Adds a `z-index` to the tooltip. Before using this prop, try to use `container=\"inline\"`.\n     */\n    zIndex?: number;\n}\n\nexport default function Tooltip({\n    container = 'body',\n    position = 'top',\n    theme = 'dark',\n    zIndex,\n    text,\n    children,\n    closeDelayLength = 200,\n}: TooltipPropTypes): JSX.Element {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [openTimeout, setOpenTimeout] = useState<number | undefined>(undefined);\n    const [closeTimeout, setCloseTimeout] = useState<number | undefined>(undefined);\n\n    const show = (): void => {\n        if (closeTimeout) {\n            window.clearTimeout(closeTimeout);\n        }\n\n        setIsOpen(true);\n    };\n\n    const hide = (): void => {\n        setIsOpen(false);\n    };\n\n    const onFocus = (): void => {\n        if (!doesWindowSupportTouch()) {\n            show();\n        }\n    };\n\n    const onMouseEnter = (): void => {\n        if (!doesWindowSupportTouch()) {\n            // Trigger the tooltip to show after a small delay to prevent flickering.\n            setOpenTimeout(window.setTimeout(show, OPEN_TIMEOUT));\n        }\n    };\n\n    const onMouseLeave = (): void => {\n        // By default this adds a small delay before closing to improve the user experience.\n        setCloseTimeout(window.setTimeout(hide, closeDelayLength));\n\n        if (openTimeout) {\n            // When the mouse leaves we should clear any in-progress open timeouts, to prevent the\n            // tooltip from showing after the user is no longer hovering over the launcher.\n            clearTimeout(openTimeout);\n        }\n    };\n\n    const onClick = (): void => {\n        if (doesWindowSupportTouch()) {\n            if (isOpen) {\n                hide();\n            } else {\n                show();\n            }\n        }\n    };\n\n    useCloseOnEscape(hide, canUseDOM);\n\n    // Appends the tooltip right before `</body>` when true.\n    const shouldDisplace = container === 'body';\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }): JSX.Element =>\n                    children({\n                        ref,\n                        onMouseEnter,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur: hide,\n                        onClick,\n                        ariaLabel: text,\n                    })\n                }\n            </Reference>\n\n            <ConditionalPortal shouldDisplace={shouldDisplace}>\n                {canUseDOM && isOpen && (\n                    <Popper\n                        placement={position}\n                        modifiers={{\n                            offset: { offset: `0, ${tpSpace3}` },\n                            preventOverflow: { boundariesElement: 'window' },\n                        }}\n                        positionFixed={false}\n                    >\n                        {({ ref, style, placement, arrowProps, scheduleUpdate }): JSX.Element => (\n                            // This function is documented within `react-popper`:\n                            // https://github.com/FezVrasta/react-popper\n                            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n                            <div\n                                role=\"tooltip\"\n                                data-test-id=\"tooltip\"\n                                className={classNames({\n                                    [styles.tooltip]: true,\n                                    [styles.tooltipDark]: theme === 'dark',\n                                    [styles.tooltipLight]: theme === 'light',\n                                })}\n                                ref={ref}\n                                style={assign({}, style, { zIndex })}\n                                data-placement={placement}\n                                onMouseEnter={show}\n                                onMouseLeave={onMouseLeave}\n                                onClick={(event): void => {\n                                    // This is to ensure the default event propagation is stopped when the tooltip\n                                    // is created by portals.\n                                    // https://reactjs.org/docs/portals.html#event-bubbling-through-portals\n                                    // https://github.com/facebook/react/issues/11387\n                                    if (shouldDisplace) {\n                                        event.stopPropagation();\n                                    }\n                                    // This is to ensure the tooltip would be closed if it's clicked in touch screen\n                                    // devices so it could easier to be toggled off.\n                                    if (doesWindowSupportTouch()) {\n                                        hide();\n                                    }\n                                }}\n                            >\n                                {/* We need to let the popper instance know when the contents of the tooltip change,\n                                so it can reposition itself.\n                                https://github.com/thumbtack/thumbprint-archive/issues/1033 */}\n                                <WhenChildrenChange do={scheduleUpdate}>{text}</WhenChildrenChange>\n                                <div\n                                    className={classNames({\n                                        [styles.nubbin]: true,\n                                        [styles.nubbinTop]: placement === 'top',\n                                        [styles.nubbinBottom]: placement === 'bottom',\n                                        [styles.nubbinDark]: theme === 'dark',\n                                        [styles.nubbinLight]: theme === 'light',\n                                    })}\n                                    ref={arrowProps.ref}\n                                    style={arrowProps.style}\n                                />\n                            </div>\n                        )}\n                    </Popper>\n                )}\n            </ConditionalPortal>\n        </Manager>\n    );\n}\n"],"names":["OPEN_TIMEOUT","WhenChildrenChange","prevProps","props","children","doProp","do","React","Component","doesWindowSupportTouch","window","Tooltip","container","position","theme","zIndex","text","closeDelayLength","useState","isOpen","setIsOpen","undefined","openTimeout","setOpenTimeout","closeTimeout","setCloseTimeout","show","clearTimeout","hide","onFocus","onMouseEnter","setTimeout","onMouseLeave","onClick","useCloseOnEscape","canUseDOM","shouldDisplace","Manager","Reference","ref","onBlur","ariaLabel","ConditionalPortal","Popper","offset","tpSpace3","preventOverflow","boundariesElement","style","placement","arrowProps","scheduleUpdate","classNames","styles","tooltip","tooltipDark","tooltipLight","assign","event","stopPropagation","nubbin","nubbinTop","nubbinBottom","nubbinDark","nubbinLight"],"mappings":"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"}