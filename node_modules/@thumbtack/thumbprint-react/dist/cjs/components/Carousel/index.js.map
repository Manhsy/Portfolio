{"version":3,"file":"index.js","sources":["../../../../components/Carousel/index.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport Swipeable from 'react-swipeable';\nimport BaseCarousel from './base-carousel';\n\ninterface PropTypes {\n    /**\n     * The items in the carousel that appear horizontally.\n     */\n    children: React.ReactNode;\n    /**\n     * The index of the left-most item to display in the carousel. Supports all numbers.\n     */\n    selectedIndex: number;\n    /**\n     * This function is called while a user is dragging the carousel and receives the new index.\n     * This should update the `selectedIndex` prop similarly to an `onChange` in a controlled\n     * input.\n     */\n    onSelectedIndexChange: (newIndex: number) => void;\n    /**\n     * The number of items that are visible at once.\n     */\n    visibleCount?: number;\n    /**\n     * The amount space separating each item. Supports CSS values such as `8px` or `0.5em`.\n     */\n    spacing?: string;\n}\n\nexport default function Carousel({\n    children,\n    spacing = '0px',\n    visibleCount = 1,\n    selectedIndex,\n    onSelectedIndexChange,\n}: PropTypes): JSX.Element {\n    const [dragIndexOffset, setDragIndexOffset] = useState<number>(0);\n    const isDragging = dragIndexOffset !== 0;\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    function onDrag(deltaX: number): void {\n        const size = containerRef.current ? containerRef.current.getBoundingClientRect() : null;\n\n        if (size && size.width) {\n            // Set the `dragIndexOffset` so that the carousel can visually move before we send\n            // the new index to the parent.\n            setDragIndexOffset((deltaX / size.width) * visibleCount);\n        }\n    }\n\n    function onDragEnd(): void {\n        onSelectedIndexChange(selectedIndex + dragIndexOffset);\n        setDragIndexOffset(0);\n    }\n\n    return (\n        <div ref={containerRef}>\n            <Swipeable\n                preventDefaultTouchmoveEvent\n                onSwiping={(_, deltaX): void => onDrag(deltaX)}\n                onSwiped={onDragEnd}\n            >\n                <BaseCarousel\n                    selectedIndex={selectedIndex + dragIndexOffset}\n                    visibleCount={visibleCount}\n                    spacing={spacing}\n                    animationDuration={isDragging ? 0 : undefined}\n                >\n                    {children}\n                </BaseCarousel>\n            </Swipeable>\n        </div>\n    );\n}\n"],"names":["Carousel","children","spacing","visibleCount","selectedIndex","onSelectedIndexChange","useState","dragIndexOffset","setDragIndexOffset","isDragging","containerRef","useRef","onDrag","deltaX","size","current","getBoundingClientRect","width","onDragEnd","React","_","BaseCarousel","undefined"],"mappings":";;;;;;;;;;AA6Be,SAASA,QAAT,OAMY;MALvBC,QAKuB,QALvBA,QAKuB;0BAJvBC,OAIuB;MAJvBA,OAIuB,6BAJb,KAIa;+BAHvBC,YAGuB;MAHvBA,YAGuB,kCAHR,CAGQ;MAFvBC,aAEuB,QAFvBA,aAEuB;MADvBC,qBACuB,QADvBA,qBACuB;;kBACuBC,cAAQ,CAAS,CAAT,CAD/B;;MAChBC,eADgB;MACCC,kBADD;;MAEjBC,UAAU,GAAGF,eAAe,KAAK,CAAvC;MACMG,YAAY,GAAGC,YAAM,CAAiB,IAAjB,CAA3B;;WAESC,MAAT,CAAgBC,MAAhB,EAAsC;QAC5BC,IAAI,GAAGJ,YAAY,CAACK,OAAb,GAAuBL,YAAY,CAACK,OAAb,CAAqBC,qBAArB,EAAvB,GAAsE,IAAnF;;QAEIF,IAAI,IAAIA,IAAI,CAACG,KAAjB,EAAwB;;;MAGpBT,kBAAkB,CAAEK,MAAM,GAAGC,IAAI,CAACG,KAAf,GAAwBd,YAAzB,CAAlB;;;;WAICe,SAAT,GAA2B;IACvBb,qBAAqB,CAACD,aAAa,GAAGG,eAAjB,CAArB;IACAC,kBAAkB,CAAC,CAAD,CAAlB;;;SAIAW;IAAK,GAAG,EAAET;KACNS,6BAAC,SAAD;IACI,4BAA4B,MADhC;IAEI,SAAS,EAAE,mBAACC,CAAD,EAAIP,MAAJ;aAAqBD,MAAM,CAACC,MAAD,CAA3B;KAFf;IAGI,QAAQ,EAAEK;KAEVC,6BAACE,oBAAD;IACI,aAAa,EAAEjB,aAAa,GAAGG,eADnC;IAEI,YAAY,EAAEJ,YAFlB;IAGI,OAAO,EAAED,OAHb;IAII,iBAAiB,EAAEO,UAAU,GAAG,CAAH,GAAOa;KAEnCrB,QANL,CALJ,CADJ,CADJ;;;;;"}