{"version":3,"file":"index.js","sources":["../../../../components/TextInput/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { InputRowContext } from '../InputRow/index';\nimport styles from './index.module.scss';\n\ntype UiState = 'disabled' | 'readonly' | 'error' | 'default';\n\ntype ContextValue = {\n    hasValue: boolean;\n    size?: 'large' | 'small';\n    position: 'left' | 'right';\n};\n\nconst Context = React.createContext<ContextValue>({\n    hasValue: false,\n    size: undefined,\n    position: 'left',\n});\n\n/**\n * Prioritize the mutually exclusive UI states the user may end up in.\n */\nconst getUIState = ({\n    isDisabled,\n    isReadOnly,\n    hasError,\n}: Pick<TextInputPropTypes, 'isDisabled' | 'isReadOnly' | 'hasError'>): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (isReadOnly) {\n        return 'readonly';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface InputIconContainerPropTypes {\n    children: React.ReactNode;\n    style?: { color: string };\n}\n\n/**\n * This component is not exported. It wraps the `InputClearButton` and `InputIcon`, applying\n * classes to position the icon. It does this by using `create-react-context`, a ponyfill for\n * React’s context functionality. This makes it easier for consumers to use `InputClearButton` and\n * `InputIcon` because they won’t have to specify as many props.\n */\nconst TextInputIconContainer = ({ children, style }: InputIconContainerPropTypes): JSX.Element => (\n    <Context.Consumer>\n        {(theme): JSX.Element => {\n            const position = theme && theme.position;\n            const size = theme && theme.size;\n\n            return (\n                <div\n                    className={classNames({\n                        [styles.inputIconContainer]: true,\n                        // Applies when used on left\n                        [styles.inputIconContainerPositionLeft]: position === 'left',\n                        [styles.inputIconContainerPositionLeftSizeSmall]:\n                            position === 'left' && size === 'small',\n                        [styles.inputIconContainerPositionLeftSizeLarge]:\n                            position === 'left' && size === 'large',\n                        // Applies when used on right\n                        [styles.inputIconContainerPositionRight]: position === 'right',\n                        [styles.inputIconContainerPositionRightSizeSmall]:\n                            position === 'right' && size === 'small',\n                        [styles.inputIconContainerPositionRightSizeLarge]:\n                            position === 'right' && size === 'large',\n                    })}\n                    style={style}\n                >\n                    {children}\n                </div>\n            );\n        }}\n    </Context.Consumer>\n);\n\ninterface TextInputClearButtonPropTypes {\n    onClick: () => void;\n}\n\n/**\n * Accessible button that makes it easy to add a \"Clear\" button to a text input. It should be used\n * with the `innerRight` prop in `Input`.\n */\nconst TextInputClearButton = ({ onClick }: TextInputClearButtonPropTypes): JSX.Element => (\n    <TextInputIconContainer>\n        <Context.Consumer>\n            {(theme): JSX.Element => (\n                <div\n                    className={classNames({\n                        displayNone: theme && !theme.hasValue,\n                    })}\n                >\n                    <button\n                        className={styles.unstyledButton}\n                        aria-label=\"Clear input\"\n                        onClick={onClick}\n                        type=\"button\"\n                    >\n                        <svg\n                            viewBox=\"0 0 24 24\"\n                            width=\"18\"\n                            height=\"18\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className={styles.closeButtonIcon}\n                        >\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                        </svg>\n                    </button>\n                </div>\n            )}\n        </Context.Consumer>\n    </TextInputIconContainer>\n);\n\ninterface TextInputIconPropTypes {\n    /**\n     * Set the icon color with a color from [Thumbprint Tokens](/tokens/).\n     */\n    color?: string;\n    /**\n     * An icon component from [Thumbprint Icons](/icons/).\n     * You should pair \"Medium\" icons with `large` inputs and \"Small\" icons with `small` inputs.\n     */\n    children: React.ReactNode;\n}\n\n/**\n * Component that helps position icons within inputs.\n */\nconst TextInputIcon = ({ color = 'inherit', children }: TextInputIconPropTypes): JSX.Element => (\n    <TextInputIconContainer style={{ color }}>{children}</TextInputIconContainer>\n);\n\ninterface TextInputPropTypes {\n    /**\n     * Adds a HTML `id` attribute to the input. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disable the input.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds `readonly` HTML attribute, allowing users to select (but not modify) the input.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Adds the `required` HTML attribute.\n     */\n    isRequired?: boolean;\n    /**\n     * A regular expression that the `<input>` element's value is checked against when submitting a\n     * form.\n     */\n    pattern?: string;\n    /**\n     * The maximum number of characters that a user can enter. `onChange` will not fire if a user\n     * enters a character that exceeds `maxLength`.\n     */\n    maxLength?: number;\n    /**\n     * Makes the text and border color red.\n     */\n    hasError?: boolean;\n    /**\n     * Text that appears within the input when there is no `value`.\n     */\n    placeholder?: string;\n    /**\n     * Controls the height and padding of the input.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Sets the `type` attribute on the input element.\n     */\n    type?: 'email' | 'password' | 'text' | 'search' | 'tel' | 'number';\n    /**\n     * A [proposed specification](https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute)\n     * that enables specification of virtual keyboard type in Chrome. Currently only supported in\n     * Chrome and Android.\n     */\n    inputMode?: 'numeric';\n    /**\n     * The HTML `name` attribute that will be pased to the input. It is required if working with a\n     * form that uses `<form action=\"\" method=\"\">` to submit data to a server.\n     */\n    name?: string;\n    /**\n     * The current value of the input.\n     */\n    value?: string | number;\n    /**\n     * Content that appears within the input on the left.\n     */\n    innerLeft?: React.ReactNode;\n    /**\n     * Content that appears within the input on the right.\n     */\n    innerRight?: React.ReactNode;\n    /**\n     * The function that is called when the input value changes.\n     *\n     * It receives two arguments: `onChange(newValue, event)`.\n     *\n     * The consumer of this component should use that data to update the `value` prop passed in to\n     * this component.\n     */\n    onChange: (value: string, event: React.ChangeEvent<HTMLInputElement>) => void;\n    /**\n     * Function that fires when you click into the input.\n     */\n    onClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n    /**\n     * Fires when the input gains focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when the input loses focus, regardless of whether the value has changed.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a key is pressed down with the input focused.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a key press is released with the input focused.\n     */\n    onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a valid key input is made.\n     */\n    onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * This tells the browser to give the input focus when the page is loaded. This can [only be\n     * used once on a page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autofocus).\n     */\n    shouldFocusOnPageLoad?: boolean;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     */\n    dataTest?: string;\n    /**\n     * This tells the browser whether to attempt autocompletion of the input.\n     * [Supports all values](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).\n     */\n    autoComplete?: React.InputHTMLAttributes<HTMLInputElement>['autoComplete'];\n}\n\nconst TextInput = React.forwardRef<HTMLInputElement, TextInputPropTypes>(\n    (\n        {\n            id,\n            type = 'text',\n            isDisabled = false,\n            isReadOnly = false,\n            isRequired = false,\n            hasError = false,\n            placeholder,\n            size = 'large',\n            name,\n            value = '',\n            innerLeft,\n            innerRight,\n            onClick = (): void => {},\n            onChange = (): void => {},\n            onFocus = (): void => {},\n            onBlur = (): void => {},\n            onKeyDown = (): void => {},\n            onKeyUp = (): void => {},\n            onKeyPress = (): void => {},\n            shouldFocusOnPageLoad = false,\n            dataTest,\n            inputMode,\n            pattern,\n            maxLength,\n            autoComplete,\n        }: TextInputPropTypes,\n        outerRef,\n    ): JSX.Element => {\n        const uiState = getUIState({ isDisabled, isReadOnly, hasError });\n        // The input element rendered by this component. We use `useState` instead of\n        // `useRef` because callback refs allow us to add more than one `ref` to a DOM node.\n        const [inputEl, setInputEl] = useState<HTMLInputElement | null>(null);\n\n        const focusInput = (): void => {\n            if (inputEl) {\n                inputEl.focus();\n            }\n        };\n\n        /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n        return (\n            <div\n                className={classNames({\n                    [styles.root]: true,\n                    [styles.rootUiStateDefault]: uiState === 'default',\n                    [styles.rootUiStateReadonly]: uiState === 'readonly',\n                    [styles.rootUiStateDisabled]: uiState === 'disabled',\n                    [styles.rootUiStateError]: uiState === 'error',\n                })}\n            >\n                {innerLeft && (\n                    <Context.Provider\n                        value={{\n                            hasValue: !!value,\n                            size,\n                            position: 'left',\n                        }}\n                    >\n                        <div className={styles.inputInnerElement} onClick={focusInput}>\n                            {innerLeft}\n                        </div>\n                    </Context.Provider>\n                )}\n\n                <input\n                    className={classNames({\n                        [styles.input]: true,\n                        [styles.inputError]: uiState === 'error',\n                        [styles.inputSizeSmall]: size === 'small',\n                        [styles.inputSizeLarge]: size === 'large',\n                        [styles.inputInnerLeft]: innerLeft,\n                        [styles.inputInnerRight]: innerRight,\n                    })}\n                    disabled={isDisabled}\n                    readOnly={isReadOnly}\n                    required={isRequired}\n                    placeholder={placeholder}\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus={shouldFocusOnPageLoad}\n                    name={name}\n                    type={type}\n                    value={value}\n                    onChange={(e): void => onChange(e.target.value, e)}\n                    onClick={(e): void => onClick(e)}\n                    onFocus={(e): void => onFocus(e)}\n                    onBlur={(e): void => onBlur(e)}\n                    onKeyDown={(e): void => onKeyDown(e)}\n                    onKeyUp={(e): void => onKeyUp(e)}\n                    onKeyPress={(e): void => onKeyPress(e)}\n                    id={id}\n                    ref={(el): void => {\n                        setInputEl(el);\n\n                        // `outerRef` is the potential forwarded `ref` passed in from a consumer.\n                        // Not all refs are callable functions, so only try and call it if it is.\n                        if (typeof outerRef === 'function') {\n                            outerRef(el);\n                        }\n                    }}\n                    data-test={dataTest}\n                    inputMode={inputMode}\n                    pattern={pattern}\n                    maxLength={maxLength}\n                    autoComplete={autoComplete}\n                />\n\n                {innerRight && (\n                    <Context.Provider\n                        value={{\n                            hasValue: !!value,\n                            size,\n                            position: 'right',\n                        }}\n                    >\n                        <div className={styles.inputInnerElement} onClick={focusInput}>\n                            {innerRight}\n                        </div>\n                    </Context.Provider>\n                )}\n\n                <InputRowContext.Consumer>\n                    {({\n                        isWithinInputRow,\n                        isFirstInputRowChild,\n                        isLastInputRowChild,\n                    }): JSX.Element => (\n                        <div\n                            className={classNames({\n                                [styles.inputStyles]: true,\n                                [styles.inputStylesRoundedBordersLeft]:\n                                    isFirstInputRowChild || !isWithinInputRow,\n                                [styles.inputStylesRoundedBordersRight]:\n                                    isLastInputRowChild || !isWithinInputRow,\n                                [styles.inputStylesHasNoRightBorder]:\n                                    isWithinInputRow && !isLastInputRowChild,\n                                [styles.inputStylesUiStateDefault]: uiState === 'default',\n                                [styles.inputStylesUiStateReadonly]: uiState === 'readonly',\n                                [styles.inputStylesUiStateDisabled]: uiState === 'disabled',\n                                [styles.inputStylesUiStateError]: uiState === 'error',\n                            })}\n                        />\n                    )}\n                </InputRowContext.Consumer>\n            </div>\n        );\n    },\n);\nTextInput.displayName = 'TextInput';\n\nexport default TextInput;\nexport { TextInputIcon, TextInputClearButton };\n"],"names":["Context","React","createContext","hasValue","size","undefined","position","getUIState","isDisabled","isReadOnly","hasError","TextInputIconContainer","children","style","theme","classNames","styles","inputIconContainer","inputIconContainerPositionLeft","inputIconContainerPositionLeftSizeSmall","inputIconContainerPositionLeftSizeLarge","inputIconContainerPositionRight","inputIconContainerPositionRightSizeSmall","inputIconContainerPositionRightSizeLarge","TextInputClearButton","onClick","displayNone","unstyledButton","closeButtonIcon","TextInputIcon","color","TextInput","forwardRef","outerRef","id","type","isRequired","placeholder","name","value","innerLeft","innerRight","onChange","onFocus","onBlur","onKeyDown","onKeyUp","onKeyPress","shouldFocusOnPageLoad","dataTest","inputMode","pattern","maxLength","autoComplete","uiState","useState","inputEl","setInputEl","focusInput","focus","root","rootUiStateDefault","rootUiStateReadonly","rootUiStateDisabled","rootUiStateError","inputInnerElement","input","inputError","inputSizeSmall","inputSizeLarge","inputInnerLeft","inputInnerRight","e","target","el","InputRowContext","isWithinInputRow","isFirstInputRowChild","isLastInputRowChild","inputStyles","inputStylesRoundedBordersLeft","inputStylesRoundedBordersRight","inputStylesHasNoRightBorder","inputStylesUiStateDefault","inputStylesUiStateReadonly","inputStylesUiStateDisabled","inputStylesUiStateError","displayName"],"mappings":"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"}