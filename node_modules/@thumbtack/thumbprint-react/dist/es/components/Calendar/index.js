import React from 'react';
import DayPicker, { DateUtils } from 'react-day-picker';
import get from 'lodash/get';
import map from 'lodash/map';
import findIndex from 'lodash/findIndex';
import some from 'lodash/some';
import castArray from 'lodash/castArray';
import parse from 'date-fns/parse';
import isAfter from 'date-fns/is_after';
import isBefore from 'date-fns/is_before';
import endOfDay from 'date-fns/end_of_day';
import startOfDay from 'date-fns/start_of_day';
import styles from './index.module.scss';

function throwError(message) {
  throw new Error("TUI DatePicker: ".concat(message));
}

function normaliseValue(value) {
  if (value === null) {
    return [];
  }

  var valueArr = castArray(value);
  return map(valueArr, function (d) {
    return parse(d);
  });
} // Returns true any of the given `dates` fall on a day before the day of `cutoff`.

function hasAnyPastDays(dates) {
  var cutoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  return some(dates, function (date) {
    return isBefore(endOfDay(date), cutoff);
  });
} // Returns true any of the given `dates` fall on a day after the day of `cutoff`.

function hasAnyFutureDays(dates) {
  var cutoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  return some(dates, function (date) {
    return isAfter(startOfDay(date), cutoff);
  });
}

function isBeforeModifier(modifier) {
  return !!modifier && 'before' in modifier;
}

function isAfterModifier(modifier) {
  return !!modifier && 'after' in modifier;
}

function validateProps(props) {
  var days = normaliseValue(props.value);

  if (!props.allowMultiSelection && days.length > 1) {
    throwError('`allowMultiSelection` is `false` but multiple dates were provided');
  }

  if (isBeforeModifier(props.disabledDays) && hasAnyPastDays(days, props.disabledDays.before)) {
    throwError("Days before ".concat(props.disabledDays.before, " are disabled but one or more provided days fall before that."));
  }

  if (isAfterModifier(props.disabledDays) && hasAnyFutureDays(days, props.disabledDays.after)) {
    throwError("Days after ".concat(props.disabledDays.after, " are disabled but one or more provided days fall after that."));
  }
}

/**
 * Thin wrapper around `react-day-picker` that renders a calendar.
 */
var Calendar = function Calendar(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? [] : _ref$value,
      onChange = _ref.onChange,
      onMonthChange = _ref.onMonthChange,
      _ref$disabledDays = _ref.disabledDays,
      disabledDays = _ref$disabledDays === void 0 ? {
    before: new Date()
  } : _ref$disabledDays,
      month = _ref.month,
      lastMonth = _ref.lastMonth,
      _ref$allowMultiSelect = _ref.allowMultiSelection,
      allowMultiSelection = _ref$allowMultiSelect === void 0 ? false : _ref$allowMultiSelect,
      daysThemeDotIndicator = _ref.daysThemeDotIndicator,
      daysThemeStrikeout = _ref.daysThemeStrikeout;
  validateProps({
    value: value,
    onChange: onChange,
    disabledDays: disabledDays,
    month: month,
    lastMonth: lastMonth,
    allowMultiSelection: allowMultiSelection,
    onMonthChange: onMonthChange,
    daysThemeDotIndicator: daysThemeDotIndicator,
    daysThemeStrikeout: daysThemeStrikeout
  });
  var selectedDays = normaliseValue(value);
  var modifiers = {};

  if (typeof daysThemeDotIndicator === 'function') {
    modifiers['theme-dot'] = daysThemeDotIndicator;
  }

  if (typeof daysThemeStrikeout === 'function') {
    modifiers['theme-strikeout'] = daysThemeStrikeout;
  }

  return React.createElement("div", {
    className: styles.root
  }, React.createElement(DayPicker, {
    disabledDays: disabledDays || undefined,
    fromMonth: get(disabledDays, 'before', null),
    toMonth: lastMonth,
    month: month || selectedDays[0],
    initialMonth: month || selectedDays[0],
    selectedDays: selectedDays,
    onMonthChange: onMonthChange,
    modifiers: modifiers,
    onDayClick: function onDayClick(day, _ref2) {
      var selected = _ref2.selected,
          disabled = _ref2.disabled;

      if (disabled) {
        return;
      }

      var newSelectedDays = normaliseValue(value);

      if (allowMultiSelection) {
        if (selected) {
          var selectedIndex = findIndex(newSelectedDays, function (selectedDay) {
            return DateUtils.isSameDay(selectedDay, day);
          });
          newSelectedDays.splice(selectedIndex, 1);
        } else {
          newSelectedDays.push(day);
        }
      } else {
        newSelectedDays = [day];
      }

      onChange(map(newSelectedDays, startOfDay));
    }
  }));
};

export default Calendar;
export { hasAnyFutureDays, hasAnyPastDays, normaliseValue, validateProps };
//# sourceMappingURL=index.js.map
