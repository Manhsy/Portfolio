{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\nvar getUIState = function getUIState(_ref) {\n  var isDisabled = _ref.isDisabled,\n      hasError = _ref.hasError;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (hasError) {\n    return 'error';\n  }\n\n  return 'default';\n};\n\nfunction Label(_ref2) {\n  var _classNames;\n\n  var _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      _ref2$hasError = _ref2.hasError,\n      hasError = _ref2$hasError === void 0 ? false : _ref2$hasError,\n      forProp = _ref2.for,\n      dataTest = _ref2.dataTest,\n      dataTestId = _ref2.dataTestId,\n      _ref2$children = _ref2.children,\n      children = _ref2$children === void 0 ? null : _ref2$children;\n  var uiState = getUIState({\n    isDisabled: isDisabled,\n    hasError: hasError\n  });\n  return (// eslint-disable-next-line jsx-a11y/label-has-for\n    React.createElement(\"label\", {\n      htmlFor: forProp,\n      className: classNames((_classNames = {}, _defineProperty(_classNames, styles.text, true), _defineProperty(_classNames, styles.textUiStateDisabled, uiState === 'disabled'), _defineProperty(_classNames, styles.textUiStateError, uiState === 'error'), _defineProperty(_classNames, styles.textUiStateDefault, uiState === 'default'), _classNames)),\n      \"data-test\": dataTest,\n      \"data-testid\": dataTestId\n    }, children)\n  );\n}\n\nexport default Label;","map":{"version":3,"sources":["../../../../components/Label/index.tsx"],"names":["getUIState","isDisabled","hasError","for","forProp","dataTest","dataTestId","children","uiState","classNames","styles"],"mappings":";;;;;AAMA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAGwC;MAFvDC,UAEuD,GAAA,IAAA,CAFvDA,U;MACAC,QACuD,GAAA,IAAA,CADvDA,Q;;MAEA,U,EAAgB;WACZ,U;;;MAGJ,Q,EAAc;WACV,O;;;SAGJ,S;AAZJ,CAAA;;AA+Ce,SAAA,KAAA,CAAA,KAAA,EAOY;;;+BANvBD,U;MAAAA,UAMuB,GAAA,gBAAA,KAAA,KAAA,CAAA,GANV,KAMU,GAAA,gB;6BALvBC,Q;MAAAA,QAKuB,GAAA,cAAA,KAAA,KAAA,CAAA,GALZ,KAKY,GAAA,c;MAJlBE,OAIkB,GAAA,KAAA,CAJvBD,G;MACAE,QAGuB,GAAA,KAAA,CAHvBA,Q;MACAC,UAEuB,GAAA,KAAA,CAFvBA,U;6BACAC,Q;MAAAA,QACuB,GAAA,cAAA,KAAA,KAAA,CAAA,GADZ,IACY,GAAA,c;MACjBC,OAAO,GAAGR,UAAU,CAAC;AAAEC,IAAAA,UAAU,EAAZ,UAAA;AAAcC,IAAAA,QAAQ,EAARA;AAAd,GAAD,C;;;AAKlB,MAAA,OAAO,EADX,O;AAEI,MAAA,SAAS,EAAEO,UAAU,EAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBC,MAAM,CADU,IAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBA,MAAM,CAFU,mBAAA,EAEaF,OAAO,KAFpB,UAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAGhBE,MAAM,CAHU,gBAAA,EAGUF,OAAO,KAHjB,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAIhBE,MAAM,CAJU,kBAAA,EAIYF,OAAO,KAJnB,SAAA,CAAA,EAFzB,WAEyB,E;mBAFzB,Q;qBASiBF;OATjB,Q","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\ntype UiState = 'disabled' | 'error' | 'default';\n\nconst getUIState = ({\n    isDisabled,\n    hasError,\n}: Pick<PropTypes, 'isDisabled' | 'hasError'>): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface PropTypes {\n    /**\n     * The label text that appears above the form element.\n     */\n    children?: React.ReactNode;\n    /**\n     * `id` of the form field that's associated with the `label`. Clicking on the label text will\n     * switch the browser's focus to the form field.\n     *\n     * The Label's `for` and form field's `id` prop must match and be unique to the page. You can\n     * use [Lodash's `uniqueId`](https://lodash.com/docs/4.17.10#uniqueId) to generate a unique id.\n     */\n    for?: string;\n    /**\n     * Visually disable the label.\n     */\n    isDisabled?: boolean;\n    /**\n     * Changes the label text color to red.\n     */\n    hasError?: boolean;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport default function Label({\n    isDisabled = false,\n    hasError = false,\n    for: forProp,\n    dataTest,\n    dataTestId,\n    children = null,\n}: PropTypes): JSX.Element {\n    const uiState = getUIState({ isDisabled, hasError });\n\n    return (\n        // eslint-disable-next-line jsx-a11y/label-has-for\n        <label\n            htmlFor={forProp}\n            className={classNames({\n                [styles.text]: true,\n                [styles.textUiStateDisabled]: uiState === 'disabled',\n                [styles.textUiStateError]: uiState === 'error',\n                [styles.textUiStateDefault]: uiState === 'default',\n            })}\n            data-test={dataTest}\n            data-testid={dataTestId}\n        >\n            {children}\n        </label>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}