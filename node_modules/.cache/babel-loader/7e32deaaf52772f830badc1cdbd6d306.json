{"ast":null,"code":"import { inherits as _inherits, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf, createClass as _createClass } from '../../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nvar EXITED = 'exited';\nvar ENTERING = 'entering';\nvar ENTERED = 'entered';\nvar EXITING = 'exiting';\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inherits(Transition, _React$Component);\n\n  function Transition(props) {\n    var _this;\n\n    _classCallCheck(this, Transition);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transition).call(this, props));\n    _this.state = {\n      stage: null,\n      currentTimeout: null\n    };\n    return _this;\n  }\n\n  _createClass(Transition, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var inProp = this.props.in;\n      this.setState({\n        stage: inProp ? ENTERING : EXITED,\n        currentTimeout: null\n      });\n      this.onEntering = this.onEntering.bind(this);\n      this.onEntered = this.onEntered.bind(this);\n      this.onExiting = this.onExiting.bind(this);\n      this.onExited = this.onExited.bind(this);\n      this.clearExistingTimeout = this.clearExistingTimeout.bind(this); // Call `onEntered` If the modal is immediately open when it mounts.\n\n      if (inProp) {\n        this.onEntered();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var inProp = this.props.in;\n\n      if (prevProps.in !== inProp) {\n        this.clearExistingTimeout();\n\n        if (inProp) {\n          this.onEntering();\n        } else {\n          this.onExiting();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearExistingTimeout();\n    }\n  }, {\n    key: \"onEntering\",\n    value: function onEntering() {\n      var timeout = this.props.timeout;\n      this.setState({\n        stage: ENTERING,\n        currentTimeout: window.setTimeout(this.onEntered, timeout.enter)\n      });\n    }\n  }, {\n    key: \"onEntered\",\n    value: function onEntered() {\n      var onEntered = this.props.onEntered;\n      this.setState({\n        stage: ENTERED\n      });\n\n      if (onEntered) {\n        onEntered();\n      }\n    }\n  }, {\n    key: \"onExiting\",\n    value: function onExiting() {\n      var timeout = this.props.timeout;\n      this.setState({\n        stage: EXITING,\n        currentTimeout: window.setTimeout(this.onExited, timeout.exit)\n      });\n    }\n  }, {\n    key: \"onExited\",\n    value: function onExited() {\n      var onExited = this.props.onExited;\n      this.setState({\n        stage: EXITED\n      });\n\n      if (onExited) {\n        onExited();\n      }\n    }\n  }, {\n    key: \"clearExistingTimeout\",\n    value: function clearExistingTimeout() {\n      var currentTimeout = this.state.currentTimeout;\n\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stage = this.state.stage;\n      var children = this.props.children;\n\n      if (!stage) {\n        return null;\n      }\n\n      return children(stage);\n    }\n  }]);\n\n  return Transition;\n}(React.Component);\n\nexport default Transition;","map":{"version":3,"sources":["../../../../../components/Modal/components/transition.tsx"],"names":["EXITED","ENTERING","ENTERED","EXITING","Transition","React","Component","stage","currentTimeout","inProp","prevProps","timeout","window","onEntered","onExited","clearTimeout","children"],"mappings":";;AAEA,IAAMA,MAAM,GAAZ,QAAA;AACA,IAAMC,QAAQ,GAAd,UAAA;AACA,IAAMC,OAAO,GAAb,SAAA;AACA,IAAMC,OAAO,GAAb,SAAA;;IAoBqBC,UAAAA,G;;;sBACjB,K,EAA8B;;;;;oFAC1B,K;UAEA,K,GAAa;AACTG,MAAAA,KAAK,EADI,IAAA;AAETC,MAAAA,cAAc,EAAE;AAFP,K;;;;;;wCAMS;UACVC,MADU,GACC,KADD,KACC,CADD,E;WAGtB,Q,CAAc;AACVF,QAAAA,KAAK,EAAEE,MAAM,GAAA,QAAA,GADH,MAAA;AAEVD,QAAAA,cAAc,EAAE;AAFN,O;WAKd,U,GAAkB,KAAA,UAAA,CAAA,IAAA,CAAlB,IAAkB,C;WAClB,S,GAAiB,KAAA,SAAA,CAAA,IAAA,CAAjB,IAAiB,C;WACjB,S,GAAiB,KAAA,SAAA,CAAA,IAAA,CAAjB,IAAiB,C;WACjB,Q,GAAgB,KAAA,QAAA,CAAA,IAAA,CAAhB,IAAgB,C;WAChB,oB,GAA4B,KAAA,oBAAA,CAAA,IAAA,CAZN,IAYM,C,CAZN,CAAA;;UAetB,M,EAAY;aACR,S;;;;;uCAIWE,S,EAAkC;UACrCD,MADqC,GAC1B,KAD0B,KAC1B,CAD0B,E;;UAG7CC,SAAS,CAATA,EAAAA,KAAJ,M,EAA6B;aACzB,oB;;YAEA,M,EAAY;eACR,U;AADJ,S,MAEO;eACH,S;;;;;;2CAKiB;WACzB,oB;;;;iCAGe;UACPC,OADO,GACK,KADL,KACK,CADL,O;WAGf,Q,CAAc;AACVJ,QAAAA,KAAK,EADK,QAAA;AAEVC,QAAAA,cAAc,EAAEI,MAAM,CAANA,UAAAA,CAAkB,KAAlBA,SAAAA,EAAkCD,OAAO,CAAzCC,KAAAA;AAFN,O;;;;gCAMA;UACNC,SADM,GACQ,KADR,KACQ,CADR,S;WAGd,Q,CAAc;AAAEN,QAAAA,KAAK,EAAEL;AAAT,O;;UAEd,S,EAAe;AACXW,QAAAA,SAAS;;;;;gCAIC;UACNF,OADM,GACM,KADN,KACM,CADN,O;WAGd,Q,CAAc;AACVJ,QAAAA,KAAK,EADK,OAAA;AAEVC,QAAAA,cAAc,EAAEI,MAAM,CAANA,UAAAA,CAAkB,KAAlBA,QAAAA,EAAiCD,OAAO,CAAxCC,IAAAA;AAFN,O;;;;+BAMD;UACLE,QADK,GACQ,KADR,KACQ,CADR,Q;WAGb,Q,CAAc;AAAEP,QAAAA,KAAK,EAAEP;AAAT,O;;UAEd,Q,EAAc;AACVc,QAAAA,QAAQ;;;;;2CAIa;UACjBN,cADiB,GACE,KADF,KACE,CADF,c;;UAGzB,c,EAAoB;AAChBO,QAAAA,YAAY,CAAZA,cAAY,CAAZA;;;;;6BAIqB;UACjBR,KADiB,GACP,KADO,KACP,CADO,K;UAEjBS,QAFiB,GAEJ,KAFI,KAEJ,CAFI,Q;;UAIrB,CAAJ,K,EAAY;eACR,I;;;aAGGA,QAAQ,CAAf,KAAe,C;;;;;EAtGiBX,KAAK,CAACC,S","sourcesContent":["import React from 'react';\n\nconst EXITED = 'exited';\nconst ENTERING = 'entering';\nconst ENTERED = 'entered';\nconst EXITING = 'exiting';\n\ntype Stage = 'exited' | 'entering' | 'entered' | 'exiting' | null;\n\ninterface PropTypes {\n    children: (stage: Stage) => JSX.Element;\n    in: boolean;\n    timeout: {\n        enter: number;\n        exit: number;\n    };\n    onEntered?: () => void;\n    onExited?: () => void;\n}\n\ninterface StateTypes {\n    stage: Stage;\n    currentTimeout: number | null;\n}\n\nexport default class Transition extends React.Component<PropTypes, StateTypes> {\n    constructor(props: PropTypes) {\n        super(props);\n\n        this.state = {\n            stage: null,\n            currentTimeout: null,\n        };\n    }\n\n    componentDidMount(): void {\n        const { in: inProp } = this.props;\n\n        this.setState({\n            stage: inProp ? ENTERING : EXITED,\n            currentTimeout: null,\n        });\n\n        this.onEntering = this.onEntering.bind(this);\n        this.onEntered = this.onEntered.bind(this);\n        this.onExiting = this.onExiting.bind(this);\n        this.onExited = this.onExited.bind(this);\n        this.clearExistingTimeout = this.clearExistingTimeout.bind(this);\n\n        // Call `onEntered` If the modal is immediately open when it mounts.\n        if (inProp) {\n            this.onEntered();\n        }\n    }\n\n    componentDidUpdate(prevProps: { in: boolean }): void {\n        const { in: inProp } = this.props;\n\n        if (prevProps.in !== inProp) {\n            this.clearExistingTimeout();\n\n            if (inProp) {\n                this.onEntering();\n            } else {\n                this.onExiting();\n            }\n        }\n    }\n\n    componentWillUnmount(): void {\n        this.clearExistingTimeout();\n    }\n\n    onEntering(): void {\n        const { timeout } = this.props;\n\n        this.setState({\n            stage: ENTERING,\n            currentTimeout: window.setTimeout(this.onEntered, timeout.enter),\n        });\n    }\n\n    onEntered(): void {\n        const { onEntered } = this.props;\n\n        this.setState({ stage: ENTERED });\n\n        if (onEntered) {\n            onEntered();\n        }\n    }\n\n    onExiting(): void {\n        const { timeout } = this.props;\n\n        this.setState({\n            stage: EXITING,\n            currentTimeout: window.setTimeout(this.onExited, timeout.exit),\n        });\n    }\n\n    onExited(): void {\n        const { onExited } = this.props;\n\n        this.setState({ stage: EXITED });\n\n        if (onExited) {\n            onExited();\n        }\n    }\n\n    clearExistingTimeout(): void {\n        const { currentTimeout } = this.state;\n\n        if (currentTimeout) {\n            clearTimeout(currentTimeout);\n        }\n    }\n\n    render(): JSX.Element | null {\n        const { stage } = this.state;\n        const { children } = this.props;\n\n        if (!stage) {\n            return null;\n        }\n\n        return children(stage);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}