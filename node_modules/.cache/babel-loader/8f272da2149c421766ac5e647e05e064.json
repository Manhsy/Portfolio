{"ast":null,"code":"import React from 'react';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport get from 'lodash/get';\nimport map from 'lodash/map';\nimport findIndex from 'lodash/findIndex';\nimport some from 'lodash/some';\nimport castArray from 'lodash/castArray';\nimport parse from 'date-fns/parse';\nimport isAfter from 'date-fns/is_after';\nimport isBefore from 'date-fns/is_before';\nimport endOfDay from 'date-fns/end_of_day';\nimport startOfDay from 'date-fns/start_of_day';\nimport styles from './index.module.scss';\n\nfunction throwError(message) {\n  throw new Error(\"TUI DatePicker: \".concat(message));\n}\n\nfunction normaliseValue(value) {\n  if (value === null) {\n    return [];\n  }\n\n  var valueArr = castArray(value);\n  return map(valueArr, function (d) {\n    return parse(d);\n  });\n} // Returns true any of the given `dates` fall on a day before the day of `cutoff`.\n\n\nfunction hasAnyPastDays(dates) {\n  var cutoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  return some(dates, function (date) {\n    return isBefore(endOfDay(date), cutoff);\n  });\n} // Returns true any of the given `dates` fall on a day after the day of `cutoff`.\n\n\nfunction hasAnyFutureDays(dates) {\n  var cutoff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  return some(dates, function (date) {\n    return isAfter(startOfDay(date), cutoff);\n  });\n}\n\nfunction isBeforeModifier(modifier) {\n  return !!modifier && 'before' in modifier;\n}\n\nfunction isAfterModifier(modifier) {\n  return !!modifier && 'after' in modifier;\n}\n\nfunction validateProps(props) {\n  var days = normaliseValue(props.value);\n\n  if (!props.allowMultiSelection && days.length > 1) {\n    throwError('`allowMultiSelection` is `false` but multiple dates were provided');\n  }\n\n  if (isBeforeModifier(props.disabledDays) && hasAnyPastDays(days, props.disabledDays.before)) {\n    throwError(\"Days before \".concat(props.disabledDays.before, \" are disabled but one or more provided days fall before that.\"));\n  }\n\n  if (isAfterModifier(props.disabledDays) && hasAnyFutureDays(days, props.disabledDays.after)) {\n    throwError(\"Days after \".concat(props.disabledDays.after, \" are disabled but one or more provided days fall after that.\"));\n  }\n}\n/**\n * Thin wrapper around `react-day-picker` that renders a calendar.\n */\n\n\nvar Calendar = function Calendar(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? [] : _ref$value,\n      onChange = _ref.onChange,\n      onMonthChange = _ref.onMonthChange,\n      _ref$disabledDays = _ref.disabledDays,\n      disabledDays = _ref$disabledDays === void 0 ? {\n    before: new Date()\n  } : _ref$disabledDays,\n      month = _ref.month,\n      lastMonth = _ref.lastMonth,\n      _ref$allowMultiSelect = _ref.allowMultiSelection,\n      allowMultiSelection = _ref$allowMultiSelect === void 0 ? false : _ref$allowMultiSelect,\n      daysThemeDotIndicator = _ref.daysThemeDotIndicator,\n      daysThemeStrikeout = _ref.daysThemeStrikeout;\n  validateProps({\n    value: value,\n    onChange: onChange,\n    disabledDays: disabledDays,\n    month: month,\n    lastMonth: lastMonth,\n    allowMultiSelection: allowMultiSelection,\n    onMonthChange: onMonthChange,\n    daysThemeDotIndicator: daysThemeDotIndicator,\n    daysThemeStrikeout: daysThemeStrikeout\n  });\n  var selectedDays = normaliseValue(value);\n  var modifiers = {};\n\n  if (typeof daysThemeDotIndicator === 'function') {\n    modifiers['theme-dot'] = daysThemeDotIndicator;\n  }\n\n  if (typeof daysThemeStrikeout === 'function') {\n    modifiers['theme-strikeout'] = daysThemeStrikeout;\n  }\n\n  return React.createElement(\"div\", {\n    className: styles.root\n  }, React.createElement(DayPicker, {\n    disabledDays: disabledDays || undefined,\n    fromMonth: get(disabledDays, 'before', null),\n    toMonth: lastMonth,\n    month: month || selectedDays[0],\n    initialMonth: month || selectedDays[0],\n    selectedDays: selectedDays,\n    onMonthChange: onMonthChange,\n    modifiers: modifiers,\n    onDayClick: function onDayClick(day, _ref2) {\n      var selected = _ref2.selected,\n          disabled = _ref2.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      var newSelectedDays = normaliseValue(value);\n\n      if (allowMultiSelection) {\n        if (selected) {\n          var selectedIndex = findIndex(newSelectedDays, function (selectedDay) {\n            return DateUtils.isSameDay(selectedDay, day);\n          });\n          newSelectedDays.splice(selectedIndex, 1);\n        } else {\n          newSelectedDays.push(day);\n        }\n      } else {\n        newSelectedDays = [day];\n      }\n\n      onChange(map(newSelectedDays, startOfDay));\n    }\n  }));\n};\n\nexport default Calendar;\nexport { hasAnyFutureDays, hasAnyPastDays, normaliseValue, validateProps };","map":{"version":3,"sources":["../../../../components/Calendar/index.tsx"],"names":["value","valueArr","castArray","map","parse","cutoff","some","isBefore","endOfDay","isAfter","startOfDay","days","normaliseValue","props","throwError","isBeforeModifier","hasAnyPastDays","isAfterModifier","hasAnyFutureDays","Calendar","onChange","onMonthChange","disabledDays","before","month","lastMonth","allowMultiSelection","daysThemeDotIndicator","daysThemeStrikeout","validateProps","selectedDays","modifiers","styles","root","get","selected","disabled","newSelectedDays","selectedIndex","findIndex","DateUtils"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DayPicker, {\n    DateUtils,\n    Modifiers,\n    Modifier,\n    BeforeModifier,\n    BeforeAfterModifier,\n    AfterModifier,\n} from 'react-day-picker';\n\nimport get from 'lodash/get';\nimport map from 'lodash/map';\nimport findIndex from 'lodash/findIndex';\nimport some from 'lodash/some';\nimport castArray from 'lodash/castArray';\n\nimport parse from 'date-fns/parse';\nimport isAfter from 'date-fns/is_after';\nimport isBefore from 'date-fns/is_before';\nimport endOfDay from 'date-fns/end_of_day';\nimport startOfDay from 'date-fns/start_of_day';\n\nimport styles from './index.module.scss';\n\nexport type DateIsh = Date | string | number;\n\nfunction throwError(message: string): void {\n    throw new Error(`TUI DatePicker: ${message}`);\n}\n\nexport function normaliseValue(value: PropTypes['value']): Date[] {\n    if (value === null) {\n        return [];\n    }\n\n    const valueArr: DateIsh[] = castArray<DateIsh>(value);\n\n    return map<DateIsh, Date>(valueArr, d => parse(d));\n}\n\n// Returns true any of the given `dates` fall on a day before the day of `cutoff`.\nexport function hasAnyPastDays(dates: Date[], cutoff: Date = new Date()): boolean {\n    return some(dates, date => isBefore(endOfDay(date), cutoff));\n}\n\n// Returns true any of the given `dates` fall on a day after the day of `cutoff`.\nexport function hasAnyFutureDays(dates: Date[], cutoff: Date = new Date()): boolean {\n    return some(dates, date => isAfter(startOfDay(date), cutoff));\n}\n\nfunction isBeforeModifier(\n    modifier: Modifier | null,\n): modifier is BeforeModifier | BeforeAfterModifier {\n    return !!modifier && 'before' in modifier;\n}\nfunction isAfterModifier(\n    modifier: Modifier | null,\n): modifier is AfterModifier | BeforeAfterModifier {\n    return !!modifier && 'after' in modifier;\n}\n\nexport function validateProps(props: PropTypes): void {\n    const days = normaliseValue(props.value);\n\n    if (!props.allowMultiSelection && days.length > 1) {\n        throwError('`allowMultiSelection` is `false` but multiple dates were provided');\n    }\n\n    if (isBeforeModifier(props.disabledDays) && hasAnyPastDays(days, props.disabledDays.before)) {\n        throwError(\n            `Days before ${props.disabledDays.before} are disabled but one or more provided days fall before that.`,\n        );\n    }\n\n    if (isAfterModifier(props.disabledDays) && hasAnyFutureDays(days, props.disabledDays.after)) {\n        throwError(\n            `Days after ${props.disabledDays.after} are disabled but one or more provided days fall after that.`,\n        );\n    }\n}\n\ninterface PropTypes {\n    /**\n     * One or more dates to show as selected in the initial UI. Each \"date\" can be a JS Date object\n     * or a string representing a date, or a numeric UNIX timestamp, and either a single object or\n     * an array of such objects can be provided.\n     */\n    value?: DateIsh | DateIsh[] | null;\n    /**\n     * Date object representing the month that is currently displayed by the calendar. If omitted\n     * it will default to the first date in the `value` prop. You should update it in response to\n     * the `onMonthChange` prop.\n     */\n    month?: Date;\n    /**\n     * Callback that is triggered when th user selects a date. The function receives an array of\n     * a JavaScript Date objects for each of the currently selected dates.\n     */\n    onChange: (selectedDates: Date[]) => void;\n    /**\n     * Callback that is triggered when the user navigates to a different month using the navigation\n     * buttons or keyboard. The function receives a single JavaScript `Date` object indicating\n     * the new on-screen month.\n     */\n    onMonthChange: (selectedMonth: Date) => void;\n    /**\n     * Boolean that determines whether or not the user is allowed to select more than one date at\n     * a time. Defaults to `false`.\n     */\n    allowMultiSelection?: boolean;\n    /**\n     * A react-day-picker modifier for greater control over disabled days. Past selection is\n     * disabled by default.\n     * http://react-day-picker.js.org/docs/modifiers.html\n     */\n    disabledDays?: Modifier | null;\n    /**\n     * A Date object representing the last allowed month. Users won’t be able to navigate or\n     * interact with the days after it.\n     */\n    lastMonth?: Date;\n    /**\n     * Applies a blue dot indicator below the numeric day in the calendar's day cell if the\n     * function returns `true` for a given JavaScript `Date`.\n     */\n    daysThemeDotIndicator?: (date: Date) => boolean;\n    /**\n     * Applies a strikeout treatment on the numeric day in the calendar's day cell if the function\n     * returns `true` for a given JavaScript `Date`.\n     */\n    daysThemeStrikeout?: (date: Date) => boolean;\n}\n\n/**\n * Thin wrapper around `react-day-picker` that renders a calendar.\n */\nconst Calendar = ({\n    value = [],\n    onChange,\n    onMonthChange,\n    disabledDays = { before: new Date() },\n    month,\n    lastMonth,\n    allowMultiSelection = false,\n    daysThemeDotIndicator,\n    daysThemeStrikeout,\n}: PropTypes): JSX.Element => {\n    validateProps({\n        value,\n        onChange,\n        disabledDays,\n        month,\n        lastMonth,\n        allowMultiSelection,\n        onMonthChange,\n        daysThemeDotIndicator,\n        daysThemeStrikeout,\n    });\n\n    const selectedDays = normaliseValue(value);\n\n    const modifiers: Partial<Modifiers> = {};\n\n    if (typeof daysThemeDotIndicator === 'function') {\n        modifiers['theme-dot'] = daysThemeDotIndicator;\n    }\n\n    if (typeof daysThemeStrikeout === 'function') {\n        modifiers['theme-strikeout'] = daysThemeStrikeout;\n    }\n\n    return (\n        <div className={styles.root}>\n            <DayPicker\n                disabledDays={disabledDays || undefined}\n                fromMonth={get(disabledDays, 'before', null)}\n                toMonth={lastMonth}\n                month={month || selectedDays[0]}\n                initialMonth={month || selectedDays[0]}\n                selectedDays={selectedDays}\n                onMonthChange={onMonthChange}\n                modifiers={modifiers}\n                onDayClick={(day, { selected, disabled }): void => {\n                    if (disabled) {\n                        return;\n                    }\n\n                    let newSelectedDays = normaliseValue(value);\n\n                    if (allowMultiSelection) {\n                        if (selected) {\n                            const selectedIndex = findIndex(newSelectedDays, selectedDay =>\n                                DateUtils.isSameDay(selectedDay, day),\n                            );\n                            newSelectedDays.splice(selectedIndex, 1);\n                        } else {\n                            newSelectedDays.push(day);\n                        }\n                    } else {\n                        newSelectedDays = [day];\n                    }\n\n                    onChange(map(newSelectedDays, startOfDay));\n                }}\n            />\n        </div>\n    );\n};\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}