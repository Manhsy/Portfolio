{"ast":null,"code":"import { slicedToArray as _slicedToArray } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState, useRef } from 'react';\nimport Swipeable from 'react-swipeable';\nimport BaseCarousel from './base-carousel.js';\n\nfunction Carousel(_ref) {\n  var children = _ref.children,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? '0px' : _ref$spacing,\n      _ref$visibleCount = _ref.visibleCount,\n      visibleCount = _ref$visibleCount === void 0 ? 1 : _ref$visibleCount,\n      selectedIndex = _ref.selectedIndex,\n      onSelectedIndexChange = _ref.onSelectedIndexChange;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      dragIndexOffset = _useState2[0],\n      setDragIndexOffset = _useState2[1];\n\n  var isDragging = dragIndexOffset !== 0;\n  var containerRef = useRef(null);\n\n  function onDrag(deltaX) {\n    var size = containerRef.current ? containerRef.current.getBoundingClientRect() : null;\n\n    if (size && size.width) {\n      // Set the `dragIndexOffset` so that the carousel can visually move before we send\n      // the new index to the parent.\n      setDragIndexOffset(deltaX / size.width * visibleCount);\n    }\n  }\n\n  function onDragEnd() {\n    onSelectedIndexChange(selectedIndex + dragIndexOffset);\n    setDragIndexOffset(0);\n  }\n\n  return React.createElement(\"div\", {\n    ref: containerRef\n  }, React.createElement(Swipeable, {\n    preventDefaultTouchmoveEvent: true,\n    onSwiping: function onSwiping(_, deltaX) {\n      return onDrag(deltaX);\n    },\n    onSwiped: onDragEnd\n  }, React.createElement(BaseCarousel, {\n    selectedIndex: selectedIndex + dragIndexOffset,\n    visibleCount: visibleCount,\n    spacing: spacing,\n    animationDuration: isDragging ? 0 : undefined\n  }, children)));\n}\n\nexport default Carousel;","map":{"version":3,"sources":["../../../../components/Carousel/index.tsx"],"names":["children","spacing","visibleCount","selectedIndex","onSelectedIndexChange","dragIndexOffset","setDragIndexOffset","useState","isDragging","containerRef","useRef","size","deltaX","onDrag","onDragEnd","undefined"],"mappings":";;;;;AA6Be,SAAA,QAAA,CAAA,IAAA,EAMY;MALvBA,QAKuB,GAAA,IAAA,CALvBA,Q;0BACAC,O;MAAAA,OAIuB,GAAA,YAAA,KAAA,KAAA,CAAA,GAJb,KAIa,GAAA,Y;+BAHvBC,Y;MAAAA,YAGuB,GAAA,iBAAA,KAAA,KAAA,CAAA,GAHR,CAGQ,GAAA,iB;MAFvBC,aAEuB,GAAA,IAAA,CAFvBA,a;MACAC,qBACuB,GAAA,IAAA,CADvBA,qB;;kBAE8CG,QAAQ,CAD/B,CAC+B,C;;MAA/CF,eADgB,GAAA,UAAA,CAAA,CAAA,C;MACCC,kBADD,GAAA,UAAA,CAAA,CAAA,C;;MAEjBE,UAAU,GAAGH,eAAe,KAAlC,C;MACMI,YAAY,GAAGC,MAAM,CAA3B,IAA2B,C;;WAE3B,M,CAAA,M,EAAsC;QAC5BC,IAAI,GAAGF,YAAY,CAAZA,OAAAA,GAAuBA,YAAY,CAAZA,OAAAA,CAAvBA,qBAAuBA,EAAvBA,GAAb,I;;QAEIE,IAAI,IAAIA,IAAI,CAAhB,K,EAAwB;;;AAGpBL,MAAAA,kBAAkB,CAAEM,MAAM,GAAGD,IAAI,CAAd,KAACC,GAApBN,YAAkB,CAAlBA;;;;WAIR,S,GAA2B;AACvBF,IAAAA,qBAAqB,CAACD,aAAa,GAAnCC,eAAqB,CAArBA;AACAE,IAAAA,kBAAkB,CAAlBA,CAAkB,CAAlBA;;;SAIA,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAEG;AAAV,GAAA,EACI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACI,IAAA,4BAA4B,EADhC,IAAA;AAEI,IAAA,SAAS,EAAE,SAAA,SAAA,CAAA,CAAA,EAAA,MAAA,EAAA;aAAqBI,MAAM,CAA3B,MAA2B,C;AAF1C,KAAA;AAGI,IAAA,QAAQ,EAAEC;AAHd,GAAA,EAKI,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AACI,IAAA,aAAa,EAAEX,aAAa,GADhC,eAAA;AAEI,IAAA,YAAY,EAFhB,YAAA;AAGI,IAAA,OAAO,EAHX,OAAA;AAII,IAAA,iBAAiB,EAAEK,UAAU,GAAA,CAAA,GAAOO;AAJxC,GAAA,EAPZ,QAOY,CALJ,CADJ,C","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Swipeable from 'react-swipeable';\nimport BaseCarousel from './base-carousel';\n\ninterface PropTypes {\n    /**\n     * The items in the carousel that appear horizontally.\n     */\n    children: React.ReactNode;\n    /**\n     * The index of the left-most item to display in the carousel. Supports all numbers.\n     */\n    selectedIndex: number;\n    /**\n     * This function is called while a user is dragging the carousel and receives the new index.\n     * This should update the `selectedIndex` prop similarly to an `onChange` in a controlled\n     * input.\n     */\n    onSelectedIndexChange: (newIndex: number) => void;\n    /**\n     * The number of items that are visible at once.\n     */\n    visibleCount?: number;\n    /**\n     * The amount space separating each item. Supports CSS values such as `8px` or `0.5em`.\n     */\n    spacing?: string;\n}\n\nexport default function Carousel({\n    children,\n    spacing = '0px',\n    visibleCount = 1,\n    selectedIndex,\n    onSelectedIndexChange,\n}: PropTypes): JSX.Element {\n    const [dragIndexOffset, setDragIndexOffset] = useState<number>(0);\n    const isDragging = dragIndexOffset !== 0;\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    function onDrag(deltaX: number): void {\n        const size = containerRef.current ? containerRef.current.getBoundingClientRect() : null;\n\n        if (size && size.width) {\n            // Set the `dragIndexOffset` so that the carousel can visually move before we send\n            // the new index to the parent.\n            setDragIndexOffset((deltaX / size.width) * visibleCount);\n        }\n    }\n\n    function onDragEnd(): void {\n        onSelectedIndexChange(selectedIndex + dragIndexOffset);\n        setDragIndexOffset(0);\n    }\n\n    return (\n        <div ref={containerRef}>\n            <Swipeable\n                preventDefaultTouchmoveEvent\n                onSwiping={(_, deltaX): void => onDrag(deltaX)}\n                onSwiped={onDragEnd}\n            >\n                <BaseCarousel\n                    selectedIndex={selectedIndex + dragIndexOffset}\n                    visibleCount={visibleCount}\n                    spacing={spacing}\n                    animationDuration={isDragging ? 0 : undefined}\n                >\n                    {children}\n                </BaseCarousel>\n            </Swipeable>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}