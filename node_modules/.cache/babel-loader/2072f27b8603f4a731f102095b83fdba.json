{"ast":null,"code":"import { defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport 'prop-types';\nimport LoaderDots from '../LoaderDots/index.js';\nimport { InputRowContext } from '../InputRow/index.js';\nimport getAnchorProps from './get-anchor-props.js';\nimport getButtonProps from './get-button-props.js';\nimport styles from './themed.module.scss';\nvar loaderDotsTheme;\n\n(function (loaderDotsTheme) {\n  loaderDotsTheme[\"primary\"] = \"inverse\";\n  loaderDotsTheme[\"secondary\"] = \"brand\";\n  loaderDotsTheme[\"tertiary\"] = \"muted\";\n})(loaderDotsTheme || (loaderDotsTheme = {}));\n\nvar withIcon = function withIcon(children, _ref) {\n  var _classNames, _classNames2;\n\n  var icon = _ref.icon,\n      iconRight = _ref.iconRight;\n\n  if (!icon && !iconRight) {\n    return children;\n  }\n\n  return React.createElement(\"span\", {\n    className: styles.flexCenter\n  }, React.createElement(\"span\", {\n    className: classNames((_classNames = {}, _defineProperty(_classNames, styles.iconContainer, true), _defineProperty(_classNames, styles.iconContainerHasRightChildren, children), _classNames))\n  }, icon), children, React.createElement(\"span\", {\n    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.iconContainer, true), _defineProperty(_classNames2, styles.iconContainerHasLeftChildren, children), _classNames2))\n  }, iconRight));\n};\n\nvar withLoader = function withLoader(children, _ref2) {\n  var isLoading = _ref2.isLoading,\n      _ref2$theme = _ref2.theme,\n      theme = _ref2$theme === void 0 ? 'primary' : _ref2$theme;\n\n  if (!isLoading) {\n    return children;\n  }\n\n  return React.createElement(\"span\", {\n    className: styles.loaderContainer\n  }, React.createElement(\"span\", {\n    className: styles.absoluteCenter\n  }, React.createElement(LoaderDots, {\n    theme: loaderDotsTheme[theme],\n    size: \"small\"\n  })), React.createElement(\"span\", {\n    className: styles.hidden\n  }, children));\n};\n\nvar withFlexWrapper = function withFlexWrapper(children, _ref3) {\n  var _classNames3;\n\n  var size = _ref3.size;\n  return React.createElement(\"span\", {\n    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, styles.flexWrapper, true), _defineProperty(_classNames3, styles.flexWrapperSizeSmall, size === 'small'), _defineProperty(_classNames3, styles.flexWrapperSizeLarge, size === 'large'), _classNames3))\n  }, children);\n};\n\nvar Themed = React.forwardRef(function (_ref4, ref) {\n  var children = _ref4.children,\n      _ref4$isDisabled = _ref4.isDisabled,\n      isDisabled = _ref4$isDisabled === void 0 ? false : _ref4$isDisabled,\n      _ref4$isLoading = _ref4.isLoading,\n      isLoading = _ref4$isLoading === void 0 ? false : _ref4$isLoading,\n      icon = _ref4.icon,\n      iconRight = _ref4.iconRight,\n      _ref4$type = _ref4.type,\n      type = _ref4$type === void 0 ? 'button' : _ref4$type,\n      to = _ref4.to,\n      _ref4$shouldOpenInNew = _ref4.shouldOpenInNewTab,\n      shouldOpenInNewTab = _ref4$shouldOpenInNew === void 0 ? false : _ref4$shouldOpenInNew,\n      target = _ref4.target,\n      onClick = _ref4.onClick,\n      onMouseEnter = _ref4.onMouseEnter,\n      onMouseOver = _ref4.onMouseOver,\n      onFocus = _ref4.onFocus,\n      onMouseLeave = _ref4.onMouseLeave,\n      onBlur = _ref4.onBlur,\n      accessibilityLabel = _ref4.accessibilityLabel,\n      _ref4$size = _ref4.size,\n      size = _ref4$size === void 0 ? 'large' : _ref4$size,\n      _ref4$theme = _ref4.theme,\n      theme = _ref4$theme === void 0 ? 'primary' : _ref4$theme,\n      _ref4$width = _ref4.width,\n      width = _ref4$width === void 0 ? 'auto' : _ref4$width,\n      dataTestId = _ref4.dataTestId,\n      dataTest = _ref4.dataTest;\n  warning(children || accessibilityLabel || (icon || iconRight) && children, 'The prop `accessibilityLabel` must be provided to the button or link when `icon` or `iconRight` is provided but `children` is not. This helps users on screen readers navigate our content.');\n  return React.createElement(InputRowContext.Consumer, null, function (_ref5) {\n    var _classNames4;\n\n    var isWithinInputRow = _ref5.isWithinInputRow,\n        isFirstInputRowChild = _ref5.isFirstInputRowChild,\n        isLastInputRowChild = _ref5.isLastInputRowChild;\n    var isAnchor = !!to;\n    var anchorProps = getAnchorProps({\n      isDisabled: isDisabled,\n      shouldOpenInNewTab: shouldOpenInNewTab,\n      to: to,\n      onClick: onClick,\n      target: target\n    });\n    var buttonProps = getButtonProps({\n      onClick: onClick,\n      type: type,\n      onMouseEnter: onMouseEnter,\n      onMouseOver: onMouseOver,\n      onFocus: onFocus,\n      onMouseLeave: onMouseLeave,\n      onBlur: onBlur\n    });\n    var className = classNames((_classNames4 = {}, _defineProperty(_classNames4, styles.themedButton, true), _defineProperty(_classNames4, styles.themedButtonRoundedBordersLeft, isFirstInputRowChild || !isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonRoundedBordersRight, isLastInputRowChild || !isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonHasNoRightBorder, isWithinInputRow && !isLastInputRowChild), _defineProperty(_classNames4, styles.themedButtonThemePrimary, theme === 'primary'), _defineProperty(_classNames4, styles.themedButtonThemeTertiary, theme === 'tertiary'), _defineProperty(_classNames4, styles.themedButtonThemeSecondary, theme === 'secondary'), _defineProperty(_classNames4, styles.themedButtonThemeCaution, theme === 'caution'), _defineProperty(_classNames4, styles.themedButtonThemeSolid, theme === 'solid'), _defineProperty(_classNames4, styles.themedButtonThemePopoverPrimary, theme === 'popover-primary'), _defineProperty(_classNames4, styles.themedButtonThemePopoverSecondary, theme === 'popover-secondary'), _defineProperty(_classNames4, styles.themedButtonWidthAuto, width === 'auto' && !isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonWidthFull, width === 'full' || isWithinInputRow), _defineProperty(_classNames4, styles.themedButtonWidthFullBelowSmall, width === 'full-below-small' && !isWithinInputRow), _classNames4));\n    var commonProps = {\n      disabled: isLoading || isDisabled,\n      className: className,\n      'aria-label': accessibilityLabel,\n      'data-testid': dataTestId,\n      'data-test': dataTest\n    }; // There are more themes here than are valid for use with `LoaderDots`, so restrict the type\n    // by overwriting any invalid themes as `undefined`.\n\n    var restrictedTheme = theme === 'primary' || theme === 'secondary' || theme === 'tertiary' ? theme : undefined;\n    var newChildren = withFlexWrapper(withLoader(withIcon(children, {\n      icon: icon,\n      iconRight: iconRight\n    }), {\n      isLoading: isLoading,\n      theme: restrictedTheme\n    }), {\n      size: size\n    });\n\n    if (isAnchor) {\n      return React.createElement(\"a\", _extends({}, commonProps, anchorProps, {\n        ref: ref\n      }), newChildren);\n    }\n\n    return (// Disable this rule, even though `buttonProps.type` can never be undefined,\n      // because the rule itself is broken and shows a false positive.\n      // https://github.com/yannickcr/eslint-plugin-react/issues/1555\n      // eslint-disable-next-line react/button-has-type\n      React.createElement(\"button\", _extends({}, commonProps, buttonProps, {\n        ref: ref\n      }), newChildren)\n    );\n  });\n});\nexport default Themed;","map":{"version":3,"sources":["../../../../components/UIAction/themed.tsx"],"names":["loaderDotsTheme","withIcon","icon","iconRight","styles","flexCenter","classNames","withLoader","isLoading","theme","loaderContainer","absoluteCenter","hidden","withFlexWrapper","size","Themed","children","isDisabled","type","to","shouldOpenInNewTab","target","onClick","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","accessibilityLabel","width","dataTestId","dataTest","warning","isWithinInputRow","isFirstInputRowChild","isLastInputRowChild","isAnchor","anchorProps","getAnchorProps","buttonProps","getButtonProps","className","commonProps","disabled","restrictedTheme","newChildren","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport LoaderDots from '../LoaderDots/index';\nimport { InputRowContext } from '../InputRow/index';\nimport getAnchorProps from './get-anchor-props';\nimport getButtonProps from './get-button-props';\nimport styles from './themed.module.scss';\n\nenum loaderDotsTheme {\n    primary = 'inverse',\n    secondary = 'brand',\n    tertiary = 'muted',\n}\n\nconst withIcon = (\n    children: React.ReactNode,\n    { icon, iconRight }: { icon?: React.ReactNode; iconRight?: React.ReactNode },\n): React.ReactNode => {\n    if (!icon && !iconRight) {\n        return children;\n    }\n\n    return (\n        <span className={styles.flexCenter}>\n            <span\n                className={classNames({\n                    [styles.iconContainer]: true,\n                    [styles.iconContainerHasRightChildren]: children,\n                })}\n            >\n                {icon}\n            </span>\n            {children}\n            <span\n                className={classNames({\n                    [styles.iconContainer]: true,\n                    [styles.iconContainerHasLeftChildren]: children,\n                })}\n            >\n                {iconRight}\n            </span>\n        </span>\n    );\n};\n\nconst withLoader = (\n    children: React.ReactNode,\n    {\n        isLoading,\n        theme = 'primary',\n    }: { isLoading?: boolean; theme?: 'primary' | 'secondary' | 'tertiary' },\n): React.ReactNode => {\n    if (!isLoading) {\n        return children;\n    }\n\n    return (\n        <span className={styles.loaderContainer}>\n            <span className={styles.absoluteCenter}>\n                <LoaderDots theme={loaderDotsTheme[theme]} size=\"small\" />\n            </span>\n            <span className={styles.hidden}>{children}</span>\n        </span>\n    );\n};\n\nconst withFlexWrapper = (\n    children: React.ReactNode,\n    { size }: { size?: 'small' | 'large' },\n): React.ReactNode => (\n    <span\n        className={classNames({\n            [styles.flexWrapper]: true,\n            [styles.flexWrapperSizeSmall]: size === 'small',\n            [styles.flexWrapperSizeLarge]: size === 'large',\n        })}\n    >\n        {children}\n    </span>\n);\n\nconst Themed = React.forwardRef<HTMLButtonElement | HTMLAnchorElement, PropTypes>(\n    (\n        {\n            children,\n            isDisabled = false,\n            isLoading = false,\n            icon,\n            iconRight,\n            type = 'button',\n            to,\n            shouldOpenInNewTab = false,\n            target,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            accessibilityLabel,\n            size = 'large',\n            theme = 'primary',\n            width = 'auto',\n            dataTestId,\n            dataTest,\n        }: PropTypes,\n        ref,\n    ): JSX.Element => {\n        warning(\n            children || accessibilityLabel || ((icon || iconRight) && children),\n            'The prop `accessibilityLabel` must be provided to the button or link when `icon` or `iconRight` is provided but `children` is not. This helps users on screen readers navigate our content.',\n        );\n\n        return (\n            <InputRowContext.Consumer>\n                {({ isWithinInputRow, isFirstInputRowChild, isLastInputRowChild }): JSX.Element => {\n                    const isAnchor = !!to;\n                    const anchorProps = getAnchorProps({\n                        isDisabled,\n                        shouldOpenInNewTab,\n                        to,\n                        onClick,\n                        target,\n                    });\n                    const buttonProps = getButtonProps({\n                        onClick,\n                        type,\n                        onMouseEnter,\n                        onMouseOver,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur,\n                    });\n\n                    const className = classNames({\n                        [styles.themedButton]: true,\n                        [styles.themedButtonRoundedBordersLeft]:\n                            isFirstInputRowChild || !isWithinInputRow,\n                        [styles.themedButtonRoundedBordersRight]:\n                            isLastInputRowChild || !isWithinInputRow,\n                        [styles.themedButtonHasNoRightBorder]:\n                            isWithinInputRow && !isLastInputRowChild,\n                        [styles.themedButtonThemePrimary]: theme === 'primary',\n                        [styles.themedButtonThemeTertiary]: theme === 'tertiary',\n                        [styles.themedButtonThemeSecondary]: theme === 'secondary',\n                        [styles.themedButtonThemeCaution]: theme === 'caution',\n                        [styles.themedButtonThemeSolid]: theme === 'solid',\n                        [styles.themedButtonThemePopoverPrimary]: theme === 'popover-primary',\n                        [styles.themedButtonThemePopoverSecondary]: theme === 'popover-secondary',\n                        [styles.themedButtonWidthAuto]: width === 'auto' && !isWithinInputRow,\n                        [styles.themedButtonWidthFull]: width === 'full' || isWithinInputRow,\n                        [styles.themedButtonWidthFullBelowSmall]:\n                            width === 'full-below-small' && !isWithinInputRow,\n                    });\n\n                    const commonProps = {\n                        disabled: isLoading || isDisabled,\n                        className,\n                        'aria-label': accessibilityLabel,\n                        'data-testid': dataTestId,\n                        'data-test': dataTest,\n                    };\n\n                    // There are more themes here than are valid for use with `LoaderDots`, so restrict the type\n                    // by overwriting any invalid themes as `undefined`.\n                    const restrictedTheme =\n                        theme === 'primary' || theme === 'secondary' || theme === 'tertiary'\n                            ? theme\n                            : undefined;\n\n                    const newChildren = withFlexWrapper(\n                        withLoader(withIcon(children, { icon, iconRight }), {\n                            isLoading,\n                            theme: restrictedTheme,\n                        }),\n                        { size },\n                    );\n\n                    if (isAnchor) {\n                        return (\n                            <a\n                                {...commonProps}\n                                {...anchorProps}\n                                ref={ref as React.Ref<HTMLAnchorElement>}\n                            >\n                                {newChildren}\n                            </a>\n                        );\n                    }\n\n                    return (\n                        // Disable this rule, even though `buttonProps.type` can never be undefined,\n                        // because the rule itself is broken and shows a false positive.\n                        // https://github.com/yannickcr/eslint-plugin-react/issues/1555\n                        // eslint-disable-next-line react/button-has-type\n                        <button\n                            {...commonProps}\n                            {...buttonProps}\n                            ref={ref as React.Ref<HTMLButtonElement>}\n                        >\n                            {newChildren}\n                        </button>\n                    );\n                }}\n            </InputRowContext.Consumer>\n        );\n    },\n);\n\ninterface PropTypes {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Boolean determining whether the button is disabled. When `true` it will appear visually\n     * \"greyed out\" and not respond to interaction.\n     */\n    isDisabled?: boolean;\n    /**\n     * Boolean determining whether the button is in a loading state. When `true` the text will\n     * we replaced with a loading animation and interaction will be disabled.\n     */\n    isLoading?: boolean;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left within the button.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right within the button.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Button's on type `submit` will submit a form when used within a `form`\n     * element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * @deprecated\n     * Opens the URL in a new tab when clicked.\n     * This is deprecated. Use `target=\"_blank\"` instead.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: (event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Controls the button's background, text, and border color.\n     */\n    theme?:\n        | 'primary'\n        | 'secondary'\n        | 'tertiary'\n        | 'caution'\n        | 'solid'\n        | 'popover-primary'\n        | 'popover-secondary';\n    /**\n     * Changes the button's `line-height`, `padding`, `border-radius`, and `font-size`.\n     */\n    size?: 'small' | 'large';\n    /**\n     * `Button` components are as wide as the content that is passed in. The `full` option will\n     * expand the width to `100%` on all screens. `full-below-small` will expand the width to 100%\n     * on devices smaller than [our `small` breakpoint](/tokens/#section-breakpoint).\n     */\n    width?: 'auto' | 'full' | 'full-below-small';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport default Themed;\n"]},"metadata":{},"sourceType":"module"}