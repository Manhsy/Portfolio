{"ast":null,"code":"import { slicedToArray as _slicedToArray, defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { tpSpace3 } from '@thumbtack/thumbprint-tokens';\nimport canUseDOM from '../../utils/can-use-dom.js';\nimport Themed from '../UIAction/themed.js';\nimport '../UIAction/plain.js';\nimport { TextButton } from '../Button/index.js';\nimport useCloseOnEscape from '../../utils/use-close-on-escape.js';\nimport useFocusTrap from '../../utils/use-focus-trap.js';\nimport ConditionalPortal from '../../utils/ConditionalPortal.js';\nimport { Manager, Reference, Popper } from 'react-popper';\nimport startsWith from 'lodash/startsWith';\nimport styles from './index.module.scss';\n\nfunction Popover(_ref) {\n  var children = _ref.children,\n      launcher = _ref.launcher,\n      onCloseClick = _ref.onCloseClick,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'top' : _ref$position,\n      _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n      _ref$container = _ref.container,\n      container = _ref$container === void 0 ? 'body' : _ref$container,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? 'Popover' : _ref$accessibilityLab; // Appends the tooltip right before `</body>` when true. Used to prevent z-index and positioning\n  // issues.\n\n  var shouldDisplace = container === 'body'; // Using `useState` instead of `useRef `to allow multiple refs. See Image for another example.\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      wrapperEl = _useState2[0],\n      setWrapperEl = _useState2[1];\n\n  var shouldTrapFocus = canUseDOM && !!wrapperEl;\n  var shouldBindEscListener = canUseDOM && isOpen;\n  useCloseOnEscape(onCloseClick, shouldBindEscListener);\n  useFocusTrap(wrapperEl, shouldTrapFocus, wrapperEl);\n  return React.createElement(Manager, null, React.createElement(Reference, null, function (_ref2) {\n    var ref = _ref2.ref;\n    return launcher({\n      ref: ref\n    });\n  }), React.createElement(ConditionalPortal, {\n    shouldDisplace: shouldDisplace\n  }, React.createElement(Popper, {\n    placement: position,\n    modifiers: {\n      offset: {\n        offset: \"0, \".concat(tpSpace3)\n      },\n      preventOverflow: {\n        boundariesElement: 'window'\n      }\n    },\n    positionFixed: false\n  }, function (_ref3) {\n    var _classNames, _classNames2;\n\n    var popperRef = _ref3.ref,\n        style = _ref3.style,\n        placement = _ref3.placement,\n        arrowProps = _ref3.arrowProps;\n    return (// Use tabIndex={-1} to allow programmatic focus (as initialFocus node\n      // for focus-trap) but not be tabbable by user.\n      React.createElement(\"div\", {\n        role: \"dialog\",\n        \"aria-label\": accessibilityLabel,\n        tabIndex: -1,\n        ref: function ref(el) {\n          setWrapperEl(el);\n          popperRef(el);\n        },\n        className: classNames((_classNames = {}, _defineProperty(_classNames, styles.root, true), _defineProperty(_classNames, styles.open, isOpen), _classNames)),\n        style: style,\n        \"data-placement\": placement\n      }, children, React.createElement(\"div\", {\n        className: styles.closeButton\n      }, React.createElement(TextButton, {\n        accessibilityLabel: \"Close popover\",\n        iconLeft: React.createElement(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          width: \"14\",\n          height: \"14\",\n          stroke: \"currentColor\",\n          strokeWidth: \"3\",\n          fill: \"none\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          className: styles.closeButtonIcon\n        }, React.createElement(\"line\", {\n          x1: \"18\",\n          y1: \"6\",\n          x2: \"6\",\n          y2: \"18\"\n        }), React.createElement(\"line\", {\n          x1: \"6\",\n          y1: \"6\",\n          x2: \"18\",\n          y2: \"18\"\n        })),\n        theme: \"inherit\",\n        onClick: onCloseClick\n      })), React.createElement(\"div\", {\n        className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.nubbin, true), _defineProperty(_classNames2, styles.nubbinTop, startsWith(placement, 'bottom')), _defineProperty(_classNames2, styles.nubbinBottom, startsWith(placement, 'top')), _defineProperty(_classNames2, styles.nubbinLeft, startsWith(placement, 'right')), _defineProperty(_classNames2, styles.nubbinRight, startsWith(placement, 'left')), _classNames2)),\n        ref: arrowProps.ref,\n        style: arrowProps.style\n      }))\n    );\n  })));\n}\n\nvar PopoverTitle = function PopoverTitle(_ref4) {\n  var children = _ref4.children;\n  return React.createElement(\"div\", {\n    className: styles.popoverTitle\n  }, children);\n};\n\nvar PopoverBody = function PopoverBody(_ref5) {\n  var children = _ref5.children;\n  return React.createElement(\"div\", {\n    className: styles.popoverBody\n  }, children);\n};\n\nvar PopoverPrimaryButton = function PopoverPrimaryButton(_ref6) {\n  var children = _ref6.children,\n      onClick = _ref6.onClick;\n  return React.createElement(Themed, {\n    size: \"small\",\n    onClick: onClick,\n    theme: \"popover-primary\"\n  }, children);\n};\n\nvar PopoverSecondaryButton = function PopoverSecondaryButton(_ref7) {\n  var children = _ref7.children,\n      onClick = _ref7.onClick,\n      to = _ref7.to;\n  return React.createElement(Themed, {\n    size: \"small\",\n    onClick: onClick,\n    to: to,\n    theme: \"popover-secondary\",\n    shouldOpenInNewTab: true\n  }, children);\n};\n\nexport default Popover;\nexport { PopoverBody, PopoverPrimaryButton, PopoverSecondaryButton, PopoverTitle };","map":{"version":3,"sources":["../../../../components/Popover/index.tsx"],"names":["children","launcher","onCloseClick","position","isOpen","container","accessibilityLabel","shouldDisplace","wrapperEl","setWrapperEl","useState","shouldTrapFocus","canUseDOM","shouldBindEscListener","useCloseOnEscape","useFocusTrap","ref","offset","preventOverflow","boundariesElement","popperRef","style","placement","arrowProps","classNames","styles","closeButton","closeButtonIcon","startsWith","PopoverTitle","popoverTitle","PopoverBody","popoverBody","PopoverPrimaryButton","onClick","PopoverSecondaryButton","to"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Manager, Reference, Popper, RefHandler } from 'react-popper';\nimport startsWith from 'lodash/startsWith';\n\nimport * as tokens from '@thumbtack/thumbprint-tokens';\n\nimport ConditionalPortal from '../../utils/ConditionalPortal';\nimport canUseDOM from '../../utils/can-use-dom';\nimport useCloseOnEscape from '../../utils/use-close-on-escape';\nimport useFocusTrap from '../../utils/use-focus-trap';\n\nimport { TextButton } from '../Button/index';\nimport { Themed } from '../UIAction/index';\n\nimport styles from './index.module.scss';\n\ninterface PopoverPropTypes {\n    /**\n     * Contents for the Popover. Usually a `PopoverTitle`, `PopoverBody`, and `PopoverPrimaryButton`\n     */\n    children: React.ReactNode;\n    /**\n     * A function that renders JSX and receives an object with `ref`.\n     * All of these props must be added to the component within the render prop.\n     */\n    launcher: ({ ref }: { ref: RefHandler }) => React.ReactNode;\n    /**\n     * Position of popover relative to the launcher.\n     */\n    position?:\n        | 'top-start'\n        | 'top'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left'\n        | 'left-end'\n        | 'right-start'\n        | 'right'\n        | 'right-end';\n    /**\n     * Whether or not the popover is visible.\n     */\n    isOpen?: boolean;\n    /**\n     * Function called when the close button is clicked. You should cause this to set `isOpen=false`\n     * in your parent component.\n     */\n    onCloseClick: () => void;\n    /**\n     * By default popovers will render right before the `</body>` tag.\n     * Setting the `container` to `inline` causes the tooltip to remain where it was added to the\n     * DOM.\n     * This option is helpful to work around z-index and positioning issues.\n     */\n    container?: 'inline' | 'body';\n    /**\n     * Accessibility title used to describe the content of the popover to screen readers.\n     */\n    accessibilityLabel?: string;\n}\n\nexport default function Popover({\n    children,\n    launcher,\n    onCloseClick,\n    position = 'top',\n    isOpen = false,\n    container = 'body',\n    accessibilityLabel = 'Popover',\n}: PopoverPropTypes): JSX.Element {\n    // Appends the tooltip right before `</body>` when true. Used to prevent z-index and positioning\n    // issues.\n    const shouldDisplace = container === 'body';\n\n    // Using `useState` instead of `useRef `to allow multiple refs. See Image for another example.\n    const [wrapperEl, setWrapperEl] = useState<HTMLDivElement | null>(null);\n\n    const shouldTrapFocus: boolean = canUseDOM && !!wrapperEl;\n    const shouldBindEscListener: boolean = canUseDOM && isOpen;\n\n    useCloseOnEscape(onCloseClick, shouldBindEscListener);\n    useFocusTrap(wrapperEl, shouldTrapFocus, wrapperEl);\n\n    return (\n        <Manager>\n            <Reference>{({ ref }): React.ReactNode => launcher({ ref })}</Reference>\n            <ConditionalPortal shouldDisplace={shouldDisplace}>\n                <Popper\n                    placement={position}\n                    modifiers={{\n                        offset: { offset: `0, ${tokens.tpSpace3}` },\n                        preventOverflow: { boundariesElement: 'window' },\n                    }}\n                    positionFixed={false}\n                >\n                    {({ ref: popperRef, style, placement, arrowProps }): JSX.Element => (\n                        // Use tabIndex={-1} to allow programmatic focus (as initialFocus node\n                        // for focus-trap) but not be tabbable by user.\n                        <div\n                            role=\"dialog\"\n                            aria-label={accessibilityLabel}\n                            tabIndex={-1}\n                            ref={(el: HTMLDivElement | null): void => {\n                                setWrapperEl(el);\n                                popperRef(el);\n                            }}\n                            className={classNames({\n                                [styles.root]: true,\n                                [styles.open]: isOpen,\n                            })}\n                            style={style}\n                            data-placement={placement}\n                        >\n                            {children}\n\n                            <div className={styles.closeButton}>\n                                <TextButton\n                                    accessibilityLabel=\"Close popover\"\n                                    iconLeft={\n                                        <svg\n                                            viewBox=\"0 0 24 24\"\n                                            width=\"14\"\n                                            height=\"14\"\n                                            stroke=\"currentColor\"\n                                            strokeWidth=\"3\"\n                                            fill=\"none\"\n                                            strokeLinecap=\"round\"\n                                            strokeLinejoin=\"round\"\n                                            className={styles.closeButtonIcon}\n                                        >\n                                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                                        </svg>\n                                    }\n                                    theme=\"inherit\"\n                                    onClick={onCloseClick}\n                                />\n                            </div>\n\n                            <div\n                                className={classNames({\n                                    [styles.nubbin]: true,\n                                    [styles.nubbinTop]: startsWith(placement, 'bottom'),\n                                    [styles.nubbinBottom]: startsWith(placement, 'top'),\n                                    [styles.nubbinLeft]: startsWith(placement, 'right'),\n                                    [styles.nubbinRight]: startsWith(placement, 'left'),\n                                })}\n                                ref={arrowProps.ref}\n                                style={arrowProps.style}\n                            />\n                        </div>\n                    )}\n                </Popper>\n            </ConditionalPortal>\n        </Manager>\n    );\n}\n\ninterface PopoverTitlePropTypes {\n    /**\n     * The contents of the title.\n     */\n    children: React.ReactNode;\n}\n\nconst PopoverTitle = ({ children }: PopoverTitlePropTypes): JSX.Element => (\n    <div className={styles.popoverTitle}>{children}</div>\n);\n\ninterface PopoverBodyPropTypes {\n    /**\n     * The contents of the body.\n     */\n    children: React.ReactNode;\n}\n\nconst PopoverBody = ({ children }: PopoverBodyPropTypes): JSX.Element => (\n    <div className={styles.popoverBody}>{children}</div>\n);\n\ninterface PopoverPrimaryButtonPropTypes {\n    /**\n     * The text of the button.\n     */\n    children: string;\n    /**\n     * The function to call when the button is clicked.\n     */\n    onClick: () => void;\n}\n\nconst PopoverPrimaryButton = ({\n    children,\n    onClick,\n}: PopoverPrimaryButtonPropTypes): JSX.Element => (\n    <Themed size=\"small\" onClick={onClick} theme=\"popover-primary\">\n        {children}\n    </Themed>\n);\n\ninterface PopoverSecondaryButtonPropTypes {\n    /**\n     * The text of the button.\n     */\n    children: string;\n    /**\n     * The function to call when the button is clicked.\n     */\n    onClick?: () => void;\n    /**\n     * Link to visit when the button is clicked. It will be opened in a new tab.\n     */\n    to?: string;\n}\n\nconst PopoverSecondaryButton = ({\n    children,\n    onClick,\n    to,\n}: PopoverSecondaryButtonPropTypes): JSX.Element => (\n    <Themed size=\"small\" onClick={onClick} to={to} theme=\"popover-secondary\" shouldOpenInNewTab>\n        {children}\n    </Themed>\n);\n\nexport { PopoverTitle, PopoverBody, PopoverPrimaryButton, PopoverSecondaryButton };\n"]},"metadata":{},"sourceType":"module"}