{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport Image from '../Image/index.js';\nimport styles from './index.module.scss';\nvar ServiceCardImage = forwardRef(function (props, outerRef) {\n  var url = props.url,\n      src = props.src,\n      sources = props.sources,\n      alt = props.alt;\n  return React.createElement(Image, {\n    className: styles.image,\n    sources: sources,\n    containerAspectRatio: 8 / 5,\n    src: url || src // `url` deprecated\n    ,\n    alt: alt,\n    ref: outerRef\n  });\n}); // Needed because of the `forwardRef`.\n\nServiceCardImage.displayName = 'ServiceCardImage';\n\nfunction ServiceCardTitle(_ref) {\n  var children = _ref.children;\n  return React.createElement(\"div\", {\n    className: styles.title,\n    title: children\n  }, children);\n}\n\nfunction ServiceCardDescription(_ref2) {\n  var _classNames;\n\n  var _ref2$iconColor = _ref2.iconColor,\n      iconColor = _ref2$iconColor === void 0 ? 'blue' : _ref2$iconColor,\n      icon = _ref2.icon,\n      children = _ref2.children;\n  return React.createElement(\"div\", {\n    className: classNames(styles.descriptionWrap, (_classNames = {}, _defineProperty(_classNames, styles.iconBlue, iconColor === 'blue'), _defineProperty(_classNames, styles.iconGreen, iconColor === 'green'), _classNames))\n  }, icon, React.createElement(\"div\", {\n    className: styles.description\n  }, children));\n}\n\nfunction ServiceCard(_ref3) {\n  var url = _ref3.url,\n      children = _ref3.children,\n      onClick = _ref3.onClick,\n      _ref3$shouldOpenInNew = _ref3.shouldOpenInNewTab,\n      shouldOpenInNewTab = _ref3$shouldOpenInNew === void 0 ? false : _ref3$shouldOpenInNew;\n  return React.createElement(\"a\", {\n    href: url,\n    onClick: onClick,\n    target: shouldOpenInNewTab ? '_blank' : '_self',\n    className: styles.root\n  }, children);\n}\n\nexport default ServiceCard;\nexport { ServiceCardDescription, ServiceCardImage, ServiceCardTitle };","map":{"version":3,"sources":["../../../../components/ServiceCard/index.tsx"],"names":["ServiceCardImage","forwardRef","url","src","sources","alt","props","styles","outerRef","children","iconColor","icon","classNames","description","onClick","shouldOpenInNewTab","root"],"mappings":";;;;;IA+BMA,gBAAgB,GAAGC,UAAU,CAC/B,UAAA,KAAA,EAAA,QAAA,EAAgD;MACpCC,GADoC,GACTI,KADS,CAAA,G;MAC/BH,GAD+B,GACTG,KADS,CAAA,G;MAC1BF,OAD0B,GACTE,KADS,CAAA,O;MACjBD,GADiB,GACTC,KADS,CAAA,G;SAGxC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEC,MAAM,CADrB,KAAA;AAEI,IAAA,OAAO,EAFX,OAAA;AAGI,IAAA,oBAAoB,EAAE,IAH1B,CAAA;AAII,IAAA,GAAG,EAAEL,GAAG,IAJZ,GAAA,CAAA;AAAA;AAKI,IAAA,GAAG,EALP,GAAA;AAMI,IAAA,GAAG,EAAEM;AANT,GAAA,C;AAJZ,CAAmC,C,EAAnC;;AAiBAR,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA;;AAMA,SAAA,gBAAA,CAAA,IAAA,EAAgF;MAApDS,QAAoD,GAAA,IAAA,CAApDA,Q;SAEpB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAEF,MAAM,CAAtB,KAAA;AAA8B,IAAA,KAAK,EAAEE;AAArC,GAAA,EADJ,QACI,C;;;AAsBR,SAAA,sBAAA,CAAA,KAAA,EAIiD;;;8BAH7CC,S;MAAAA,SAG6C,GAAA,eAAA,KAAA,KAAA,CAAA,GAHjC,MAGiC,GAAA,e;MAF7CC,IAE6C,GAAA,KAAA,CAF7CA,I;MACAF,QAC6C,GAAA,KAAA,CAD7CA,Q;SAGI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEG,UAAU,CAACL,MAAM,CAAP,eAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBA,MAAM,CADU,QAAA,EACEG,SAAS,KADX,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBH,MAAM,CAFU,SAAA,EAEGG,SAAS,KAFZ,OAAA,CAAA,EAAA,WAAA;AADzB,GAAA,EAAA,IAAA,EAOI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACM;AAAvB,GAAA,EARR,QAQQ,CAPJ,C;;;AA+BO,SAAA,WAAA,CAAA,KAAA,EAKuB;MAJlCX,GAIkC,GAAA,KAAA,CAJlCA,G;MACAO,QAGkC,GAAA,KAAA,CAHlCA,Q;MACAK,OAEkC,GAAA,KAAA,CAFlCA,O;oCACAC,kB;MAAAA,kBACkC,GAAA,qBAAA,KAAA,KAAA,CAAA,GADb,KACa,GAAA,qB;SAE9B,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACI,IAAA,IAAI,EADR,GAAA;AAEI,IAAA,OAAO,EAFX,OAAA;AAGI,IAAA,MAAM,EAAEA,kBAAkB,GAAA,QAAA,GAH9B,OAAA;AAII,IAAA,SAAS,EAAER,MAAM,CAACS;AAJtB,GAAA,EADJ,QACI,C","sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport Image from '../Image/index';\nimport styles from './index.module.scss';\n\ntype ImageSource = {\n    type: 'image/webp' | 'image/jpeg' | 'image/png' | 'image/gif';\n    srcSet: string;\n};\n\ninterface ServiceCardImagePropTypes {\n    /**\n     * URL pointing to image to be displayed. This image must have an aspect ratio of 8:5.\n     * @deprecated Use `src` instead of `url`.\n     */\n    url?: string;\n    /**\n     * URL pointing to image to be displayed. This image must have an aspect ratio of 8:5.\n     */\n    src: string;\n    /**\n     * Allows the browser to choose the best file format and image size based on the device screen\n     * density and the width of the rendered image. Images must have an aspect ratio of 8:5.\n     */\n    sources?: ImageSource[];\n    /**\n     * Image alt tag that's passed to `aria-label` for better accessibility.\n     */\n    alt?: string;\n}\n\nconst ServiceCardImage = forwardRef<HTMLElement, ServiceCardImagePropTypes>(\n    (props: ServiceCardImagePropTypes, outerRef) => {\n        const { url, src, sources, alt } = props;\n        return (\n            <Image\n                className={styles.image}\n                sources={sources}\n                containerAspectRatio={8 / 5}\n                src={url || src} // `url` deprecated\n                alt={alt}\n                ref={outerRef}\n            />\n        );\n    },\n);\n\n// Needed because of the `forwardRef`.\nServiceCardImage.displayName = 'ServiceCardImage';\n\ninterface ServiceCardTitlePropTypes {\n    children: string;\n}\n\nfunction ServiceCardTitle({ children }: ServiceCardTitlePropTypes): JSX.Element {\n    return (\n        <div className={styles.title} title={children}>\n            {children}\n        </div>\n    );\n}\n\ninterface ServiceCardDescriptionPropTypes {\n    /**\n     * Service description or other service info.\n     */\n    children: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render within the\n     * service card. It must be one of the small icons.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Color options for icon. Only required if you want to override default color.\n     */\n    iconColor?: 'blue' | 'green';\n}\n\nfunction ServiceCardDescription({\n    iconColor = 'blue',\n    icon,\n    children,\n}: ServiceCardDescriptionPropTypes): JSX.Element {\n    return (\n        <div\n            className={classNames(styles.descriptionWrap, {\n                [styles.iconBlue]: iconColor === 'blue',\n                [styles.iconGreen]: iconColor === 'green',\n            })}\n        >\n            {icon}\n            <div className={styles.description}>{children}</div>\n        </div>\n    );\n}\n\ninterface ServiceCardPropTypes {\n    /**\n     * URL pointing to the card link destination.\n     */\n    url: string;\n    /**\n     * Accepts content of `ServiceCardImage`, `ServiceCardTitle`, `ServiceCardDescription`.\n     */\n    children: React.ReactNode;\n    /**\n     * Handler for click events\n     */\n    onClick?: () => void;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n}\n\nexport default function ServiceCard({\n    url,\n    children,\n    onClick,\n    shouldOpenInNewTab = false,\n}: ServiceCardPropTypes): JSX.Element {\n    return (\n        <a\n            href={url}\n            onClick={onClick}\n            target={shouldOpenInNewTab ? '_blank' : '_self'}\n            className={styles.root}\n        >\n            {children}\n        </a>\n    );\n}\n\nexport { ServiceCardDescription, ServiceCardTitle, ServiceCardImage };\n"]},"metadata":{},"sourceType":"module"}