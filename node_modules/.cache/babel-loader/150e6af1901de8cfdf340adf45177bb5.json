{"ast":null,"code":"import { slicedToArray as _slicedToArray, defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport NoScroll from './components/no-scroll.js';\nimport useCloseOnEscape from '../../utils/use-close-on-escape.js';\nimport useFocusTrap from '../../utils/use-focus-trap.js';\nimport ConditionalPortal from '../../utils/ConditionalPortal.js';\nimport styles from './index.module.scss';\n\nfunction ModalCurtain(_ref) {\n  var _classNames;\n\n  var _ref$stage = _ref.stage,\n      stage = _ref$stage === void 0 ? 'exited' : _ref$stage,\n      _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscape,\n      shouldCloseOnEscape = _ref$shouldCloseOnEsc === void 0 ? true : _ref$shouldCloseOnEsc,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? 'Modal' : _ref$accessibilityLab,\n      initialFocusProp = _ref.initialFocus,\n      onCloseClick = _ref.onCloseClick,\n      children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isClient = _useState2[0],\n      setIsClient = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      wrapperEl = _useState4[0],\n      setWrapperEl = _useState4[1];\n\n  useEffect(function () {\n    setIsClient(true);\n  }, []);\n  var initialFocus = initialFocusProp || wrapperEl;\n  var isEnteringOrEntered = stage === 'entering' || stage === 'entered';\n  var shouldBindEscListener = isClient && shouldCloseOnEscape && isEnteringOrEntered;\n  var shouldTrapFocus = isClient && !!initialFocus && stage === 'entered';\n  var shouldDisableScrolling = isEnteringOrEntered;\n  useCloseOnEscape(onCloseClick, shouldBindEscListener);\n  useFocusTrap(wrapperEl, shouldTrapFocus, initialFocus);\n  return React.createElement(ConditionalPortal, {\n    shouldDisplace: true\n  }, React.createElement(\"div\", {\n    role: \"dialog\",\n    \"aria-label\": accessibilityLabel,\n    tabIndex: -1,\n    ref: function ref(element) {\n      setWrapperEl(element);\n    }\n  }, shouldDisableScrolling && React.createElement(NoScroll, null), children && children({\n    curtainOnClick: function curtainOnClick(event) {\n      // Ensures that the click event happened on the element that has the\n      // `onClick`. This prevents clicks deep within `children` from bubbling\n      // up and closing the ModalCurtain.\n      if (event.target === event.currentTarget) {\n        onCloseClick();\n      }\n    },\n    curtainClassName: classNames((_classNames = {}, _defineProperty(_classNames, styles.root, true), _defineProperty(_classNames, styles.rootOpen, isEnteringOrEntered), _classNames))\n  })));\n}\n\nexport default ModalCurtain;","map":{"version":3,"sources":["../../../../components/ModalCurtain/index.tsx"],"names":["stage","shouldCloseOnEscape","accessibilityLabel","initialFocus","initialFocusProp","onCloseClick","children","isClient","setIsClient","useState","wrapperEl","setWrapperEl","useEffect","isEnteringOrEntered","shouldBindEscListener","shouldTrapFocus","shouldDisableScrolling","useCloseOnEscape","useFocusTrap","curtainOnClick","event","curtainClassName","classNames","styles"],"mappings":";;;;;;;;;AA8De,SAAA,YAAA,CAAA,IAAA,EAOY;;;wBANvBA,K;MAAAA,KAMuB,GAAA,UAAA,KAAA,KAAA,CAAA,GANf,QAMe,GAAA,U;mCALvBC,mB;MAAAA,mBAKuB,GAAA,qBAAA,KAAA,KAAA,CAAA,GALD,IAKC,GAAA,qB;mCAJvBC,kB;MAAAA,kBAIuB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAJF,OAIE,GAAA,qB;MAHTE,gBAGS,GAAA,IAAA,CAHvBD,Y;MACAE,YAEuB,GAAA,IAAA,CAFvBA,Y;MACAC,QACuB,GAAA,IAAA,CADvBA,Q;;kBAEgCG,QAAQ,CADjB,KACiB,C;;MAAjCF,QADgB,GAAA,UAAA,CAAA,CAAA,C;MACNC,WADM,GAAA,UAAA,CAAA,CAAA,C;;mBAEWC,QAAQ,CAFnB,IAEmB,C;;MAAnCC,SAFgB,GAAA,UAAA,CAAA,CAAA,C;MAELC,YAFK,GAAA,UAAA,CAAA,CAAA,C;;AAIvBC,EAAAA,SAAS,CAAC,YAAM;AACZJ,IAAAA,WAAW,CAAXA,IAAW,CAAXA;AADK,GAAA,EAATI,EAAS,CAATA;MAIMT,YAAY,GAAGC,gBAAgB,IAArC,S;MAEMS,mBAAmB,GAAGb,KAAK,KAALA,UAAAA,IAAwBA,KAAK,KAAzD,S;MACMc,qBAAqB,GAAGP,QAAQ,IAARA,mBAAAA,IAA9B,mB;MACMQ,eAAe,GAAGR,QAAQ,IAAI,CAAC,CAAbA,YAAAA,IAA8BP,KAAK,KAA3D,S;MACMgB,sBAAsB,GAA5B,mB;AAEAC,EAAAA,gBAAgB,CAAA,YAAA,EAAhBA,qBAAgB,CAAhBA;AACAC,EAAAA,YAAY,CAAA,SAAA,EAAA,eAAA,EAAZA,YAAY,CAAZA;SAGI,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AAAmB,IAAA,cAAc,EAAA;AAAjC,GAAA,EAGI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,IAAI,EADR,QAAA;kBAAA,kBAAA;AAGI,IAAA,QAAQ,EAAE,CAHd,CAAA;AAII,IAAA,GAAG,EAAE,SAAA,GAAA,CAAA,OAAA,EAAmB;AACpBP,MAAAA,YAAY,CAAZA,OAAY,CAAZA;;AALR,GAAA,EAQKK,sBAAsB,IAAI,KAAA,CAAA,aAAA,CAAA,QAAA,EAR/B,IAQ+B,CAR/B,EAaKV,QAAQ,IACLA,QAAQ,CAAC;AACLa,IAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAS;;;;UAIjBC,KAAK,CAALA,MAAAA,KAAiBA,KAAK,CAA1B,a,EAA0C;AACtCf,QAAAA,YAAY;;AANf,KAAA;AASLgB,IAAAA,gBAAgB,EAAEC,UAAU,EAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EACvBC,MAAM,CADiB,IAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEvBA,MAAM,CAFiB,QAAA,EAAA,mBAAA,CAAA,EAAA,WAAA;AATvB,GAAD,CAdhB,CAHJ,C","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\n\nimport NoScroll from './components/no-scroll';\n\nimport useCloseOnEscape from '../../utils/use-close-on-escape';\nimport useFocusTrap from '../../utils/use-focus-trap';\nimport ConditionalPortal from '../../utils/ConditionalPortal';\n\nimport styles from './index.module.scss';\n\ninterface PropTypes {\n    /**\n     * Content that appears on top of the curtain. `children` is a [render\n     * prop](https://reactjs.org/docs/render-props.html) and expects a function. The function\n     * provided receives an object two properties:\n     *\n     * * `curtainClassName`: Handles positioning, z-index, opacity, overflow, and visibility.\n     * Should be added to the `className` of the outermost element within the `children`.\n     * * `curtainOnClick`: You can optionally add this prop to the `onClick` of an element within\n     * `children`. This is typically used on to close a ModalCurtain when clicking on a dark\n     * backdrop.\n     *\n     * The examples on this page include code samples that demonstrate real use of these props.\n     */\n    children?: ({\n        curtainClassName,\n        curtainOnClick,\n    }: {\n        curtainClassName: string;\n        curtainOnClick: (event: React.MouseEvent<HTMLElement>) => void;\n    }) => JSX.Element;\n    /**\n     * The four states that a modal can be in.\n     *\n     * * `exited` – Modal is fully closed\n     * * `entering` – Modal is opening\n     * * `entered` – Modal has fully open\n     * * `exiting` – Modal is closing\n     *\n     * Modals that do not have transitions will only use the `entered` and `exited` stages.\n     */\n    stage?: 'entering' | 'entered' | 'exiting' | 'exited' | null;\n    /**\n     * Accessibility title used to describe the content of the modal to screen readers.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: () => void;\n    /**\n     * Determines if the modal should close when pressing the escape key.\n     */\n    shouldCloseOnEscape?: boolean;\n    /**\n     * The element that should be focused when the modal opens. If omitted, the entire container\n     * element of the modal is focused.\n     */\n    initialFocus?: HTMLElement | null;\n}\n\nexport default function ModalCurtain({\n    stage = 'exited',\n    shouldCloseOnEscape = true,\n    accessibilityLabel = 'Modal',\n    initialFocus: initialFocusProp,\n    onCloseClick,\n    children,\n}: PropTypes): JSX.Element {\n    const [isClient, setIsClient] = useState<boolean>(false);\n    const [wrapperEl, setWrapperEl] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    const initialFocus = initialFocusProp || wrapperEl;\n\n    const isEnteringOrEntered = stage === 'entering' || stage === 'entered';\n    const shouldBindEscListener = isClient && shouldCloseOnEscape && isEnteringOrEntered;\n    const shouldTrapFocus = isClient && !!initialFocus && stage === 'entered';\n    const shouldDisableScrolling = isEnteringOrEntered;\n\n    useCloseOnEscape(onCloseClick, shouldBindEscListener);\n    useFocusTrap(wrapperEl, shouldTrapFocus, initialFocus);\n\n    return (\n        <ConditionalPortal shouldDisplace>\n            {/* Use tabIndex=\"-1\" to allow programmatic focus (as initialFocus node for focus-trap)\n            but not be tabbable by user. */}\n            <div\n                role=\"dialog\"\n                aria-label={accessibilityLabel}\n                tabIndex={-1}\n                ref={(element): void => {\n                    setWrapperEl(element);\n                }}\n            >\n                {shouldDisableScrolling && <NoScroll />}\n\n                {/* This component uses the render prop pattern. `children` expects a function and\n                receives an object that contains `curtainOnClick` and `curtainClassName`.\n                While using those two properties is optional, they provide helpful functionality. */}\n                {children &&\n                    children({\n                        curtainOnClick: event => {\n                            // Ensures that the click event happened on the element that has the\n                            // `onClick`. This prevents clicks deep within `children` from bubbling\n                            // up and closing the ModalCurtain.\n                            if (event.target === event.currentTarget) {\n                                onCloseClick();\n                            }\n                        },\n                        curtainClassName: classNames({\n                            [styles.root]: true,\n                            [styles.rootOpen]: isEnteringOrEntered,\n                        }),\n                    })}\n            </div>\n        </ConditionalPortal>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}