{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport styles from './index.module.scss';\n\nvar _React$createContext = React.createContext({\n  gutter: 'normal',\n  isWithinGrid: false\n}),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer;\n\nfunction GridColumn(_ref) {\n  var children = _ref.children,\n      _ref$base = _ref.base,\n      base = _ref$base === void 0 ? 12 : _ref$base,\n      aboveSmall = _ref.aboveSmall,\n      aboveMedium = _ref.aboveMedium,\n      aboveLarge = _ref.aboveLarge,\n      dataTestId = _ref.dataTestId,\n      dataTest = _ref.dataTest;\n  return React.createElement(Consumer, null, function (_ref2) {\n    var _classNames;\n\n    var gutter = _ref2.gutter,\n        isWithinGrid = _ref2.isWithinGrid;\n    warning(isWithinGrid, '`GridColumn` must be an immediate child of a `Grid`');\n    return React.createElement(\"div\", {\n      className: classNames((_classNames = {}, _defineProperty(_classNames, styles.col, true), _defineProperty(_classNames, styles.colWide, gutter === 'wide'), _defineProperty(_classNames, styles.colFlush, gutter === 'flush'), _defineProperty(_classNames, styles[\"col\".concat(base)], true), _defineProperty(_classNames, styles[\"aboveSmallCol\".concat(aboveSmall)], aboveSmall), _defineProperty(_classNames, styles[\"aboveMediumCol\".concat(aboveMedium)], aboveMedium), _defineProperty(_classNames, styles[\"aboveLargeCol\".concat(aboveLarge)], aboveLarge), _classNames)),\n      \"data-testid\": dataTestId,\n      \"data-test\": dataTest\n    }, children);\n  });\n}\n\nfunction Grid(_ref3) {\n  var _classNames2;\n\n  var children = _ref3.children,\n      _ref3$gutter = _ref3.gutter,\n      gutter = _ref3$gutter === void 0 ? 'normal' : _ref3$gutter,\n      dataTestId = _ref3.dataTestId,\n      dataTest = _ref3.dataTest;\n  return React.createElement(\"div\", {\n    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.grid, true), _defineProperty(_classNames2, styles.gridWide, gutter === 'wide'), _defineProperty(_classNames2, styles.gridFlush, gutter === 'flush'), _classNames2)),\n    \"data-testid\": dataTestId,\n    \"data-test\": dataTest\n  }, React.createElement(Provider, {\n    value: {\n      gutter: gutter,\n      isWithinGrid: true\n    }\n  }, children));\n}\n\nexport { Grid, GridColumn };","map":{"version":3,"sources":["../../../../components/Grid/index.tsx"],"names":["Provider","Consumer","gutter","isWithinGrid","children","base","aboveSmall","aboveMedium","aboveLarge","dataTestId","dataTest","warning","classNames","styles"],"mappings":";;;;;;2BAM+B,KAAK,CAAL,aAAA,CAAoB;AAC/CE,EAAAA,MAAM,EADyC,QAAA;AAE/CC,EAAAA,YAAY,EAAE;AAFiC,CAApB,C;IAAvBH,QAAAA,GAAAA,oBAAAA,CAAAA,Q;IAAUC,QAAAA,GAAAA,oBAAAA,CAAAA,Q;;AAyCX,SAAA,UAAA,CAAA,IAAA,EAQ0B;MAP7BG,QAO6B,GAAA,IAAA,CAP7BA,Q;uBACAC,I;MAAAA,IAM6B,GAAA,SAAA,KAAA,KAAA,CAAA,GANtB,EAMsB,GAAA,S;MAL7BC,UAK6B,GAAA,IAAA,CAL7BA,U;MACAC,WAI6B,GAAA,IAAA,CAJ7BA,W;MACAC,UAG6B,GAAA,IAAA,CAH7BA,U;MACAC,UAE6B,GAAA,IAAA,CAF7BA,U;MACAC,QAC6B,GAAA,IAAA,CAD7BA,Q;SAGI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EACK,UAAA,KAAA,EAA2C;;;QAAxCR,MAAwC,GAAA,KAAA,CAAxCA,M;QAAQC,YAAgC,GAAA,KAAA,CAAhCA,Y;AACRQ,IAAAA,OAAO,CAAA,YAAA,EAAPA,qDAAO,CAAPA;WAGI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,MAAA,SAAS,EAAEC,UAAU,EAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBC,MAAM,CADU,GAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBA,MAAM,CAFU,OAAA,EAECX,MAAM,KAFP,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAGhBW,MAAM,CAHU,QAAA,EAGEX,MAAM,KAHR,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAIhBW,MAAM,CAAA,MAAA,MAAA,CAJU,IAIV,CAAA,CAJU,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAKhBA,MAAM,CAAA,gBAAA,MAAA,CALU,UAKV,CAAA,CALU,EAAA,UAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAMhBA,MAAM,CAAA,iBAAA,MAAA,CANU,WAMV,CAAA,CANU,EAAA,WAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAOhBA,MAAM,CAAA,gBAAA,MAAA,CAPU,UAOV,CAAA,CAPU,EAAA,UAAA,CAAA,EADzB,WACyB,EADzB;qBAAA,UAAA;mBAWeH;AAXf,KAAA,EADJ,QACI,C;AANhB,GACI,C;;;AA8CD,SAAA,IAAA,CAAA,KAAA,EAKwB;;;MAJ3BN,QAI2B,GAAA,KAAA,CAJ3BA,Q;2BACAF,M;MAAAA,MAG2B,GAAA,YAAA,KAAA,KAAA,CAAA,GAHlB,QAGkB,GAAA,Y;MAF3BO,UAE2B,GAAA,KAAA,CAF3BA,U;MACAC,QAC2B,GAAA,KAAA,CAD3BA,Q;SAGI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEE,UAAU,EAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAChBC,MAAM,CADU,IAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAEhBA,MAAM,CAFU,QAAA,EAEEX,MAAM,KAFR,MAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAGhBW,MAAM,CAHU,SAAA,EAGGX,MAAM,KAHT,OAAA,CAAA,EADzB,YACyB,EADzB;mBAAA,UAAA;iBAOeQ;AAPf,GAAA,EASI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAU,IAAA,KAAK,EAAE;AAAER,MAAAA,MAAM,EAAR,MAAA;AAAUC,MAAAA,YAAY,EAAE;AAAxB;AAAjB,GAAA,EAVR,QAUQ,CATJ,C","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport warning from 'warning';\n\nimport styles from './index.module.scss';\n\nconst { Provider, Consumer } = React.createContext({\n    gutter: 'normal',\n    isWithinGrid: false,\n});\n\ninterface ColumnPropTypes {\n    /**\n     * Column contents.\n     */\n    children?: React.ReactNode;\n    /**\n     * Default width of the column as a fraction of the grid out of 12, to be shown at all\n     * breakpoints except those covered by the three optional props below.\n     */\n    base?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * Width of the column as a fraction of the grid out of 12, to be shown in viewports wider\n     * than `small`.\n     */\n    aboveSmall?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * Width of the column as a fraction of the grid out of 12, to be shown in viewports wider\n     * than `medium`.\n     */\n    aboveMedium?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * Width of the column as a fraction of the grid out of 12, to be shown in viewports wider\n     * than `large`.\n     */\n    aboveLarge?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function GridColumn({\n    children,\n    base = 12,\n    aboveSmall,\n    aboveMedium,\n    aboveLarge,\n    dataTestId,\n    dataTest,\n}: ColumnPropTypes): JSX.Element {\n    return (\n        <Consumer>\n            {({ gutter, isWithinGrid }): JSX.Element => {\n                warning(isWithinGrid, '`GridColumn` must be an immediate child of a `Grid`');\n\n                return (\n                    <div\n                        className={classNames({\n                            [styles.col]: true,\n                            [styles.colWide]: gutter === 'wide',\n                            [styles.colFlush]: gutter === 'flush',\n                            [styles[`col${base}`]]: true,\n                            [styles[`aboveSmallCol${aboveSmall}`]]: aboveSmall,\n                            [styles[`aboveMediumCol${aboveMedium}`]]: aboveMedium,\n                            [styles[`aboveLargeCol${aboveLarge}`]]: aboveLarge,\n                        })}\n                        data-testid={dataTestId}\n                        data-test={dataTest}\n                    >\n                        {children}\n                    </div>\n                );\n            }}\n        </Consumer>\n    );\n}\n\ninterface GridPropTypes {\n    /**\n     * Grid contents.\n     */\n    children?: React.ReactNode;\n    /**\n     * Controls the amount of space between columns in the grid.\n     */\n    gutter?: 'normal' | 'wide' | 'flush';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function Grid({\n    children,\n    gutter = 'normal',\n    dataTestId,\n    dataTest,\n}: GridPropTypes): JSX.Element {\n    return (\n        <div\n            className={classNames({\n                [styles.grid]: true,\n                [styles.gridWide]: gutter === 'wide',\n                [styles.gridFlush]: gutter === 'flush',\n            })}\n            data-testid={dataTestId}\n            data-test={dataTest}\n        >\n            <Provider value={{ gutter, isWithinGrid: true }}>{children}</Provider>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}