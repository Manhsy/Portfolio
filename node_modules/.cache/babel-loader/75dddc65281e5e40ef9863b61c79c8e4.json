{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { tpColorGray300, tpColorBlue, tpColorGray, tpColorRed, tpColorGray200, tpColorWhite } from '@thumbtack/thumbprint-tokens';\nimport warning from 'warning';\nimport styles from './index.module.scss';\nvar borderColor = {\n  disabled: tpColorGray300,\n  checked: tpColorBlue,\n  unchecked: tpColorGray,\n  error: tpColorRed\n};\nvar labelCursor = {\n  disabled: 'default',\n  checked: 'pointer',\n  unchecked: 'pointer',\n  error: 'pointer'\n};\nvar backgroundColor = {\n  disabled: tpColorGray200,\n  checked: tpColorWhite,\n  unchecked: tpColorWhite,\n  error: tpColorWhite\n};\n/**\n * Color of the inner circle when the radio is checked.\n */\n\nvar circleColor = {\n  disabled: tpColorGray,\n  checked: tpColorBlue,\n  unchecked: undefined,\n  error: tpColorRed\n};\nvar textColor = {\n  disabled: tpColorGray,\n  checked: 'inherit',\n  unchecked: 'inherit',\n  error: tpColorRed\n};\n\nvar getUIState = function getUIState(_ref) {\n  var isChecked = _ref.isChecked,\n      isDisabled = _ref.isDisabled,\n      hasError = _ref.hasError;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (hasError) {\n    return 'error';\n  }\n\n  if (isChecked) {\n    return 'checked';\n  }\n\n  return 'unchecked';\n};\n\nfunction Radio(_ref2) {\n  var _classNames;\n\n  var _ref2$children = _ref2.children,\n      children = _ref2$children === void 0 ? null : _ref2$children,\n      dataTest = _ref2.dataTest,\n      id = _ref2.id,\n      _ref2$isChecked = _ref2.isChecked,\n      isChecked = _ref2$isChecked === void 0 ? false : _ref2$isChecked,\n      _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      _ref2$isRequired = _ref2.isRequired,\n      isRequired = _ref2$isRequired === void 0 ? false : _ref2$isRequired,\n      _ref2$hasError = _ref2.hasError,\n      hasError = _ref2$hasError === void 0 ? false : _ref2$hasError,\n      _ref2$labelPadding = _ref2.labelPadding,\n      labelPadding = _ref2$labelPadding === void 0 ? '14px 0' : _ref2$labelPadding,\n      name = _ref2.name,\n      _onChange = _ref2.onChange,\n      _ref2$radioVerticalAl = _ref2.radioVerticalAlign,\n      radioVerticalAlign = _ref2$radioVerticalAl === void 0 ? 'center' : _ref2$radioVerticalAl;\n  var uiState = getUIState({\n    isChecked: isChecked,\n    isDisabled: isDisabled,\n    hasError: hasError\n  });\n  warning(children || id, 'If `children` is not provided to `Radio`, the `id` prop must be used to link the `Radio` to a `label` element.');\n  return (// eslint-disable-next-line jsx-a11y/label-has-associated-control, jsx-a11y/label-has-for\n    React.createElement(\"label\", {\n      className: classNames(styles.root, (_classNames = {}, _defineProperty(_classNames, styles.rootRadioVerticalAlignTop, radioVerticalAlign === 'top'), _defineProperty(_classNames, styles.rootRadioVerticalAlignCenter, radioVerticalAlign === 'center'), _classNames)),\n      style: {\n        padding: labelPadding,\n        cursor: labelCursor[uiState]\n      }\n    }, React.createElement(\"input\", {\n      className: styles.input,\n      type: \"radio\",\n      id: id,\n      onChange: function onChange(event) {\n        return _onChange(event.target.checked, id);\n      },\n      checked: isChecked,\n      name: name,\n      disabled: isDisabled,\n      \"data-test\": dataTest,\n      required: isRequired\n    }), React.createElement(\"svg\", {\n      className: styles.radioImage,\n      width: \"20\",\n      height: \"20\",\n      viewBox: \"0 0 20 20\",\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }, React.createElement(\"g\", {\n      fill: backgroundColor[uiState],\n      fillRule: \"evenodd\"\n    }, React.createElement(\"circle\", {\n      stroke: borderColor[uiState],\n      strokeWidth: \"2\",\n      cx: \"10\",\n      cy: \"10\",\n      r: \"9\"\n    }), isChecked && React.createElement(\"circle\", {\n      fill: circleColor[uiState],\n      cx: \"10\",\n      cy: \"10\",\n      r: \"6\"\n    }))), children && React.createElement(\"span\", {\n      className: styles.text,\n      style: {\n        color: textColor[uiState]\n      }\n    }, children))\n  );\n}\n\nexport default Radio;","map":{"version":3,"sources":["../../../../components/Radio/index.tsx"],"names":["borderColor","disabled","checked","unchecked","error","tokens","labelCursor","backgroundColor","circleColor","textColor","getUIState","isChecked","isDisabled","hasError","children","dataTest","id","isRequired","labelPadding","name","onChange","radioVerticalAlign","uiState","warning","classNames","styles","padding","cursor","event","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport warning from 'warning';\nimport styles from './index.module.scss';\n\nconst borderColor = {\n    disabled: tokens.tpColorGray300,\n    checked: tokens.tpColorBlue,\n    unchecked: tokens.tpColorGray,\n    error: tokens.tpColorRed,\n};\n\nconst labelCursor = {\n    disabled: 'default',\n    checked: 'pointer',\n    unchecked: 'pointer',\n    error: 'pointer',\n};\n\nconst backgroundColor = {\n    disabled: tokens.tpColorGray200,\n    checked: tokens.tpColorWhite,\n    unchecked: tokens.tpColorWhite,\n    error: tokens.tpColorWhite,\n};\n\n/**\n * Color of the inner circle when the radio is checked.\n */\nconst circleColor = {\n    disabled: tokens.tpColorGray,\n    checked: tokens.tpColorBlue,\n    unchecked: undefined,\n    error: tokens.tpColorRed,\n};\n\nconst textColor = {\n    disabled: tokens.tpColorGray,\n    checked: 'inherit',\n    unchecked: 'inherit',\n    error: tokens.tpColorRed,\n};\n\ntype UiState = 'disabled' | 'error' | 'checked' | 'unchecked';\n\nconst getUIState = ({\n    isChecked,\n    isDisabled,\n    hasError,\n}: Pick<PropTypes, 'isDisabled' | 'hasError' | 'isChecked'>): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    if (isChecked) {\n        return 'checked';\n    }\n\n    return 'unchecked';\n};\n\ninterface PropTypes {\n    /**\n     * Disable the input and the label.\n     */\n    isDisabled?: boolean;\n    /**\n     * Text or elements that appear within the label. If `children` is not provided, the developer\n     * must use the `Radio`'s `id` prop to associate it with a custom `<label>` element.\n     */\n    children?: React.ReactNode;\n    /**\n     * The `id` is added to the radio button as an HTML attribute and passed to the `onChange`\n     * function.\n     */\n    id?: string;\n    /**\n     * Boolean that determines if the radio is checked.\n     */\n    isChecked?: boolean;\n    /**\n     * Adds the `required` HTML attribute.\n     */\n    isRequired?: boolean;\n    /**\n     * Makes the radio and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Radio buttons that have the same name attribute are in the same radio button group. Only one\n     * radio in a group can be selected at a time. All of the radio buttons in the group must share\n     * a value that is unique to the page. This is required for keyboard navigation.\n     */\n    name: string;\n    /**\n     * Determine that padding that gets applied to the label. This can be used\n     * to increase the label’s click target. The value supplied should be a\n     * string with a unit such as `8px` or `8px 16px`.\n     */\n    labelPadding?: string;\n    /**\n     * Function that runs when a new radio button is selected. It receives the new boolean value\n     * and the provided `id` as such: `props.onChange(e.target.checked, props.id)`.\n     */\n    onChange: (isChecked: boolean, id?: string) => void;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     */\n    dataTest?: string;\n    /**\n     * Determines how the radio button input will be vertically aligned relative to `props.children`.\n     */\n    radioVerticalAlign?: 'top' | 'center';\n}\n\nexport default function Radio({\n    children = null,\n    dataTest,\n    id,\n    isChecked = false,\n    isDisabled = false,\n    isRequired = false,\n    hasError = false,\n    labelPadding = '14px 0',\n    name,\n    onChange,\n    radioVerticalAlign = 'center',\n}: PropTypes): JSX.Element {\n    const uiState = getUIState({ isChecked, isDisabled, hasError });\n\n    warning(\n        children || id,\n        'If `children` is not provided to `Radio`, the `id` prop must be used to link the `Radio` to a `label` element.',\n    );\n\n    return (\n        // eslint-disable-next-line jsx-a11y/label-has-associated-control, jsx-a11y/label-has-for\n        <label\n            className={classNames(styles.root, {\n                [styles.rootRadioVerticalAlignTop]: radioVerticalAlign === 'top',\n                [styles.rootRadioVerticalAlignCenter]: radioVerticalAlign === 'center',\n            })}\n            style={{ padding: labelPadding, cursor: labelCursor[uiState] }}\n        >\n            <input\n                className={styles.input}\n                type=\"radio\"\n                id={id}\n                onChange={(event): void => onChange(event.target.checked, id)}\n                checked={isChecked}\n                name={name}\n                disabled={isDisabled}\n                data-test={dataTest}\n                required={isRequired}\n            />\n\n            <svg\n                className={styles.radioImage}\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <g fill={backgroundColor[uiState]} fillRule=\"evenodd\">\n                    <circle stroke={borderColor[uiState]} strokeWidth=\"2\" cx=\"10\" cy=\"10\" r=\"9\" />\n\n                    {isChecked && <circle fill={circleColor[uiState]} cx=\"10\" cy=\"10\" r=\"6\" />}\n                </g>\n            </svg>\n\n            {children && (\n                <span className={styles.text} style={{ color: textColor[uiState] }}>\n                    {children}\n                </span>\n            )}\n        </label>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}