{"ast":null,"code":"import { slicedToArray as _slicedToArray, defineProperty as _defineProperty, inherits as _inherits, createClass as _createClass, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { tpSpace3 } from '@thumbtack/thumbprint-tokens';\nimport canUseDOM from '../../utils/can-use-dom.js';\nimport useCloseOnEscape from '../../utils/use-close-on-escape.js';\nimport ConditionalPortal from '../../utils/ConditionalPortal.js';\nimport { Manager, Reference, Popper } from 'react-popper';\nimport assign from 'lodash/assign';\nimport styles from './index.module.scss'; // tooltips from flickering in and out when the user moves their cursor rapidly over the launcher.\n// Higher values are more likely to prevent flickering, but increased the perceived lag when the\n// user _is_ trying to open the tooltip.\n\nvar OPEN_TIMEOUT = 100;\n\nvar WhenChildrenChange = /*#__PURE__*/function (_React$Component) {\n  _inherits(WhenChildrenChange, _React$Component);\n\n  function WhenChildrenChange() {\n    _classCallCheck(this, WhenChildrenChange);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WhenChildrenChange).apply(this, arguments));\n  }\n\n  _createClass(WhenChildrenChange, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          children = _this$props.children,\n          doProp = _this$props.do;\n\n      if (children !== prevProps.children) {\n        doProp();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return children;\n    }\n  }]);\n\n  return WhenChildrenChange;\n}(React.Component);\n\nvar doesWindowSupportTouch = function doesWindowSupportTouch() {\n  return typeof window !== 'undefined' && 'ontouchstart' in window;\n};\n\nfunction Tooltip(_ref) {\n  var _ref$container = _ref.container,\n      container = _ref$container === void 0 ? 'body' : _ref$container,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'top' : _ref$position,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'dark' : _ref$theme,\n      zIndex = _ref.zIndex,\n      text = _ref.text,\n      children = _ref.children,\n      _ref$closeDelayLength = _ref.closeDelayLength,\n      closeDelayLength = _ref$closeDelayLength === void 0 ? 200 : _ref$closeDelayLength;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      openTimeout = _useState4[0],\n      setOpenTimeout = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      closeTimeout = _useState6[0],\n      setCloseTimeout = _useState6[1];\n\n  var show = function show() {\n    if (closeTimeout) {\n      window.clearTimeout(closeTimeout);\n    }\n\n    setIsOpen(true);\n  };\n\n  var hide = function hide() {\n    setIsOpen(false);\n  };\n\n  var onFocus = function onFocus() {\n    if (!doesWindowSupportTouch()) {\n      show();\n    }\n  };\n\n  var onMouseEnter = function onMouseEnter() {\n    if (!doesWindowSupportTouch()) {\n      // Trigger the tooltip to show after a small delay to prevent flickering.\n      setOpenTimeout(window.setTimeout(show, OPEN_TIMEOUT));\n    }\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    // By default this adds a small delay before closing to improve the user experience.\n    setCloseTimeout(window.setTimeout(hide, closeDelayLength));\n\n    if (openTimeout) {\n      // When the mouse leaves we should clear any in-progress open timeouts, to prevent the\n      // tooltip from showing after the user is no longer hovering over the launcher.\n      clearTimeout(openTimeout);\n    }\n  };\n\n  var onClick = function onClick() {\n    if (doesWindowSupportTouch()) {\n      if (isOpen) {\n        hide();\n      } else {\n        show();\n      }\n    }\n  };\n\n  useCloseOnEscape(hide, canUseDOM); // Appends the tooltip right before `</body>` when true.\n\n  var shouldDisplace = container === 'body';\n  return React.createElement(Manager, null, React.createElement(Reference, null, function (_ref2) {\n    var ref = _ref2.ref;\n    return children({\n      ref: ref,\n      onMouseEnter: onMouseEnter,\n      onFocus: onFocus,\n      onMouseLeave: onMouseLeave,\n      onBlur: hide,\n      onClick: onClick,\n      ariaLabel: text\n    });\n  }), React.createElement(ConditionalPortal, {\n    shouldDisplace: shouldDisplace\n  }, canUseDOM && isOpen && React.createElement(Popper, {\n    placement: position,\n    modifiers: {\n      offset: {\n        offset: \"0, \".concat(tpSpace3)\n      },\n      preventOverflow: {\n        boundariesElement: 'window'\n      }\n    },\n    positionFixed: false\n  }, function (_ref3) {\n    var _classNames, _classNames2;\n\n    var ref = _ref3.ref,\n        style = _ref3.style,\n        placement = _ref3.placement,\n        arrowProps = _ref3.arrowProps,\n        scheduleUpdate = _ref3.scheduleUpdate;\n    return (// This function is documented within `react-popper`:\n      // https://github.com/FezVrasta/react-popper\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n      React.createElement(\"div\", {\n        role: \"tooltip\",\n        \"data-test-id\": \"tooltip\",\n        className: classNames((_classNames = {}, _defineProperty(_classNames, styles.tooltip, true), _defineProperty(_classNames, styles.tooltipDark, theme === 'dark'), _defineProperty(_classNames, styles.tooltipLight, theme === 'light'), _classNames)),\n        ref: ref,\n        style: assign({}, style, {\n          zIndex: zIndex\n        }),\n        \"data-placement\": placement,\n        onMouseEnter: show,\n        onMouseLeave: onMouseLeave,\n        onClick: function onClick(event) {\n          // This is to ensure the default event propagation is stopped when the tooltip\n          // is created by portals.\n          // https://reactjs.org/docs/portals.html#event-bubbling-through-portals\n          // https://github.com/facebook/react/issues/11387\n          if (shouldDisplace) {\n            event.stopPropagation();\n          } // This is to ensure the tooltip would be closed if it's clicked in touch screen\n          // devices so it could easier to be toggled off.\n\n\n          if (doesWindowSupportTouch()) {\n            hide();\n          }\n        }\n      }, React.createElement(WhenChildrenChange, {\n        do: scheduleUpdate\n      }, text), React.createElement(\"div\", {\n        className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.nubbin, true), _defineProperty(_classNames2, styles.nubbinTop, placement === 'top'), _defineProperty(_classNames2, styles.nubbinBottom, placement === 'bottom'), _defineProperty(_classNames2, styles.nubbinDark, theme === 'dark'), _defineProperty(_classNames2, styles.nubbinLight, theme === 'light'), _classNames2)),\n        ref: arrowProps.ref,\n        style: arrowProps.style\n      }))\n    );\n  })));\n}\n\nexport default Tooltip;","map":{"version":3,"sources":["../../../../components/Tooltip/index.tsx"],"names":["OPEN_TIMEOUT","WhenChildrenChange","React","Component","prevProps","children","doProp","doesWindowSupportTouch","container","position","theme","zIndex","text","closeDelayLength","isOpen","setIsOpen","useState","openTimeout","setOpenTimeout","closeTimeout","setCloseTimeout","show","window","hide","onFocus","onMouseEnter","onMouseLeave","clearTimeout","onClick","useCloseOnEscape","shouldDisplace","ref","onBlur","ariaLabel","canUseDOM","offset","preventOverflow","boundariesElement","style","placement","arrowProps","scheduleUpdate","classNames","styles","assign","event"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { tpSpace3 } from '@thumbtack/thumbprint-tokens';\nimport assign from 'lodash/assign';\nimport classNames from 'classnames';\nimport { Manager, Reference, Popper, RefHandler } from 'react-popper';\n\nimport ConditionalPortal from '../../utils/ConditionalPortal';\nimport useCloseOnEscape from '../../utils/use-close-on-escape';\nimport canUseDOM from '../../utils/can-use-dom';\n\nimport styles from './index.module.scss';\n\n// Timeout in milliseconds to wait before showing the tooltip after the user hovers. This prevents\n// tooltips from flickering in and out when the user moves their cursor rapidly over the launcher.\n// Higher values are more likely to prevent flickering, but increased the perceived lag when the\n// user _is_ trying to open the tooltip.\nconst OPEN_TIMEOUT = 100;\n\ninterface WhenChildrenChangePropTypes {\n    children: React.ReactNode;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    do: () => any;\n}\n\nclass WhenChildrenChange extends React.Component<WhenChildrenChangePropTypes> {\n    componentDidUpdate(prevProps: WhenChildrenChangePropTypes): null {\n        const { children, do: doProp } = this.props;\n\n        if (children !== prevProps.children) {\n            doProp();\n        }\n        return null;\n    }\n\n    render(): React.ReactNode {\n        const { children } = this.props;\n\n        return children;\n    }\n}\n\nconst doesWindowSupportTouch = (): boolean =>\n    typeof window !== 'undefined' && 'ontouchstart' in window;\n\ninterface ChildrenPropTypes {\n    ref: RefHandler;\n    onMouseEnter: () => void;\n    onFocus: () => void;\n    onMouseLeave: () => void;\n    onBlur: () => void;\n    onClick: () => void;\n    ariaLabel: string;\n}\n\ninterface TooltipPropTypes {\n    /**\n     * A function that renders JSX and receives an object with `ref`, `onMouseEnter`, `onFocus`,\n     * `onMouseLeave`, `onBlur`, `onClick`, and `ariaLabel`. All of these props must be added to\n     * the component within the render prop.\n     */\n    children: (args: ChildrenPropTypes) => JSX.Element;\n    /**\n     * Plain text that will appear within the tooltip. Links and formatted content are not allowed.\n     */\n    text: string;\n    /**\n     * Controls the look of the tooltip.\n     */\n    theme?: 'light' | 'dark';\n    /**\n     * Determines where the tooltip will attempt to position itself relative to the `children`. The\n     * tooltip will reposition itself to fit within the contianer.\n     */\n    position?: 'top' | 'bottom';\n    /**\n     * Number in milliseconds that determines how long to wait before closing the tooltip when the\n     * `onMouseLeave` event fires. A small delay prevents the tooltip from closing if the user\n     * moves their cursor from the button to the tooltip. This value should only be set to `0` when\n     * two or more tooltip components are used near each other.\n     */\n    closeDelayLength?: 0 | 200;\n    /**\n     * By default tooltips will render right before the `</body>` tag.\n     *\n     * Setting the `container` to `inline` causes the tooltip to remain where it was added to the\n     * DOM.\n     *\n     * This option is helpful to work around z-index and positioning issues.\n     */\n    container?: 'inline' | 'body';\n    /**\n     * Adds a `z-index` to the tooltip. Before using this prop, try to use `container=\"inline\"`.\n     */\n    zIndex?: number;\n}\n\nexport default function Tooltip({\n    container = 'body',\n    position = 'top',\n    theme = 'dark',\n    zIndex,\n    text,\n    children,\n    closeDelayLength = 200,\n}: TooltipPropTypes): JSX.Element {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [openTimeout, setOpenTimeout] = useState<number | undefined>(undefined);\n    const [closeTimeout, setCloseTimeout] = useState<number | undefined>(undefined);\n\n    const show = (): void => {\n        if (closeTimeout) {\n            window.clearTimeout(closeTimeout);\n        }\n\n        setIsOpen(true);\n    };\n\n    const hide = (): void => {\n        setIsOpen(false);\n    };\n\n    const onFocus = (): void => {\n        if (!doesWindowSupportTouch()) {\n            show();\n        }\n    };\n\n    const onMouseEnter = (): void => {\n        if (!doesWindowSupportTouch()) {\n            // Trigger the tooltip to show after a small delay to prevent flickering.\n            setOpenTimeout(window.setTimeout(show, OPEN_TIMEOUT));\n        }\n    };\n\n    const onMouseLeave = (): void => {\n        // By default this adds a small delay before closing to improve the user experience.\n        setCloseTimeout(window.setTimeout(hide, closeDelayLength));\n\n        if (openTimeout) {\n            // When the mouse leaves we should clear any in-progress open timeouts, to prevent the\n            // tooltip from showing after the user is no longer hovering over the launcher.\n            clearTimeout(openTimeout);\n        }\n    };\n\n    const onClick = (): void => {\n        if (doesWindowSupportTouch()) {\n            if (isOpen) {\n                hide();\n            } else {\n                show();\n            }\n        }\n    };\n\n    useCloseOnEscape(hide, canUseDOM);\n\n    // Appends the tooltip right before `</body>` when true.\n    const shouldDisplace = container === 'body';\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }): JSX.Element =>\n                    children({\n                        ref,\n                        onMouseEnter,\n                        onFocus,\n                        onMouseLeave,\n                        onBlur: hide,\n                        onClick,\n                        ariaLabel: text,\n                    })\n                }\n            </Reference>\n\n            <ConditionalPortal shouldDisplace={shouldDisplace}>\n                {canUseDOM && isOpen && (\n                    <Popper\n                        placement={position}\n                        modifiers={{\n                            offset: { offset: `0, ${tpSpace3}` },\n                            preventOverflow: { boundariesElement: 'window' },\n                        }}\n                        positionFixed={false}\n                    >\n                        {({ ref, style, placement, arrowProps, scheduleUpdate }): JSX.Element => (\n                            // This function is documented within `react-popper`:\n                            // https://github.com/FezVrasta/react-popper\n                            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n                            <div\n                                role=\"tooltip\"\n                                data-test-id=\"tooltip\"\n                                className={classNames({\n                                    [styles.tooltip]: true,\n                                    [styles.tooltipDark]: theme === 'dark',\n                                    [styles.tooltipLight]: theme === 'light',\n                                })}\n                                ref={ref}\n                                style={assign({}, style, { zIndex })}\n                                data-placement={placement}\n                                onMouseEnter={show}\n                                onMouseLeave={onMouseLeave}\n                                onClick={(event): void => {\n                                    // This is to ensure the default event propagation is stopped when the tooltip\n                                    // is created by portals.\n                                    // https://reactjs.org/docs/portals.html#event-bubbling-through-portals\n                                    // https://github.com/facebook/react/issues/11387\n                                    if (shouldDisplace) {\n                                        event.stopPropagation();\n                                    }\n                                    // This is to ensure the tooltip would be closed if it's clicked in touch screen\n                                    // devices so it could easier to be toggled off.\n                                    if (doesWindowSupportTouch()) {\n                                        hide();\n                                    }\n                                }}\n                            >\n                                {/* We need to let the popper instance know when the contents of the tooltip change,\n                                so it can reposition itself.\n                                https://github.com/thumbtack/thumbprint-archive/issues/1033 */}\n                                <WhenChildrenChange do={scheduleUpdate}>{text}</WhenChildrenChange>\n                                <div\n                                    className={classNames({\n                                        [styles.nubbin]: true,\n                                        [styles.nubbinTop]: placement === 'top',\n                                        [styles.nubbinBottom]: placement === 'bottom',\n                                        [styles.nubbinDark]: theme === 'dark',\n                                        [styles.nubbinLight]: theme === 'light',\n                                    })}\n                                    ref={arrowProps.ref}\n                                    style={arrowProps.style}\n                                />\n                            </div>\n                        )}\n                    </Popper>\n                )}\n            </ConditionalPortal>\n        </Manager>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}