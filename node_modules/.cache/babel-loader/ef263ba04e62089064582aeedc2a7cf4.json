{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport isNumber from 'lodash/isNumber';\nimport { tpColorBlack, tpColorGray200, tpColorIndigo600, tpColorIndigo100, tpColorGreen600, tpColorGreen100, tpColorYellow600, tpColorYellow100, tpColorRed600, tpColorRed100, tpColorPurple600, tpColorPurple100, tpColorBlue600, tpColorBlue100 } from '@thumbtack/thumbprint-tokens';\nimport Badge from './subcomponents/badge.js';\nimport styles from './index.module.scss';\nimport Image from '../Image/index.js';\nvar dimensions = {\n  xsmall: '32px',\n  small: '48px',\n  medium: '72px',\n  large: '100px',\n  xlarge: '140px'\n};\n\nvar CheckIcon = function CheckIcon() {\n  return React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 17 13\"\n  }, React.createElement(\"path\", {\n    d: \"M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68\",\n    fillRule: \"evenodd\"\n  }));\n};\n\nvar STYLES = [{\n  color: tpColorIndigo600,\n  backgroundColor: tpColorIndigo100\n}, {\n  color: tpColorGreen600,\n  backgroundColor: tpColorGreen100\n}, {\n  color: tpColorYellow600,\n  backgroundColor: tpColorYellow100\n}, {\n  color: tpColorRed600,\n  backgroundColor: tpColorRed100\n}, {\n  color: tpColorPurple600,\n  backgroundColor: tpColorPurple100\n}, {\n  color: tpColorBlue600,\n  backgroundColor: tpColorBlue100\n}];\n\nvar getStyle = function getStyle(initials) {\n  return initials ? STYLES[initials.charCodeAt(0) % STYLES.length] : {\n    color: tpColorBlack,\n    backgroundColor: tpColorGray200\n  };\n};\n\nvar EntityAvatar = forwardRef(function (props, outerRef) {\n  var _classNames;\n\n  var imageUrl = props.imageUrl,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'small' : _props$size,\n      initial = props.initial,\n      fullName = props.fullName,\n      _props$isOnline = props.isOnline,\n      isOnline = _props$isOnline === void 0 ? false : _props$isOnline;\n  return React.createElement(\"div\", {\n    className: classNames(styles.root, (_classNames = {}, _defineProperty(_classNames, styles.rootXsmall, size === 'xsmall'), _defineProperty(_classNames, styles.rootSmall, size === 'small'), _defineProperty(_classNames, styles.rootMedium, size === 'medium'), _defineProperty(_classNames, styles.rootLarge, size === 'large'), _defineProperty(_classNames, styles.rootXlarge, size === 'xlarge'), _classNames)),\n    style: isNumber(size) ? {\n      width: size,\n      height: size\n    } : {\n      width: dimensions[size],\n      height: dimensions[size]\n    }\n  }, imageUrl ? React.createElement(Image, {\n    className: styles.squareAvatar,\n    src: imageUrl,\n    alt: fullName && \"Avatar for \".concat(fullName),\n    height: typeof size === 'string' ? dimensions[size] : \"\".concat(size, \"px\"),\n    ref: outerRef\n  }) : React.createElement(\"span\", {\n    className: \"\".concat(styles.initialsAvatar, \" \").concat(styles.squareAvatar),\n    style: getStyle(initial),\n    title: fullName && \"Avatar for \".concat(fullName)\n  }, initial), isOnline && React.createElement(Badge, {\n    size: typeof size === 'string' ? size : 'medium',\n    type: \"entity\"\n  }));\n}); // Needed because of the `forwardRef`.\n\nEntityAvatar.displayName = 'EntityAvatar';\nvar UserAvatar = forwardRef(function (props, outerRef) {\n  var _classNames2;\n\n  var imageUrl = props.imageUrl,\n      _props$size2 = props.size,\n      size = _props$size2 === void 0 ? 'small' : _props$size2,\n      initials = props.initials,\n      fullName = props.fullName,\n      _props$isOnline2 = props.isOnline,\n      isOnline = _props$isOnline2 === void 0 ? false : _props$isOnline2,\n      isChecked = props.isChecked;\n  return React.createElement(\"div\", {\n    className: classNames(styles.root, (_classNames2 = {}, _defineProperty(_classNames2, styles.rootXsmall, size === 'xsmall'), _defineProperty(_classNames2, styles.rootSmall, size === 'small'), _defineProperty(_classNames2, styles.rootMedium, size === 'medium'), _defineProperty(_classNames2, styles.rootLarge, size === 'large'), _defineProperty(_classNames2, styles.rootXlarge, size === 'xlarge'), _classNames2)),\n    style: isNumber(size) ? {\n      width: size,\n      height: size\n    } : {\n      width: dimensions[size],\n      height: dimensions[size]\n    }\n  }, imageUrl ? React.createElement(Image, {\n    className: styles.circleAvatar,\n    src: imageUrl,\n    alt: fullName && \"Avatar for \".concat(fullName),\n    height: typeof size === 'string' ? dimensions[size] : \"\".concat(size, \"px\"),\n    ref: outerRef\n  }) : React.createElement(\"span\", {\n    className: \"\".concat(styles.initialsAvatar, \" \").concat(styles.circleAvatar),\n    style: getStyle(initials),\n    title: fullName && \"Avatar for \".concat(fullName)\n  }, initials), (isOnline || isChecked) && React.createElement(Badge, {\n    size: typeof size === 'string' ? size : 'medium',\n    type: \"user\"\n  }, isChecked && React.createElement(CheckIcon, null)));\n}); // Needed because of the `forwardRef`.\n\nUserAvatar.displayName = 'UserAvatar';\nexport { EntityAvatar, UserAvatar };","map":{"version":3,"sources":["../../../../components/Avatar/index.tsx"],"names":["dimensions","xsmall","small","medium","large","xlarge","CheckIcon","STYLES","color","backgroundColor","tokens","getStyle","initials","EntityAvatar","forwardRef","imageUrl","size","initial","fullName","isOnline","props","classNames","styles","width","height","outerRef","UserAvatar","isChecked"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport isNumber from 'lodash/isNumber';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport Badge from './subcomponents/badge';\nimport styles from './index.module.scss';\nimport Image from '../Image/index';\n\nconst dimensions = {\n    xsmall: '32px',\n    small: '48px',\n    medium: '72px',\n    large: '100px',\n    xlarge: '140px',\n};\n\nconst CheckIcon = (): JSX.Element => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 13\">\n        <path\n            d=\"M17 .943c0 .26-.1.5-.28.69L5.81 12.713c-.18.18-.43.28-.69.29-.26 0-.51-.11-.69-.29 0 0-3.79-3.78-4.16-4.16a.942.942 0 0 1-.27-.69c0-.26.11-.5.3-.68.39-.36 1-.34 1.37.04.26.27 2.33 2.34 3.44 3.44L15.33.293c.37-.38.98-.39 1.37-.03.18.18.29.42.3.68\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\ninterface StyleType {\n    color: string;\n    backgroundColor: string;\n}\n\nconst STYLES: StyleType[] = [\n    {\n        color: tokens.tpColorIndigo600,\n        backgroundColor: tokens.tpColorIndigo100,\n    },\n    {\n        color: tokens.tpColorGreen600,\n        backgroundColor: tokens.tpColorGreen100,\n    },\n    {\n        color: tokens.tpColorYellow600,\n        backgroundColor: tokens.tpColorYellow100,\n    },\n    {\n        color: tokens.tpColorRed600,\n        backgroundColor: tokens.tpColorRed100,\n    },\n    {\n        color: tokens.tpColorPurple600,\n        backgroundColor: tokens.tpColorPurple100,\n    },\n    {\n        color: tokens.tpColorBlue600,\n        backgroundColor: tokens.tpColorBlue100,\n    },\n];\n\nconst getStyle = (initials?: string): StyleType =>\n    initials\n        ? STYLES[initials.charCodeAt(0) % STYLES.length]\n        : { color: tokens.tpColorBlack, backgroundColor: tokens.tpColorGray200 };\n\nconst EntityAvatar = forwardRef<HTMLElement, EntityPropTypes>(\n    (props: EntityPropTypes, outerRef): JSX.Element => {\n        const { imageUrl, size = 'small', initial, fullName, isOnline = false } = props;\n\n        return (\n            <div\n                className={classNames(styles.root, {\n                    [styles.rootXsmall]: size === 'xsmall',\n                    [styles.rootSmall]: size === 'small',\n                    [styles.rootMedium]: size === 'medium',\n                    [styles.rootLarge]: size === 'large',\n                    [styles.rootXlarge]: size === 'xlarge',\n                })}\n                style={\n                    isNumber(size)\n                        ? { width: size, height: size }\n                        : { width: dimensions[size], height: dimensions[size] }\n                }\n            >\n                {imageUrl ? (\n                    <Image\n                        className={styles.squareAvatar}\n                        src={imageUrl}\n                        alt={fullName && `Avatar for ${fullName}`}\n                        height={typeof size === 'string' ? dimensions[size] : `${size}px`}\n                        ref={outerRef}\n                    />\n                ) : (\n                    <span\n                        className={`${styles.initialsAvatar} ${styles.squareAvatar}`}\n                        style={getStyle(initial)}\n                        title={fullName && `Avatar for ${fullName}`}\n                    >\n                        {initial}\n                    </span>\n                )}\n                {isOnline && (\n                    <Badge size={typeof size === 'string' ? size : 'medium'} type=\"entity\" />\n                )}\n            </div>\n        );\n    },\n);\n\ninterface EntityPropTypes {\n    /**\n     * HTTPS URL that points a user's avatar. The `imageURL` will take\n     * precendence over `initials` if both are supplied.\n     */\n    imageUrl?: string;\n    /**\n     * The entity's initial. This should be passed in as a one character string.\n     */\n    initial?: string;\n    /**\n     * The entity's full name. This is used as `title` and `alt` text.\n     */\n    fullName?: string;\n    /**\n     * The set of avatar sizes that we support.\n     */\n    size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | number;\n    /**\n     * Displays a badge if the user is online.\n     */\n    isOnline?: boolean;\n}\n\n// Needed because of the `forwardRef`.\nEntityAvatar.displayName = 'EntityAvatar';\n\nconst UserAvatar = forwardRef<HTMLElement, UserPropTypes>(\n    (props: UserPropTypes, outerRef): JSX.Element => {\n        const { imageUrl, size = 'small', initials, fullName, isOnline = false, isChecked } = props;\n\n        return (\n            <div\n                className={classNames(styles.root, {\n                    [styles.rootXsmall]: size === 'xsmall',\n                    [styles.rootSmall]: size === 'small',\n                    [styles.rootMedium]: size === 'medium',\n                    [styles.rootLarge]: size === 'large',\n                    [styles.rootXlarge]: size === 'xlarge',\n                })}\n                style={\n                    isNumber(size)\n                        ? { width: size, height: size }\n                        : { width: dimensions[size], height: dimensions[size] }\n                }\n            >\n                {imageUrl ? (\n                    <Image\n                        className={styles.circleAvatar}\n                        src={imageUrl}\n                        alt={fullName && `Avatar for ${fullName}`}\n                        height={typeof size === 'string' ? dimensions[size] : `${size}px`}\n                        ref={outerRef}\n                    />\n                ) : (\n                    <span\n                        className={`${styles.initialsAvatar} ${styles.circleAvatar}`}\n                        style={getStyle(initials)}\n                        title={fullName && `Avatar for ${fullName}`}\n                    >\n                        {initials}\n                    </span>\n                )}\n                {(isOnline || isChecked) && (\n                    <Badge size={typeof size === 'string' ? size : 'medium'} type=\"user\">\n                        {isChecked && <CheckIcon />}\n                    </Badge>\n                )}\n            </div>\n        );\n    },\n);\n\ninterface UserPropTypes {\n    /**\n     * HTTPS URL that points a user's avatar. The `imageURL` will take\n     * precendence over `initials` if both are supplied.\n     */\n    imageUrl?: string;\n    /**\n     * The user's initials. This should be passed in as a two character string\n     * for best results.\n     */\n    initials?: string;\n    /**\n     * The user's full name. This is used as `title` and `alt` text.\n     */\n    fullName?: string;\n    /**\n     * The set of avatar sizes that we support.\n     */\n    size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | number;\n    /**\n     * Displays a badge of a checkmark next to the `Avatar`.\n     * @deprecated Indicate this information outside of the avatar instead.\n     */\n    isChecked?: boolean;\n    /**\n     * Displays a badge if the user is online.\n     */\n    isOnline?: boolean;\n}\n\n// Needed because of the `forwardRef`.\nUserAvatar.displayName = 'UserAvatar';\n\nexport { UserAvatar, EntityAvatar };\n"]},"metadata":{},"sourceType":"module"}