{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\nfunction TextFab(_ref) {\n  var _classNames;\n\n  var children = _ref.children,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'primary' : _ref$theme,\n      onClick = _ref.onClick,\n      accessibilityLabel = _ref.accessibilityLabel;\n  return React.createElement(\"button\", {\n    className: classNames(styles.root, styles.textFab, (_classNames = {}, _defineProperty(_classNames, styles.primary, theme === 'primary'), _defineProperty(_classNames, styles.secondary, theme === 'secondary'), _classNames)),\n    type: \"button\",\n    onClick: onClick,\n    \"aria-label\": accessibilityLabel\n  }, children);\n}\n\nfunction IconFab(_ref2) {\n  var _classNames2;\n\n  var icon = _ref2.icon,\n      _ref2$theme = _ref2.theme,\n      theme = _ref2$theme === void 0 ? 'primary' : _ref2$theme,\n      onClick = _ref2.onClick,\n      accessibilityLabel = _ref2.accessibilityLabel;\n  return React.createElement(\"button\", {\n    className: classNames(styles.root, styles.iconFab, (_classNames2 = {}, _defineProperty(_classNames2, styles.primary, theme === 'primary'), _defineProperty(_classNames2, styles.secondary, theme === 'secondary'), _classNames2)),\n    type: \"button\",\n    onClick: onClick,\n    \"aria-label\": accessibilityLabel\n  }, icon);\n}\n\nexport { IconFab, TextFab };","map":{"version":3,"sources":["../../../../components/Fab/index.tsx"],"names":["children","theme","onClick","accessibilityLabel","classNames","styles","icon"],"mappings":";;;;;AAwBO,SAAA,OAAA,CAAA,IAAA,EAKuB;;;MAJ1BA,QAI0B,GAAA,IAAA,CAJ1BA,Q;wBACAC,K;MAAAA,KAG0B,GAAA,UAAA,KAAA,KAAA,CAAA,GAHlB,SAGkB,GAAA,U;MAF1BC,OAE0B,GAAA,IAAA,CAF1BA,O;MACAC,kBAC0B,GAAA,IAAA,CAD1BA,kB;SAGI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACI,IAAA,SAAS,EAAEC,UAAU,CAACC,MAAM,CAAP,IAAA,EAAcA,MAAM,CAApB,OAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBA,MAAM,CADU,OAAA,EACCJ,KAAK,KADN,SAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBI,MAAM,CAFU,SAAA,EAEGJ,KAAK,KAFR,WAAA,CAAA,EADzB,WACyB,EADzB;AAKI,IAAA,IAAI,EALR,QAAA;AAMI,IAAA,OAAO,EANX,OAAA;kBAOgBE;AAPhB,GAAA,EADJ,QACI,C;;;AAmCD,SAAA,OAAA,CAAA,KAAA,EAKuB;;;MAJ1BG,IAI0B,GAAA,KAAA,CAJ1BA,I;0BACAL,K;MAAAA,KAG0B,GAAA,WAAA,KAAA,KAAA,CAAA,GAHlB,SAGkB,GAAA,W;MAF1BC,OAE0B,GAAA,KAAA,CAF1BA,O;MACAC,kBAC0B,GAAA,KAAA,CAD1BA,kB;SAGI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACI,IAAA,SAAS,EAAEC,UAAU,CAACC,MAAM,CAAP,IAAA,EAAcA,MAAM,CAApB,OAAA,GAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAChBA,MAAM,CADU,OAAA,EACCJ,KAAK,KADN,SAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAEhBI,MAAM,CAFU,SAAA,EAEGJ,KAAK,KAFR,WAAA,CAAA,EADzB,YACyB,EADzB;AAKI,IAAA,IAAI,EALR,QAAA;AAMI,IAAA,OAAO,EANX,OAAA;kBAOgBE;AAPhB,GAAA,EADJ,IACI,C","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\ninterface TextFabProps {\n    /**\n     * Children content to render.\n     */\n    children: React.ReactNode;\n    /**\n     * Theme that decides the style of the button.\n     */\n    theme?: 'primary' | 'secondary';\n    /**\n     * Function that will run when the fab is clicked on.\n     */\n    onClick?: () => void;\n    /**\n     * Description of the fab content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n}\n\nexport function TextFab({\n    children,\n    theme = 'primary',\n    onClick,\n    accessibilityLabel,\n}: TextFabProps): JSX.Element {\n    return (\n        <button\n            className={classNames(styles.root, styles.textFab, {\n                [styles.primary]: theme === 'primary',\n                [styles.secondary]: theme === 'secondary',\n            })}\n            type=\"button\"\n            onClick={onClick}\n            aria-label={accessibilityLabel}\n        >\n            {children}\n        </button>\n    );\n}\n\ninterface IconFabProps {\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render within the button. It must be one of the\n     * `medium` icons.\n     */\n    icon: React.ReactNode;\n    /**\n     * Theme that decides the style of the button.\n     */\n    theme?: 'primary' | 'secondary';\n    /**\n     * Function that will run when the fab is clicked on.\n     */\n    onClick?: () => void;\n    /**\n     * Description of the fab content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n}\n\nexport function IconFab({\n    icon,\n    theme = 'primary',\n    onClick,\n    accessibilityLabel,\n}: IconFabProps): JSX.Element {\n    return (\n        <button\n            className={classNames(styles.root, styles.iconFab, {\n                [styles.primary]: theme === 'primary',\n                [styles.secondary]: theme === 'secondary',\n            })}\n            type=\"button\"\n            onClick={onClick}\n            aria-label={accessibilityLabel}\n        >\n            {icon}\n        </button>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}