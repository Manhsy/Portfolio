{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\nimport clamp from 'lodash/clamp';\nimport times from 'lodash/times';\nimport styles from './index.module.scss';\nvar MAX_NUM_STARS = 5; // Smallest increment we render\n\nvar PRECISION = 0.5;\n\nfunction StarRating(_ref) {\n  var _classNames;\n\n  var rating = _ref.rating,\n      _ref$hoverRating = _ref.hoverRating,\n      hoverRating = _ref$hoverRating === void 0 ? 0 : _ref$hoverRating,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'small' : _ref$size,\n      _ref$onStarClick = _ref.onStarClick,\n      onStarClick = _ref$onStarClick === void 0 ? noop : _ref$onStarClick,\n      _ref$onStarHover = _ref.onStarHover,\n      onStarHover = _ref$onStarHover === void 0 ? noop : _ref$onStarHover,\n      _ref$onMouseLeave = _ref.onMouseLeave,\n      onMouseLeave = _ref$onMouseLeave === void 0 ? noop : _ref$onMouseLeave; // Determine if instance is interactive.\n\n  var isInteractive = onStarClick !== noop || onStarHover !== noop; // Limit rating to between 0 and MAX_NUM_STARS\n\n  var clampedRating = clamp(rating, 0, MAX_NUM_STARS); // Round rating to PRECISION (e.g, 2.7 --> 2.5).\n\n  var roundedRating = Math.round(clampedRating / PRECISION) * PRECISION; // Use hoverRating when present, otherwise use rating\n\n  var ratingValue = hoverRating || roundedRating; // aria-label text\n\n  var ariaStarText = ratingValue === 1 ? 'star' : 'stars';\n  var ariaLabel = \"\".concat(ratingValue, \" \").concat(ariaStarText, \" out of \").concat(MAX_NUM_STARS, \" star rating\");\n  return React.createElement(\"div\", {\n    className: classNames(styles.root, (_classNames = {}, _defineProperty(_classNames, styles.small, size === 'small'), _defineProperty(_classNames, styles.large, size === 'large'), _defineProperty(_classNames, styles.medium, size === 'medium'), _classNames)),\n    \"data-star\": ratingValue,\n    \"aria-label\": ariaLabel,\n    onMouseLeave: onMouseLeave,\n    role: isInteractive ? undefined : 'img'\n  }, isInteractive && React.createElement(\"div\", {\n    className: styles.rateInputsWrap\n  }, times(MAX_NUM_STARS, function (index) {\n    return (// eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control\n      React.createElement(\"label\", {\n        className: styles.rateLabel,\n        key: index,\n        onMouseEnter: function onMouseEnter() {\n          return onStarHover(index + 1);\n        }\n      }, React.createElement(\"input\", {\n        className: styles.rateInput,\n        type: \"radio\",\n        name: \"rating\",\n        value: index + 1,\n        onClick: function onClick() {\n          return onStarClick(index + 1);\n        }\n      }), index === 0 ? '1 star' : \"\".concat(index + 1, \" stars\"))\n    );\n  })));\n}\n\nexport default StarRating;","map":{"version":3,"sources":["../../../../components/StarRating/index.tsx"],"names":["MAX_NUM_STARS","PRECISION","rating","hoverRating","size","onStarClick","noop","onStarHover","onMouseLeave","isInteractive","clampedRating","clamp","roundedRating","Math","ratingValue","ariaStarText","ariaLabel","classNames","styles","rateInputsWrap","times","index"],"mappings":";;;;;;;AAQA,IAAMA,aAAa,GAAnB,CAAA,C,CAAA;;AAGA,IAAMC,SAAS,GAAf,GAAA;;AAgCe,SAAA,UAAA,CAAA,IAAA,EAOY;;;MANvBC,MAMuB,GAAA,IAAA,CANvBA,M;8BACAC,W;MAAAA,WAKuB,GAAA,gBAAA,KAAA,KAAA,CAAA,GALT,CAKS,GAAA,gB;uBAJvBC,I;MAAAA,IAIuB,GAAA,SAAA,KAAA,KAAA,CAAA,GAJhB,OAIgB,GAAA,S;8BAHvBC,W;MAAAA,WAGuB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAHTC,IAGS,GAAA,gB;8BAFvBC,W;MAAAA,WAEuB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAFTD,IAES,GAAA,gB;+BADvBE,Y;MAAAA,YACuB,GAAA,iBAAA,KAAA,KAAA,CAAA,GADRF,IACQ,GAAA,iB,CAAA,C;;MAEjBG,aAAa,GAAGJ,WAAW,KAAXA,IAAAA,IAAwBE,WAAW,KAFlC,I,CAAA,CAAA;;MAKjBG,aAAa,GAAGC,KAAK,CAAA,MAAA,EAAA,CAAA,EALJ,aAKI,C,CALJ,CAAA;;MAQjBC,aAAa,GAAGC,IAAI,CAAJA,KAAAA,CAAWH,aAAa,GAAxBG,SAAAA,IARC,S,CAAA,CAAA;;MAWjBC,WAAW,GAAGX,WAAW,IAXR,a,CAAA,CAAA;;MAcjBY,YAAY,GAAGD,WAAW,KAAXA,CAAAA,GAAAA,MAAAA,GAArB,O;MACME,SAAS,GAAA,GAAA,MAAA,CAAA,WAAA,EAAA,GAAA,EAAA,MAAA,CAAA,YAAA,EAAA,UAAA,EAAA,MAAA,CAAA,aAAA,EAAf,cAAe,C;SAGX,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEC,UAAU,CAACC,MAAM,CAAP,IAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBA,MAAM,CADU,KAAA,EACDd,IAAI,KADH,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBc,MAAM,CAFU,KAAA,EAEDd,IAAI,KAFH,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAGhBc,MAAM,CAHU,MAAA,EAGAd,IAAI,KAHJ,QAAA,CAAA,EADzB,WACyB,EADzB;iBAAA,WAAA;kBAAA,SAAA;AAQI,IAAA,YAAY,EARhB,YAAA;AASI,IAAA,IAAI,EAAEK,aAAa,GAAA,SAAA,GAAe;AATtC,GAAA,EAWKA,aAAa,IACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAES,MAAM,CAACC;AAAvB,GAAA,EACKC,KAAK,CAAA,aAAA,EAAgB,UAAA,KAAA,EAAK;;;AAGnB,QAAA,SAAS,EAAEF,MAAM,CADrB,S;AAEI,QAAA,GAAG,EAFP,K;AAGI,QAAA,YAAY,EAAE,SAAA,YAAA,GAAA;iBAAYX,WAAW,CAACc,KAAK,GAA7B,CAAuB,C;;SAErC,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACI,QAAA,SAAS,EAAEH,MAAM,CADrB,SAAA;AAEI,QAAA,IAAI,EAFR,OAAA;AAGI,QAAA,IAAI,EAHR,QAAA;AAII,QAAA,KAAK,EAAEG,KAAK,GAJhB,CAAA;AAKI,QAAA,OAAO,EAAE,SAAA,OAAA,GAAA;iBAAYhB,WAAW,CAACgB,KAAK,GAA7B,CAAuB,C;;AALpC,OAAA,C,EAOCA,KAAK,KAALA,CAAAA,GAAAA,QAAAA,GAAAA,GAAAA,MAAAA,CAA4BA,KAAK,GAAjCA,CAAAA,EAZL,QAYKA,C;;AA5BzB,GAcsB,CADV,CAZR,C","sourcesContent":["import React from 'react';\nimport clamp from 'lodash/clamp';\nimport times from 'lodash/times';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\n// Total number of stars\nconst MAX_NUM_STARS = 5;\n\n// Smallest increment we render\nconst PRECISION = 0.5;\n\ninterface PropTypes {\n    /**\n     * Number from 0-5 at increments of 0.5. Numbers between these steps will be rounded.\n     */\n    rating: number;\n    /**\n     * Number from 0-5 at increments of 1. `hoverRating` trumps `rating` with respect to star\n     * highlighting.\n     */\n    hoverRating?: 0 | 1 | 2 | 3 | 4 | 5;\n    /**\n     * The size of the component when rendered\n     */\n    size?: 'small' | 'medium' | 'large';\n    /**\n     * Function that is called when a user clicks on a star. The function is supplied a single\n     * parameter?: the value of the clicked star.\n     */\n    onStarClick?: (value: number) => void;\n    /**\n     * Function that is called when a user hovers over a star. The function is supplied a single\n     * parameter?: the value of the hovered star.\n     */\n    onStarHover?: (value: number) => void;\n    /**\n     * Function that is called when a user mouses away from the `StarRating` component\n     */\n    onMouseLeave?: () => void;\n}\n\nexport default function StarRating({\n    rating,\n    hoverRating = 0,\n    size = 'small',\n    onStarClick = noop,\n    onStarHover = noop,\n    onMouseLeave = noop,\n}: PropTypes): JSX.Element {\n    // Determine if instance is interactive.\n    const isInteractive = onStarClick !== noop || onStarHover !== noop;\n\n    // Limit rating to between 0 and MAX_NUM_STARS\n    const clampedRating = clamp(rating, 0, MAX_NUM_STARS);\n\n    // Round rating to PRECISION (e.g, 2.7 --> 2.5).\n    const roundedRating = Math.round(clampedRating / PRECISION) * PRECISION;\n\n    // Use hoverRating when present, otherwise use rating\n    const ratingValue = hoverRating || roundedRating;\n\n    // aria-label text\n    const ariaStarText = ratingValue === 1 ? 'star' : 'stars';\n    const ariaLabel = `${ratingValue} ${ariaStarText} out of ${MAX_NUM_STARS} star rating`;\n\n    return (\n        <div\n            className={classNames(styles.root, {\n                [styles.small]: size === 'small',\n                [styles.large]: size === 'large',\n                [styles.medium]: size === 'medium',\n            })}\n            data-star={ratingValue}\n            aria-label={ariaLabel}\n            onMouseLeave={onMouseLeave}\n            role={isInteractive ? undefined : 'img'}\n        >\n            {isInteractive && (\n                <div className={styles.rateInputsWrap}>\n                    {times(MAX_NUM_STARS, index => (\n                        // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control\n                        <label\n                            className={styles.rateLabel}\n                            key={index}\n                            onMouseEnter={(): void => onStarHover(index + 1)}\n                        >\n                            <input\n                                className={styles.rateInput}\n                                type=\"radio\"\n                                name=\"rating\"\n                                value={index + 1}\n                                onClick={(): void => onStarClick(index + 1)}\n                            />\n                            {index === 0 ? '1 star' : `${index + 1} stars`}\n                        </label>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}