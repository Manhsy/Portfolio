{"ast":null,"code":"import { inherits as _inherits, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf, createClass as _createClass } from '../../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport styles from './sticky-footer.module.scss';\n/**\n * This component exists because `this.props.setSticky` updates state and React doesn't allow state\n * updates within `render`. The parent component (ModalFooter) receives `setSticky` within render\n * (with the Context API), so it's not possible to access the function within its lifecycle hooks.\n * https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d#6a05\n */\n\nvar StickyFooter = /*#__PURE__*/function (_React$Component) {\n  _inherits(StickyFooter, _React$Component);\n\n  function StickyFooter() {\n    _classCallCheck(this, StickyFooter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StickyFooter).apply(this, arguments));\n  }\n\n  _createClass(StickyFooter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var setSticky = this.props.setSticky;\n      setSticky(true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.createElement(\"div\", {\n        className: styles.root\n      }, children);\n    }\n  }]);\n\n  return StickyFooter;\n}(React.Component);\n\nexport default StickyFooter;","map":{"version":3,"sources":["../../../../../components/Modal/components/sticky-footer.tsx"],"names":["StickyFooter","React","Component","setSticky","children","styles","root"],"mappings":";;;AAQA;;;;;;;IAMqBA,YAAAA,G;;;;;;;;;;;wCACS;UACdG,SADc,GACA,KADA,KACA,CADA,S;AAEtBA,MAAAA,SAAS,CAATA,IAAS,CAATA;;;;6BAGkB;UACVC,QADU,GACG,KADH,KACG,CADH,Q;aAGX,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAEC,MAAM,CAACC;AAAvB,OAAA,EAAP,QAAO,C;;;;;EAT2BL,KAAK,CAACC,S","sourcesContent":["import React from 'react';\nimport styles from './sticky-footer.module.scss';\n\ninterface PropTypes {\n    children: React.ReactNode;\n    setSticky: (isSticky: boolean) => void;\n}\n\n/**\n * This component exists because `this.props.setSticky` updates state and React doesn't allow state\n * updates within `render`. The parent component (ModalFooter) receives `setSticky` within render\n * (with the Context API), so it's not possible to access the function within its lifecycle hooks.\n * https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d#6a05\n */\nexport default class StickyFooter extends React.Component<PropTypes> {\n    componentDidMount(): void {\n        const { setSticky } = this.props;\n        setSticky(true);\n    }\n\n    render(): JSX.Element {\n        const { children } = this.props;\n\n        return <div className={styles.root}>{children}</div>;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}