{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\nvar getUIState = function getUIState(_ref) {\n  var hasError = _ref.hasError,\n      isDisabled = _ref.isDisabled;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (hasError) {\n    return 'error';\n  }\n\n  return 'default';\n};\n\nvar TextArea = function TextArea(_ref2) {\n  var _classNames;\n\n  var dataTest = _ref2.dataTest,\n      _ref2$hasError = _ref2.hasError,\n      hasError = _ref2$hasError === void 0 ? false : _ref2$hasError,\n      id = _ref2.id,\n      _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      _ref2$isReadOnly = _ref2.isReadOnly,\n      isReadOnly = _ref2$isReadOnly === void 0 ? false : _ref2$isReadOnly,\n      _ref2$isRequired = _ref2.isRequired,\n      isRequired = _ref2$isRequired === void 0 ? false : _ref2$isRequired,\n      maxLength = _ref2.maxLength,\n      onBlur = _ref2.onBlur,\n      _onChange = _ref2.onChange,\n      onFocus = _ref2.onFocus,\n      placeholder = _ref2.placeholder,\n      value = _ref2.value,\n      name = _ref2.name;\n  var uiState = getUIState({\n    hasError: hasError,\n    isDisabled: isDisabled\n  });\n  return React.createElement(\"textarea\", {\n    className: classNames((_classNames = {}, _defineProperty(_classNames, styles.root, true), _defineProperty(_classNames, styles.rootStateDisabled, uiState === 'disabled'), _defineProperty(_classNames, styles.rootStateError, uiState === 'error'), _defineProperty(_classNames, styles.rootStateDefault, uiState === 'default'), _classNames)),\n    id: id,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    maxLength: maxLength,\n    required: isRequired,\n    placeholder: placeholder,\n    value: value,\n    onChange: function onChange(event) {\n      return _onChange(event.target.value, event);\n    },\n    onFocus: onFocus,\n    onBlur: onBlur,\n    \"data-test\": dataTest,\n    name: name\n  });\n};\n\nexport default TextArea;","map":{"version":3,"sources":["../../../../components/TextArea/index.tsx"],"names":["getUIState","hasError","isDisabled","TextArea","dataTest","id","isReadOnly","isRequired","maxLength","onBlur","onChange","onFocus","placeholder","value","name","uiState","classNames","styles","event"],"mappings":";;;;;AAMA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAMJ;MALXC,QAKW,GAAA,IAAA,CALXA,Q;MACAC,UAIW,GAAA,IAAA,CAJXA,U;;MAKA,U,EAAgB;WACZ,U;;;MAGJ,Q,EAAc;WACV,O;;;SAGJ,S;AAfJ,CAAA;;AAiFA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAca;;;MAb1BC,QAa0B,GAAA,KAAA,CAb1BA,Q;6BACAH,Q;MAAAA,QAY0B,GAAA,cAAA,KAAA,KAAA,CAAA,GAZf,KAYe,GAAA,c;MAX1BI,EAW0B,GAAA,KAAA,CAX1BA,E;+BACAH,U;MAAAA,UAU0B,GAAA,gBAAA,KAAA,KAAA,CAAA,GAVb,KAUa,GAAA,gB;+BAT1BI,U;MAAAA,UAS0B,GAAA,gBAAA,KAAA,KAAA,CAAA,GATb,KASa,GAAA,gB;+BAR1BC,U;MAAAA,UAQ0B,GAAA,gBAAA,KAAA,KAAA,CAAA,GARb,KAQa,GAAA,gB;MAP1BC,SAO0B,GAAA,KAAA,CAP1BA,S;MACAC,MAM0B,GAAA,KAAA,CAN1BA,M;MACAC,SAK0B,GAAA,KAAA,CAL1BA,Q;MACAC,OAI0B,GAAA,KAAA,CAJ1BA,O;MACAC,WAG0B,GAAA,KAAA,CAH1BA,W;MACAC,KAE0B,GAAA,KAAA,CAF1BA,K;MACAC,IAC0B,GAAA,KAAA,CAD1BA,I;MAEMC,OAAO,GAAGf,UAAU,CAAC;AAAEC,IAAAA,QAAQ,EAAV,QAAA;AAAYC,IAAAA,UAAU,EAAVA;AAAZ,GAAD,C;SAGtB,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACI,IAAA,SAAS,EAAEc,UAAU,EAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBC,MAAM,CADU,IAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBA,MAAM,CAFU,iBAAA,EAEWF,OAAO,KAFlB,UAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAGhBE,MAAM,CAHU,cAAA,EAGQF,OAAO,KAHf,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAIhBE,MAAM,CAJU,gBAAA,EAIUF,OAAO,KAJjB,SAAA,CAAA,EADzB,WACyB,EADzB;AAOI,IAAA,EAAE,EAPN,EAAA;AAQI,IAAA,QAAQ,EARZ,UAAA;AASI,IAAA,QAAQ,EATZ,UAAA;AAUI,IAAA,SAAS,EAVb,SAAA;AAWI,IAAA,QAAQ,EAXZ,UAAA;AAYI,IAAA,WAAW,EAZf,WAAA;AAaI,IAAA,KAAK,EAbT,KAAA;AAcI,IAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAA;aAAiBL,SAAQ,CAACQ,KAAK,CAALA,MAAAA,CAAD,KAAA,EAAzB,KAAyB,C;AAdvC,KAAA;AAeI,IAAA,OAAO,EAfX,OAAA;AAgBI,IAAA,MAAM,EAhBV,MAAA;iBAAA,QAAA;AAkBI,IAAA,IAAI,EAAEJ;AAlBV,GAAA,C;AAlBR,CAAA","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\ntype UiState = 'disabled' | 'error' | 'default';\n\nconst getUIState = ({\n    hasError,\n    isDisabled,\n}: {\n    hasError: boolean;\n    isDisabled: boolean;\n}): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface PropTypes {\n    /**\n     * Adds a HTML `id` attribute to the textarea. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disable the textarea.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds `readonly` HTML attribute, allowing users to select (but not modify) the input.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Adds the `required` HTML attribute to the textarea.\n     */\n    isRequired?: boolean;\n    /**\n     * Makes the textarea border and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Text that appears within the textarea when there is no `value`.\n     */\n    placeholder?: string;\n    /**\n     * Adds `name` HTML attribute to element, indicating the property name associated with the selected value.\n     */\n    name?: string;\n    /**\n     * The current value of the textarea.\n     */\n    value: string;\n    /**\n     * The maximum number of characters that a user can enter. `onChange` will not fire if a user\n     * enters a character that exceeds `maxLength`.\n     */\n    maxLength?: number;\n    /**\n     * The function that is called when the textarea value changes.\n     *\n     * It receives two arguments: `onChange(newValue, event)`.\n     *\n     * The consumer of this component should use that data to update the `value` prop passed in to\n     * this component.\n     */\n    onChange: (newValue: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    /**\n     * Fires when the textarea receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;\n    /**\n     * Fires when the textarea loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<textarea />` element.\n     */\n    dataTest?: string;\n}\n\nconst TextArea = ({\n    dataTest,\n    hasError = false,\n    id,\n    isDisabled = false,\n    isReadOnly = false,\n    isRequired = false,\n    maxLength,\n    onBlur,\n    onChange,\n    onFocus,\n    placeholder,\n    value,\n    name,\n}: PropTypes): JSX.Element => {\n    const uiState = getUIState({ hasError, isDisabled });\n\n    return (\n        <textarea\n            className={classNames({\n                [styles.root]: true,\n                [styles.rootStateDisabled]: uiState === 'disabled',\n                [styles.rootStateError]: uiState === 'error',\n                [styles.rootStateDefault]: uiState === 'default',\n            })}\n            id={id}\n            disabled={isDisabled}\n            readOnly={isReadOnly}\n            maxLength={maxLength}\n            required={isRequired}\n            placeholder={placeholder}\n            value={value}\n            onChange={(event): void => onChange(event.target.value, event)}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            data-test={dataTest}\n            name={name}\n        />\n    );\n};\n\nexport default TextArea;\n"]},"metadata":{},"sourceType":"module"}