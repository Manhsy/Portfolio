{"ast":null,"code":"import { inherits as _inherits, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf, assertThisInitialized as _assertThisInitialized, createClass as _createClass, defineProperty as _defineProperty } from '../../../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport onClickOutside from 'react-onclickoutside';\nimport isFunction from 'lodash/isFunction';\nimport styles from './index.module.scss';\n\nvar ModalContents = /*#__PURE__*/function (_React$Component) {\n  _inherits(ModalContents, _React$Component);\n\n  function ModalContents(props) {\n    var _this;\n\n    _classCallCheck(this, ModalContents);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalContents).call(this, props));\n    _this.handleClickOutside = _this.handleClickOutside.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ModalContents, [{\n    key: \"handleClickOutside\",\n    value: function handleClickOutside(event) {\n      var onCloseClick = this.props.onCloseClick;\n\n      if (isFunction(onCloseClick)) {\n        onCloseClick(event);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classnames;\n\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          shouldAnimate = _this$props.shouldAnimate,\n          contentsMaxWidth = _this$props.contentsMaxWidth,\n          children = _this$props.children;\n      return React.createElement(\"div\", {\n        className: classNames(styles.modalContents, (_classnames = {}, _defineProperty(_classnames, styles.modalContentsOpen, isOpen), _defineProperty(_classnames, styles.modalContentsAnimated, shouldAnimate), _classnames)),\n        style: {\n          maxWidth: contentsMaxWidth\n        }\n      }, children);\n    }\n  }]);\n\n  return ModalContents;\n}(React.Component);\n\nModalContents.propTypes = {\n  /**\n   * Function that fires to close the modal.\n   */\n  onCloseClick: PropTypes.func,\n\n  /**\n   * Content inside the modal.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The max width of the container that wraps the contents of the modal.\n   */\n  contentsMaxWidth: PropTypes.string.isRequired,\n\n  /**\n   * Used by `react-onclickoutside` to indicate if the modal should close\n   * when clicking outside of it. If `true`, this prevents backdrop clicks\n   * from closing the modal.\n   */\n  disableOnClickOutside: // eslint-disable-next-line react/no-unused-prop-types\n  PropTypes.oneOfType([// This should be passed in as a boolean. `func` is also listed because\n  // onClickOutside`'s HOC changes it to a function.\n  PropTypes.bool, PropTypes.func]),\n\n  /**\n   * Should the modal contents be visible.\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Animate when opening and closing the modal.\n   */\n  shouldAnimate: PropTypes.bool\n};\nModalContents.defaultProps = {\n  onCloseClick: undefined,\n  children: null,\n  disableOnClickOutside: undefined,\n  isOpen: false,\n  shouldAnimate: true\n};\nvar ModalContents$1 = onClickOutside(ModalContents);\nexport default ModalContents$1;","map":{"version":3,"sources":["../../../../../../components/ModalBase/subcomponents/modal-contents/index.jsx"],"names":["ModalContents","React","Component","event","onCloseClick","isFunction","isOpen","shouldAnimate","contentsMaxWidth","children","classnames","styles","maxWidth","PropTypes","disableOnClickOutside","bool","onClickOutside"],"mappings":";;;;;;;;IAOMA,aAAAA,G;;;yBACF,K,EAAmB;;;;;uFACf,K;UAEA,kB,GAA0B,KAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,sBAAA,CAA1B,KAA0B,CAAA,C;;;;;;uCAGXG,K,EAAO;UACdC,YADc,GACG,KADH,KACG,CADH,Y;;UAGlBC,UAAU,CAAd,YAAc,C,EAAgB;AAC1BD,QAAAA,YAAY,CAAZA,KAAY,CAAZA;;;;;6BAIC;;;wBACyD,KADzD,K;UACGE,MADH,GAAA,WAAA,CAAA,M;UACWC,aADX,GAAA,WAAA,CAAA,a;UAC0BC,gBAD1B,GAAA,WAAA,CAAA,gB;UAC4CC,QAD5C,GAAA,WAAA,CAAA,Q;aAID,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,QAAA,SAAS,EAAEC,UAAU,CAACC,MAAM,CAAP,aAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBA,MAAM,CADU,iBAAA,EAAA,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBA,MAAM,CAFU,qBAAA,EAAA,aAAA,CAAA,EADzB,WACyB,EADzB;AAKI,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAEJ;AAAZ;AALX,OAAA,EADJ,QACI,C;;;;;EAnBgBP,KAAK,CAACC,S;;AAgClCF,aAAa,CAAbA,SAAAA,GAA0B;;;;AAItBI,EAAAA,YAAY,EAAES,SAAS,CAJD,IAAA;;;;;AAQtBJ,EAAAA,QAAQ,EAAEI,SAAS,CARG,IAAA;;;;;AAYtBL,EAAAA,gBAAgB,EAAEK,SAAS,CAATA,MAAAA,CAZI,UAAA;;;;;;;AAkBtBC,EAAAA,qBAAqB,EAAA;AAEjBD,EAAAA,SAAS,CAATA,SAAAA,CAAoB,CAAA;;AAGhBA,EAAAA,SAAS,CAHO,IAAA,EAIhBA,SAAS,CAxBK,IAoBE,CAApBA,CApBkB;;;;;AA6BtBP,EAAAA,MAAM,EAAEO,SAAS,CA7BK,IAAA;;;;;AAiCtBN,EAAAA,aAAa,EAAEM,SAAS,CAACE;AAjCH,CAA1Bf;AAoCAA,aAAa,CAAbA,YAAAA,GAA6B;AACzBI,EAAAA,YAAY,EADa,SAAA;AAEzBK,EAAAA,QAAQ,EAFiB,IAAA;AAGzBK,EAAAA,qBAAqB,EAHI,SAAA;AAIzBR,EAAAA,MAAM,EAJmB,KAAA;AAKzBC,EAAAA,aAAa,EAAE;AALU,CAA7BP;AAQA,IAAA,eAAA,GAAegB,cAAc,CAA7B,aAA6B,CAA7B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport onClickOutside from 'react-onclickoutside';\nimport isFunction from 'lodash/isFunction';\nimport styles from './index.module.scss';\n\nclass ModalContents extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    handleClickOutside(event) {\n        const { onCloseClick } = this.props;\n\n        if (isFunction(onCloseClick)) {\n            onCloseClick(event);\n        }\n    }\n\n    render() {\n        const { isOpen, shouldAnimate, contentsMaxWidth, children } = this.props;\n\n        return (\n            <div\n                className={classnames(styles.modalContents, {\n                    [styles.modalContentsOpen]: isOpen,\n                    [styles.modalContentsAnimated]: shouldAnimate,\n                })}\n                style={{ maxWidth: contentsMaxWidth }}\n            >\n                {children}\n            </div>\n        );\n    }\n}\n\nModalContents.propTypes = {\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: PropTypes.func,\n    /**\n     * Content inside the modal.\n     */\n    children: PropTypes.node,\n    /**\n     * The max width of the container that wraps the contents of the modal.\n     */\n    contentsMaxWidth: PropTypes.string.isRequired,\n    /**\n     * Used by `react-onclickoutside` to indicate if the modal should close\n     * when clicking outside of it. If `true`, this prevents backdrop clicks\n     * from closing the modal.\n     */\n    disableOnClickOutside:\n        // eslint-disable-next-line react/no-unused-prop-types\n        PropTypes.oneOfType([\n            // This should be passed in as a boolean. `func` is also listed because\n            // onClickOutside`'s HOC changes it to a function.\n            PropTypes.bool,\n            PropTypes.func,\n        ]),\n    /**\n     * Should the modal contents be visible.\n     */\n    isOpen: PropTypes.bool,\n    /**\n     * Animate when opening and closing the modal.\n     */\n    shouldAnimate: PropTypes.bool,\n};\n\nModalContents.defaultProps = {\n    onCloseClick: undefined,\n    children: null,\n    disableOnClickOutside: undefined,\n    isOpen: false,\n    shouldAnimate: true,\n};\n\nexport default onClickOutside(ModalContents);\n"]},"metadata":{},"sourceType":"module"}