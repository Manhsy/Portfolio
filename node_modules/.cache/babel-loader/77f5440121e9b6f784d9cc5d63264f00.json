{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\nfunction Title(_ref) {\n  var children = _ref.children,\n      size = _ref.size,\n      className = _ref.className,\n      headingLevel = _ref.headingLevel,\n      dataTest = _ref.dataTest,\n      dataTestId = _ref.dataTestId,\n      id = _ref.id;\n  var elementName = headingLevel ? \"h\".concat(headingLevel) : 'div';\n  var props = {\n    className: classNames(styles[\"title\".concat(size)], className),\n    'data-test': dataTest,\n    'data-testid': dataTestId,\n    id: id\n  };\n  return React.createElement(elementName, props, children);\n}\n\nfunction Text(_ref2) {\n  var children = _ref2.children,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 1 : _ref2$size,\n      className = _ref2.className,\n      _ref2$elementName = _ref2.elementName,\n      elementName = _ref2$elementName === void 0 ? 'p' : _ref2$elementName,\n      dataTest = _ref2.dataTest,\n      dataTestId = _ref2.dataTestId;\n  var props = {\n    className: classNames(styles[\"text\".concat(size)], className),\n    'data-test': dataTest,\n    'data-testid': dataTestId\n  };\n  return React.createElement(elementName, props, children);\n}\n\nexport { Text, Title };","map":{"version":3,"sources":["../../../../components/Type/index.tsx"],"names":["children","size","className","headingLevel","dataTest","dataTestId","id","elementName","props","classNames","styles","React"],"mappings":";;;;AA0CO,SAAA,KAAA,CAAA,IAAA,EAQyB;MAP5BA,QAO4B,GAAA,IAAA,CAP5BA,Q;MACAC,IAM4B,GAAA,IAAA,CAN5BA,I;MACAC,SAK4B,GAAA,IAAA,CAL5BA,S;MACAC,YAI4B,GAAA,IAAA,CAJ5BA,Y;MACAC,QAG4B,GAAA,IAAA,CAH5BA,Q;MACAC,UAE4B,GAAA,IAAA,CAF5BA,U;MACAC,EAC4B,GAAA,IAAA,CAD5BA,E;MAEMC,WAAW,GAAGJ,YAAY,GAAA,IAAA,MAAA,CAAA,YAAA,CAAA,GAAhC,K;MAEMK,KAAK,GAAG;AACVN,IAAAA,SAAS,EAAEO,UAAU,CAACC,MAAM,CAAA,QAAA,MAAA,CAAP,IAAO,CAAA,CAAP,EADX,SACW,CADX;iBAAA,QAAA;mBAAA,UAAA;AAIVJ,IAAAA,EAAE,EAAFA;AAJU,G;SAOPK,KAAK,CAALA,aAAAA,CAAAA,WAAAA,EAAAA,KAAAA,EAAP,QAAOA,C;;;AAkCJ,SAAA,IAAA,CAAA,KAAA,EAOwB;MAN3BX,QAM2B,GAAA,KAAA,CAN3BA,Q;yBACAC,I;MAAAA,IAK2B,GAAA,UAAA,KAAA,KAAA,CAAA,GALpB,CAKoB,GAAA,U;MAJ3BC,SAI2B,GAAA,KAAA,CAJ3BA,S;gCACAK,W;MAAAA,WAG2B,GAAA,iBAAA,KAAA,KAAA,CAAA,GAHb,GAGa,GAAA,iB;MAF3BH,QAE2B,GAAA,KAAA,CAF3BA,Q;MACAC,UAC2B,GAAA,KAAA,CAD3BA,U;MAEMG,KAAK,GAAG;AACVN,IAAAA,SAAS,EAAEO,UAAU,CAACC,MAAM,CAAA,OAAA,MAAA,CAAP,IAAO,CAAA,CAAP,EADX,SACW,CADX;iBAAA,QAAA;mBAGKL;AAHL,G;SAMPM,KAAK,CAALA,aAAAA,CAAAA,WAAAA,EAAAA,KAAAA,EAAP,QAAOA,C","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport styles from './index.module.scss';\n\ninterface TitlePropTypes {\n    /**\n     * Text to render.\n     */\n    children: React.ReactNode;\n    /**\n     * Size level of the text.\n     */\n    size: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n    /**\n     * Allows you to pass in additional styles to apply to the text. It is intentionally not\n     * possible to overwrite `font-size`, `line-height`, and `font-weight`. If you need to do so,\n     * consider using the [\"Type\" tokens](/tokens/#type) from Thumbprint Tokens or working with\n     * a designer to use one of the styles on this page.\n     */\n    className?: string;\n    /**\n     * Level of the heading element (h1 to h6) to render. If omitted, a heading tag is not used,\n     * and a div is used instead.\n     */\n    headingLevel?: 1 | 2 | 3 | 4 | 5 | 6;\n    /**\n     * Adds a HTML `id` attribute to the text. This is used for linking to a\n     * [URL fragment](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href).\n     */\n    id?: string;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function Title({\n    children,\n    size,\n    className,\n    headingLevel,\n    dataTest,\n    dataTestId,\n    id,\n}: TitlePropTypes): JSX.Element {\n    const elementName = headingLevel ? `h${headingLevel}` : 'div';\n\n    const props = {\n        className: classNames(styles[`title${size}`], className),\n        'data-test': dataTest,\n        'data-testid': dataTestId,\n        id,\n    };\n\n    return React.createElement(elementName, props, children);\n}\n\ninterface TextPropTypes {\n    /**\n     * Text to render.\n     */\n    children?: React.ReactNode;\n    /**\n     * Size level of the text.\n     */\n    size?: 1 | 2 | 3;\n    /**\n     * Allows you to pass in additional styles to apply to the text. It is intentionally not\n     * possible to overwrite `font-size` and `line-height`. If you need to do so, consider using\n     * the [\"Type\" tokens](/tokens/#type) from Thumbprint Tokens or working with a designer to\n     * use one of the styles on this page.\n     */\n    className?: string;\n    /**\n     * Name of the DOM element to render. Defaults to `p` for a paragraph tag.\n     */\n    elementName?: keyof React.ReactHTML;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function Text({\n    children,\n    size = 1,\n    className,\n    elementName = 'p',\n    dataTest,\n    dataTestId,\n}: TextPropTypes): JSX.Element {\n    const props = {\n        className: classNames(styles[`text${size}`], className),\n        'data-test': dataTest,\n        'data-testid': dataTestId,\n    };\n\n    return React.createElement(elementName, props, children);\n}\n"]},"metadata":{},"sourceType":"module"}