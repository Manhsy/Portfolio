{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport Themed from '../UIAction/themed.js';\nimport Plain from '../UIAction/plain.js';\n\nvar getCommonProps = function getCommonProps(props) {\n  return {\n    onClick: props.onClick,\n    isDisabled: props.isDisabled,\n    type: props.type,\n    children: props.children,\n    onMouseEnter: props.onMouseEnter,\n    onMouseOver: props.onMouseOver,\n    onFocus: props.onFocus,\n    onMouseLeave: props.onMouseLeave,\n    onBlur: props.onBlur,\n    accessibilityLabel: props.accessibilityLabel,\n    dataTest: props.dataTest,\n    dataTestId: props.dataTestId\n  };\n};\n\nvar TextButton = React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      iconLeft = _ref.iconLeft,\n      iconRight = _ref.iconRight,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseOver = _ref.onMouseOver,\n      onFocus = _ref.onFocus,\n      onMouseLeave = _ref.onMouseLeave,\n      onBlur = _ref.onBlur,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'primary' : _ref$theme,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'button' : _ref$type,\n      dataTest = _ref.dataTest,\n      dataTestId = _ref.dataTestId;\n  return React.createElement(Plain, _extends({}, getCommonProps({\n    onClick: onClick,\n    isDisabled: isDisabled,\n    type: type,\n    children: children,\n    onMouseEnter: onMouseEnter,\n    onMouseOver: onMouseOver,\n    onFocus: onFocus,\n    onMouseLeave: onMouseLeave,\n    onBlur: onBlur,\n    accessibilityLabel: accessibilityLabel,\n    dataTest: dataTest,\n    dataTestId: dataTestId\n  }), {\n    theme: theme,\n    iconLeft: iconLeft,\n    iconRight: iconRight,\n    ref: ref\n  }));\n});\nvar Button = React.forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      _ref2$isLoading = _ref2.isLoading,\n      isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,\n      icon = _ref2.icon,\n      iconRight = _ref2.iconRight,\n      accessibilityLabel = _ref2.accessibilityLabel,\n      _ref2$type = _ref2.type,\n      type = _ref2$type === void 0 ? 'button' : _ref2$type,\n      onClick = _ref2.onClick,\n      onMouseEnter = _ref2.onMouseEnter,\n      onMouseOver = _ref2.onMouseOver,\n      onFocus = _ref2.onFocus,\n      onMouseLeave = _ref2.onMouseLeave,\n      onBlur = _ref2.onBlur,\n      _ref2$theme = _ref2.theme,\n      theme = _ref2$theme === void 0 ? 'primary' : _ref2$theme,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 'large' : _ref2$size,\n      _ref2$width = _ref2.width,\n      width = _ref2$width === void 0 ? 'auto' : _ref2$width,\n      dataTest = _ref2.dataTest,\n      dataTestId = _ref2.dataTestId;\n  return React.createElement(Themed, _extends({}, getCommonProps({\n    onClick: onClick,\n    isDisabled: isDisabled,\n    type: type,\n    children: children,\n    onMouseEnter: onMouseEnter,\n    onMouseOver: onMouseOver,\n    onFocus: onFocus,\n    onMouseLeave: onMouseLeave,\n    onBlur: onBlur,\n    accessibilityLabel: accessibilityLabel,\n    dataTest: dataTest,\n    dataTestId: dataTestId\n  }), {\n    icon: icon,\n    iconRight: iconRight,\n    isLoading: isLoading,\n    theme: theme,\n    size: size,\n    width: width,\n    ref: ref\n  }));\n});\nexport default Button;\nexport { TextButton };","map":{"version":3,"sources":["../../../../components/Button/index.tsx"],"names":["getCommonProps","onClick","props","isDisabled","type","children","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","accessibilityLabel","dataTest","dataTestId","TextButton","iconLeft","iconRight","theme","ref","Button","isLoading","icon","size","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Themed, Plain } from '../UIAction/index';\n\ninterface CommonProps {\n    children?: React.ReactNode;\n    iconLeft?: React.ReactNode;\n    iconRight?: React.ReactNode;\n    isDisabled?: boolean;\n    onClick?: () => void;\n    onMouseEnter?: () => void;\n    onMouseOver?: () => void;\n    onFocus?: () => void;\n    onMouseLeave?: () => void;\n    onBlur?: () => void;\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    type?: 'button' | 'submit';\n    dataTest?: string;\n    dataTestId?: string;\n    accessibilityLabel?: string;\n}\n\nconst getCommonProps = (props: CommonProps): CommonProps => ({\n    onClick: props.onClick,\n    isDisabled: props.isDisabled,\n    type: props.type,\n    children: props.children,\n    onMouseEnter: props.onMouseEnter,\n    onMouseOver: props.onMouseOver,\n    onFocus: props.onFocus,\n    onMouseLeave: props.onMouseLeave,\n    onBlur: props.onBlur,\n    accessibilityLabel: props.accessibilityLabel,\n    dataTest: props.dataTest,\n    dataTestId: props.dataTestId,\n});\n\nconst TextButton = React.forwardRef<HTMLButtonElement, TextButtonPropTypes>(\n    (\n        {\n            children,\n            iconLeft,\n            iconRight,\n            isDisabled = false,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            accessibilityLabel,\n            theme = 'primary',\n            type = 'button',\n            dataTest,\n            dataTestId,\n        }: TextButtonPropTypes,\n        ref,\n    ): JSX.Element => (\n        <Plain\n            {...getCommonProps({\n                onClick,\n                isDisabled,\n                type,\n                children,\n                onMouseEnter,\n                onMouseOver,\n                onFocus,\n                onMouseLeave,\n                onBlur,\n                accessibilityLabel,\n                dataTest,\n                dataTestId,\n            })}\n            theme={theme}\n            iconLeft={iconLeft}\n            iconRight={iconRight}\n            ref={ref}\n        />\n    ),\n);\n\ninterface TextButtonPropTypes {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text within `TextButton`.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text within `TextButton`.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Visually and functionally disables the button. We discourage the use of this prop since it\n     * is difficult to visually indicate that a link is disabled. Consider not rendering the\n     * `TextButton` if it is not interactive.\n     */\n    isDisabled?: boolean;\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: () => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: () => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: () => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: () => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: () => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: () => void;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Controls the button’s background, text, and border color.\n     * `inherit` will make the button inherit `color` from its parent.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * Button’s of type `submit` will submit a form when used within a `form` element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonPropTypes>(\n    (\n        {\n            children,\n            isDisabled = false,\n            isLoading = false,\n            icon,\n            iconRight,\n            accessibilityLabel,\n            type = 'button',\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            theme = 'primary',\n            size = 'large',\n            width = 'auto',\n            dataTest,\n            dataTestId,\n        }: ButtonPropTypes,\n        ref,\n    ): JSX.Element => (\n        <Themed\n            {...getCommonProps({\n                onClick,\n                isDisabled,\n                type,\n                children,\n                onMouseEnter,\n                onMouseOver,\n                onFocus,\n                onMouseLeave,\n                onBlur,\n                accessibilityLabel,\n                dataTest,\n                dataTestId,\n            })}\n            icon={icon}\n            iconRight={iconRight}\n            isLoading={isLoading}\n            theme={theme}\n            size={size}\n            width={width}\n            ref={ref}\n        />\n    ),\n);\n\ninterface ButtonPropTypes {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Visually and functionally disables the button.\n     */\n    isDisabled?: boolean;\n    /**\n     * Boolean determining whether the button is in a loading state. When `true` the text will\n     * we replaced with a loading animation and interaction will be disabled.\n     */\n    isLoading?: boolean;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left within the button. It must be one of the\n     * `small` icons.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right within the button. It must be one of the\n     * `small` icons.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Button’s of type `submit` will submit a form when used within a `form` element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: () => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: () => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: () => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: () => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: () => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: () => void;\n    /**\n     * Controls the button’s background, text, and border color.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'caution' | 'solid';\n    /**\n     * Changes the button's `line-height`, `padding`, `border-radius`, and `font-size`.\n     */\n    size?: 'small' | 'large';\n    /**\n     * `Button` components are as wide as the content that is passed in. The `full` option will\n     * expand the width to `100%` on all screens. `full-below-small` will expand the width to 100%\n     * on devices smaller than [our `small` breakpoint](/tokens/#section-breakpoint).\n     */\n    width?: 'auto' | 'full' | 'full-below-small';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport default Button;\nexport { TextButton };\n"]},"metadata":{},"sourceType":"module"}