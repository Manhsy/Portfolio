{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport AlertCheck from '../../icons/alert-check.js';\nimport AlertInfo from '../../icons/alert-info.js';\nimport AlertWarning from '../../icons/alert-warning.js';\nimport '../../icons/blocked-filled.js';\nimport '../../icons/info-filled.js';\nimport '../../icons/warning-filled.js';\nimport styles from './index.module.scss';\n\nfunction BannerAlert(_ref) {\n  var _classNames;\n\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'info' : _ref$theme,\n      dataTestId = _ref.dataTestId,\n      dataTest = _ref.dataTest;\n  return React.createElement(\"div\", {\n    className: classNames((_classNames = {}, _defineProperty(_classNames, styles.root, true), _defineProperty(_classNames, styles.banner, true), _defineProperty(_classNames, styles.good, theme === 'good'), _defineProperty(_classNames, styles.bad, theme === 'bad'), _defineProperty(_classNames, styles.warning, theme === 'warning'), _defineProperty(_classNames, styles.info, theme === 'info'), _classNames)),\n    \"data-testid\": dataTestId,\n    \"data-test\": dataTest\n  }, React.createElement(\"div\", {\n    className: styles.text\n  }, children));\n}\n\nvar ALERT_ICONS = {\n  good: React.createElement(AlertCheck, {\n    className: styles.icon\n  }),\n  bad: React.createElement(AlertWarning, {\n    className: styles.icon\n  }),\n  warning: React.createElement(AlertWarning, {\n    className: styles.icon\n  }),\n  info: React.createElement(AlertInfo, {\n    className: styles.icon\n  })\n};\n\nfunction InPageAlert(_ref2) {\n  var _classNames2;\n\n  var _ref2$children = _ref2.children,\n      children = _ref2$children === void 0 ? null : _ref2$children,\n      _ref2$theme = _ref2.theme,\n      theme = _ref2$theme === void 0 ? 'info' : _ref2$theme,\n      dataTest = _ref2.dataTest,\n      dataTestId = _ref2.dataTestId;\n  return React.createElement(\"div\", {\n    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.root, true), _defineProperty(_classNames2, styles.good, theme === 'good'), _defineProperty(_classNames2, styles.bad, theme === 'bad'), _defineProperty(_classNames2, styles.warning, theme === 'warning'), _defineProperty(_classNames2, styles.info, theme === 'info'), _classNames2)),\n    \"data-testid\": dataTestId,\n    \"data-test\": dataTest\n  }, ALERT_ICONS[theme], React.createElement(\"div\", {\n    className: styles.text\n  }, children));\n}\n\nexport { BannerAlert, InPageAlert };","map":{"version":3,"sources":["../../../../components/Alert/index.tsx"],"names":["children","theme","dataTestId","dataTest","classNames","styles","text","ALERT_ICONS","good","icon","bad","warning","info"],"mappings":";;;;;;;;;;;AA0BO,SAAA,WAAA,CAAA,IAAA,EAK0B;;;2BAJ7BA,Q;MAAAA,QAI6B,GAAA,aAAA,KAAA,KAAA,CAAA,GAJlB,IAIkB,GAAA,a;wBAH7BC,K;MAAAA,KAG6B,GAAA,UAAA,KAAA,KAAA,CAAA,GAHrB,MAGqB,GAAA,U;MAF7BC,UAE6B,GAAA,IAAA,CAF7BA,U;MACAC,QAC6B,GAAA,IAAA,CAD7BA,Q;SAGI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEC,UAAU,EAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAChBC,MAAM,CADU,IAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAEhBA,MAAM,CAFU,MAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAGhBA,MAAM,CAHU,IAAA,EAGFJ,KAAK,KAHH,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAIhBI,MAAM,CAJU,GAAA,EAIHJ,KAAK,KAJF,KAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAKhBI,MAAM,CALU,OAAA,EAKCJ,KAAK,KALN,SAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAMhBI,MAAM,CANU,IAAA,EAMFJ,KAAK,KANH,MAAA,CAAA,EADzB,WACyB,EADzB;mBAAA,UAAA;iBAUeE;AAVf,GAAA,EAYI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAEE,MAAM,CAACC;AAAvB,GAAA,EAbR,QAaQ,CAZJ,C;;;AAqCR,IAAMC,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,SAAS,EAAEH,MAAM,CAACI;AAA9B,GAAA,CADU;AAEhBC,EAAAA,GAAG,EAAE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAc,IAAA,SAAS,EAAEL,MAAM,CAACI;AAAhC,GAAA,CAFW;AAGhBE,EAAAA,OAAO,EAAE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAc,IAAA,SAAS,EAAEN,MAAM,CAACI;AAAhC,GAAA,CAHO;AAIhBG,EAAAA,IAAI,EAAE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,SAAS,EAAEP,MAAM,CAACI;AAA7B,GAAA;AAJU,CAApB;;AAOO,SAAA,WAAA,CAAA,KAAA,EAK0B;;;6BAJ7BT,Q;MAAAA,QAI6B,GAAA,cAAA,KAAA,KAAA,CAAA,GAJlB,IAIkB,GAAA,c;0BAH7BC,K;MAAAA,KAG6B,GAAA,WAAA,KAAA,KAAA,CAAA,GAHrB,MAGqB,GAAA,W;MAF7BE,QAE6B,GAAA,KAAA,CAF7BA,Q;MACAD,UAC6B,GAAA,KAAA,CAD7BA,U;SAGI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,IAAA,SAAS,EAAEE,UAAU,EAAA,YAAA,GAAA,EAAA,EAAA,eAAA,CAAA,YAAA,EAChBC,MAAM,CADU,IAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAEhBA,MAAM,CAFU,IAAA,EAEFJ,KAAK,KAFH,MAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAGhBI,MAAM,CAHU,GAAA,EAGHJ,KAAK,KAHF,KAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAIhBI,MAAM,CAJU,OAAA,EAICJ,KAAK,KAJN,SAAA,CAAA,EAAA,eAAA,CAAA,YAAA,EAKhBI,MAAM,CALU,IAAA,EAKFJ,KAAK,KALH,MAAA,CAAA,EADzB,YACyB,EADzB;mBAAA,UAAA;iBASeE;AATf,GAAA,EAWKI,WAAW,CAXhB,KAWgB,CAXhB,EAYI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAEF,MAAM,CAACC;AAAvB,GAAA,EAbR,QAaQ,CAZJ,C","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { AlertCheck, AlertInfo, AlertWarning } from '../../icons/index.jsx';\n\nimport styles from './index.module.scss';\n\ninterface BannerPropTypes {\n    /**\n     * Text within the alert\n     */\n    children?: React.ReactNode;\n    /**\n     * Defines the style of the alert\n     */\n    theme?: 'good' | 'bad' | 'warning' | 'info';\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nexport function BannerAlert({\n    children = null,\n    theme = 'info',\n    dataTestId,\n    dataTest,\n}: BannerPropTypes): JSX.Element {\n    return (\n        <div\n            className={classNames({\n                [styles.root]: true,\n                [styles.banner]: true,\n                [styles.good]: theme === 'good',\n                [styles.bad]: theme === 'bad',\n                [styles.warning]: theme === 'warning',\n                [styles.info]: theme === 'info',\n            })}\n            data-testid={dataTestId}\n            data-test={dataTest}\n        >\n            <div className={styles.text}>{children}</div>\n        </div>\n    );\n}\n\ninterface InPagePropTypes {\n    /**\n     * Text within the alert\n     */\n    children?: React.ReactNode;\n    /**\n     * Defines the style of the alert\n     */\n    theme?: 'good' | 'bad' | 'warning' | 'info';\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector to hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n}\n\nconst ALERT_ICONS = {\n    good: <AlertCheck className={styles.icon} />,\n    bad: <AlertWarning className={styles.icon} />,\n    warning: <AlertWarning className={styles.icon} />,\n    info: <AlertInfo className={styles.icon} />,\n};\n\nexport function InPageAlert({\n    children = null,\n    theme = 'info',\n    dataTest,\n    dataTestId,\n}: InPagePropTypes): JSX.Element {\n    return (\n        <div\n            className={classNames({\n                [styles.root]: true,\n                [styles.good]: theme === 'good',\n                [styles.bad]: theme === 'bad',\n                [styles.warning]: theme === 'warning',\n                [styles.info]: theme === 'info',\n            })}\n            data-testid={dataTestId}\n            data-test={dataTest}\n        >\n            {ALERT_ICONS[theme]}\n            <div className={styles.text}>{children}</div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}