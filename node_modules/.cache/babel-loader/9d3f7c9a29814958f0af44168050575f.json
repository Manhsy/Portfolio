{"ast":null,"code":"import { slicedToArray as _slicedToArray, defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { InputRowContext } from '../InputRow/index.js';\nimport styles from './index.module.scss';\nvar Context = React.createContext({\n  hasValue: false,\n  size: undefined,\n  position: 'left'\n});\n/**\n * Prioritize the mutually exclusive UI states the user may end up in.\n */\n\nvar getUIState = function getUIState(_ref) {\n  var isDisabled = _ref.isDisabled,\n      isReadOnly = _ref.isReadOnly,\n      hasError = _ref.hasError;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (isReadOnly) {\n    return 'readonly';\n  }\n\n  if (hasError) {\n    return 'error';\n  }\n\n  return 'default';\n};\n/**\n * This component is not exported. It wraps the `InputClearButton` and `InputIcon`, applying\n * classes to position the icon. It does this by using `create-react-context`, a ponyfill for\n * React’s context functionality. This makes it easier for consumers to use `InputClearButton` and\n * `InputIcon` because they won’t have to specify as many props.\n */\n\n\nvar TextInputIconContainer = function TextInputIconContainer(_ref2) {\n  var children = _ref2.children,\n      style = _ref2.style;\n  return React.createElement(Context.Consumer, null, function (theme) {\n    var _classNames;\n\n    var position = theme && theme.position;\n    var size = theme && theme.size;\n    return React.createElement(\"div\", {\n      className: classNames((_classNames = {}, _defineProperty(_classNames, styles.inputIconContainer, true), _defineProperty(_classNames, styles.inputIconContainerPositionLeft, position === 'left'), _defineProperty(_classNames, styles.inputIconContainerPositionLeftSizeSmall, position === 'left' && size === 'small'), _defineProperty(_classNames, styles.inputIconContainerPositionLeftSizeLarge, position === 'left' && size === 'large'), _defineProperty(_classNames, styles.inputIconContainerPositionRight, position === 'right'), _defineProperty(_classNames, styles.inputIconContainerPositionRightSizeSmall, position === 'right' && size === 'small'), _defineProperty(_classNames, styles.inputIconContainerPositionRightSizeLarge, position === 'right' && size === 'large'), _classNames)),\n      style: style\n    }, children);\n  });\n};\n/**\n * Accessible button that makes it easy to add a \"Clear\" button to a text input. It should be used\n * with the `innerRight` prop in `Input`.\n */\n\n\nvar TextInputClearButton = function TextInputClearButton(_ref3) {\n  var onClick = _ref3.onClick;\n  return React.createElement(TextInputIconContainer, null, React.createElement(Context.Consumer, null, function (theme) {\n    return React.createElement(\"div\", {\n      className: classNames({\n        displayNone: theme && !theme.hasValue\n      })\n    }, React.createElement(\"button\", {\n      className: styles.unstyledButton,\n      \"aria-label\": \"Clear input\",\n      onClick: onClick,\n      type: \"button\"\n    }, React.createElement(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      width: \"18\",\n      height: \"18\",\n      stroke: \"currentColor\",\n      strokeWidth: \"3\",\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      className: styles.closeButtonIcon\n    }, React.createElement(\"line\", {\n      x1: \"18\",\n      y1: \"6\",\n      x2: \"6\",\n      y2: \"18\"\n    }), React.createElement(\"line\", {\n      x1: \"6\",\n      y1: \"6\",\n      x2: \"18\",\n      y2: \"18\"\n    }))));\n  }));\n};\n/**\n * Component that helps position icons within inputs.\n */\n\n\nvar TextInputIcon = function TextInputIcon(_ref4) {\n  var _ref4$color = _ref4.color,\n      color = _ref4$color === void 0 ? 'inherit' : _ref4$color,\n      children = _ref4.children;\n  return React.createElement(TextInputIconContainer, {\n    style: {\n      color: color\n    }\n  }, children);\n};\n\nvar TextInput = React.forwardRef(function (_ref5, outerRef) {\n  var _classNames2, _classNames3;\n\n  var id = _ref5.id,\n      _ref5$type = _ref5.type,\n      type = _ref5$type === void 0 ? 'text' : _ref5$type,\n      _ref5$isDisabled = _ref5.isDisabled,\n      isDisabled = _ref5$isDisabled === void 0 ? false : _ref5$isDisabled,\n      _ref5$isReadOnly = _ref5.isReadOnly,\n      isReadOnly = _ref5$isReadOnly === void 0 ? false : _ref5$isReadOnly,\n      _ref5$isRequired = _ref5.isRequired,\n      isRequired = _ref5$isRequired === void 0 ? false : _ref5$isRequired,\n      _ref5$hasError = _ref5.hasError,\n      hasError = _ref5$hasError === void 0 ? false : _ref5$hasError,\n      placeholder = _ref5.placeholder,\n      _ref5$size = _ref5.size,\n      size = _ref5$size === void 0 ? 'large' : _ref5$size,\n      name = _ref5.name,\n      _ref5$value = _ref5.value,\n      value = _ref5$value === void 0 ? '' : _ref5$value,\n      innerLeft = _ref5.innerLeft,\n      innerRight = _ref5.innerRight,\n      _ref5$onClick = _ref5.onClick,\n      _onClick = _ref5$onClick === void 0 ? function () {} : _ref5$onClick,\n      _ref5$onChange = _ref5.onChange,\n      _onChange = _ref5$onChange === void 0 ? function () {} : _ref5$onChange,\n      _ref5$onFocus = _ref5.onFocus,\n      _onFocus = _ref5$onFocus === void 0 ? function () {} : _ref5$onFocus,\n      _ref5$onBlur = _ref5.onBlur,\n      _onBlur = _ref5$onBlur === void 0 ? function () {} : _ref5$onBlur,\n      _ref5$onKeyDown = _ref5.onKeyDown,\n      _onKeyDown = _ref5$onKeyDown === void 0 ? function () {} : _ref5$onKeyDown,\n      _ref5$onKeyUp = _ref5.onKeyUp,\n      _onKeyUp = _ref5$onKeyUp === void 0 ? function () {} : _ref5$onKeyUp,\n      _ref5$onKeyPress = _ref5.onKeyPress,\n      _onKeyPress = _ref5$onKeyPress === void 0 ? function () {} : _ref5$onKeyPress,\n      _ref5$shouldFocusOnPa = _ref5.shouldFocusOnPageLoad,\n      shouldFocusOnPageLoad = _ref5$shouldFocusOnPa === void 0 ? false : _ref5$shouldFocusOnPa,\n      dataTest = _ref5.dataTest,\n      inputMode = _ref5.inputMode,\n      pattern = _ref5.pattern,\n      maxLength = _ref5.maxLength,\n      autoComplete = _ref5.autoComplete;\n\n  var uiState = getUIState({\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    hasError: hasError\n  }); // The input element rendered by this component. We use `useState` instead of\n  // `useRef` because callback refs allow us to add more than one `ref` to a DOM node.\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputEl = _useState2[0],\n      setInputEl = _useState2[1];\n\n  var focusInput = function focusInput() {\n    if (inputEl) {\n      inputEl.focus();\n    }\n  };\n  /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n\n\n  return React.createElement(\"div\", {\n    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.root, true), _defineProperty(_classNames2, styles.rootUiStateDefault, uiState === 'default'), _defineProperty(_classNames2, styles.rootUiStateReadonly, uiState === 'readonly'), _defineProperty(_classNames2, styles.rootUiStateDisabled, uiState === 'disabled'), _defineProperty(_classNames2, styles.rootUiStateError, uiState === 'error'), _classNames2))\n  }, innerLeft && React.createElement(Context.Provider, {\n    value: {\n      hasValue: !!value,\n      size: size,\n      position: 'left'\n    }\n  }, React.createElement(\"div\", {\n    className: styles.inputInnerElement,\n    onClick: focusInput\n  }, innerLeft)), React.createElement(\"input\", {\n    className: classNames((_classNames3 = {}, _defineProperty(_classNames3, styles.input, true), _defineProperty(_classNames3, styles.inputError, uiState === 'error'), _defineProperty(_classNames3, styles.inputSizeSmall, size === 'small'), _defineProperty(_classNames3, styles.inputSizeLarge, size === 'large'), _defineProperty(_classNames3, styles.inputInnerLeft, innerLeft), _defineProperty(_classNames3, styles.inputInnerRight, innerRight), _classNames3)),\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    placeholder: placeholder // eslint-disable-next-line jsx-a11y/no-autofocus\n    ,\n    autoFocus: shouldFocusOnPageLoad,\n    name: name,\n    type: type,\n    value: value,\n    onChange: function onChange(e) {\n      return _onChange(e.target.value, e);\n    },\n    onClick: function onClick(e) {\n      return _onClick(e);\n    },\n    onFocus: function onFocus(e) {\n      return _onFocus(e);\n    },\n    onBlur: function onBlur(e) {\n      return _onBlur(e);\n    },\n    onKeyDown: function onKeyDown(e) {\n      return _onKeyDown(e);\n    },\n    onKeyUp: function onKeyUp(e) {\n      return _onKeyUp(e);\n    },\n    onKeyPress: function onKeyPress(e) {\n      return _onKeyPress(e);\n    },\n    id: id,\n    ref: function ref(el) {\n      setInputEl(el); // `outerRef` is the potential forwarded `ref` passed in from a consumer.\n      // Not all refs are callable functions, so only try and call it if it is.\n\n      if (typeof outerRef === 'function') {\n        outerRef(el);\n      }\n    },\n    \"data-test\": dataTest,\n    inputMode: inputMode,\n    pattern: pattern,\n    maxLength: maxLength,\n    autoComplete: autoComplete\n  }), innerRight && React.createElement(Context.Provider, {\n    value: {\n      hasValue: !!value,\n      size: size,\n      position: 'right'\n    }\n  }, React.createElement(\"div\", {\n    className: styles.inputInnerElement,\n    onClick: focusInput\n  }, innerRight)), React.createElement(InputRowContext.Consumer, null, function (_ref6) {\n    var _classNames4;\n\n    var isWithinInputRow = _ref6.isWithinInputRow,\n        isFirstInputRowChild = _ref6.isFirstInputRowChild,\n        isLastInputRowChild = _ref6.isLastInputRowChild;\n    return React.createElement(\"div\", {\n      className: classNames((_classNames4 = {}, _defineProperty(_classNames4, styles.inputStyles, true), _defineProperty(_classNames4, styles.inputStylesRoundedBordersLeft, isFirstInputRowChild || !isWithinInputRow), _defineProperty(_classNames4, styles.inputStylesRoundedBordersRight, isLastInputRowChild || !isWithinInputRow), _defineProperty(_classNames4, styles.inputStylesHasNoRightBorder, isWithinInputRow && !isLastInputRowChild), _defineProperty(_classNames4, styles.inputStylesUiStateDefault, uiState === 'default'), _defineProperty(_classNames4, styles.inputStylesUiStateReadonly, uiState === 'readonly'), _defineProperty(_classNames4, styles.inputStylesUiStateDisabled, uiState === 'disabled'), _defineProperty(_classNames4, styles.inputStylesUiStateError, uiState === 'error'), _classNames4))\n    });\n  }));\n});\nTextInput.displayName = 'TextInput';\nexport default TextInput;\nexport { TextInputClearButton, TextInputIcon };","map":{"version":3,"sources":["../../../../components/TextInput/index.tsx"],"names":["Context","hasValue","size","position","getUIState","isDisabled","isReadOnly","hasError","TextInputIconContainer","children","style","theme","classNames","styles","TextInputClearButton","onClick","displayNone","closeButtonIcon","TextInputIcon","color","TextInput","id","type","isRequired","placeholder","name","value","innerLeft","innerRight","onChange","onFocus","onBlur","onKeyDown","onKeyUp","onKeyPress","shouldFocusOnPageLoad","dataTest","inputMode","pattern","maxLength","autoComplete","uiState","inputEl","setInputEl","useState","focusInput","e","outerRef","isWithinInputRow","isFirstInputRowChild","isLastInputRowChild"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { InputRowContext } from '../InputRow/index';\nimport styles from './index.module.scss';\n\ntype UiState = 'disabled' | 'readonly' | 'error' | 'default';\n\ntype ContextValue = {\n    hasValue: boolean;\n    size?: 'large' | 'small';\n    position: 'left' | 'right';\n};\n\nconst Context = React.createContext<ContextValue>({\n    hasValue: false,\n    size: undefined,\n    position: 'left',\n});\n\n/**\n * Prioritize the mutually exclusive UI states the user may end up in.\n */\nconst getUIState = ({\n    isDisabled,\n    isReadOnly,\n    hasError,\n}: Pick<TextInputPropTypes, 'isDisabled' | 'isReadOnly' | 'hasError'>): UiState => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (isReadOnly) {\n        return 'readonly';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface InputIconContainerPropTypes {\n    children: React.ReactNode;\n    style?: { color: string };\n}\n\n/**\n * This component is not exported. It wraps the `InputClearButton` and `InputIcon`, applying\n * classes to position the icon. It does this by using `create-react-context`, a ponyfill for\n * React’s context functionality. This makes it easier for consumers to use `InputClearButton` and\n * `InputIcon` because they won’t have to specify as many props.\n */\nconst TextInputIconContainer = ({ children, style }: InputIconContainerPropTypes): JSX.Element => (\n    <Context.Consumer>\n        {(theme): JSX.Element => {\n            const position = theme && theme.position;\n            const size = theme && theme.size;\n\n            return (\n                <div\n                    className={classNames({\n                        [styles.inputIconContainer]: true,\n                        // Applies when used on left\n                        [styles.inputIconContainerPositionLeft]: position === 'left',\n                        [styles.inputIconContainerPositionLeftSizeSmall]:\n                            position === 'left' && size === 'small',\n                        [styles.inputIconContainerPositionLeftSizeLarge]:\n                            position === 'left' && size === 'large',\n                        // Applies when used on right\n                        [styles.inputIconContainerPositionRight]: position === 'right',\n                        [styles.inputIconContainerPositionRightSizeSmall]:\n                            position === 'right' && size === 'small',\n                        [styles.inputIconContainerPositionRightSizeLarge]:\n                            position === 'right' && size === 'large',\n                    })}\n                    style={style}\n                >\n                    {children}\n                </div>\n            );\n        }}\n    </Context.Consumer>\n);\n\ninterface TextInputClearButtonPropTypes {\n    onClick: () => void;\n}\n\n/**\n * Accessible button that makes it easy to add a \"Clear\" button to a text input. It should be used\n * with the `innerRight` prop in `Input`.\n */\nconst TextInputClearButton = ({ onClick }: TextInputClearButtonPropTypes): JSX.Element => (\n    <TextInputIconContainer>\n        <Context.Consumer>\n            {(theme): JSX.Element => (\n                <div\n                    className={classNames({\n                        displayNone: theme && !theme.hasValue,\n                    })}\n                >\n                    <button\n                        className={styles.unstyledButton}\n                        aria-label=\"Clear input\"\n                        onClick={onClick}\n                        type=\"button\"\n                    >\n                        <svg\n                            viewBox=\"0 0 24 24\"\n                            width=\"18\"\n                            height=\"18\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className={styles.closeButtonIcon}\n                        >\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                        </svg>\n                    </button>\n                </div>\n            )}\n        </Context.Consumer>\n    </TextInputIconContainer>\n);\n\ninterface TextInputIconPropTypes {\n    /**\n     * Set the icon color with a color from [Thumbprint Tokens](/tokens/).\n     */\n    color?: string;\n    /**\n     * An icon component from [Thumbprint Icons](/icons/).\n     * You should pair \"Medium\" icons with `large` inputs and \"Small\" icons with `small` inputs.\n     */\n    children: React.ReactNode;\n}\n\n/**\n * Component that helps position icons within inputs.\n */\nconst TextInputIcon = ({ color = 'inherit', children }: TextInputIconPropTypes): JSX.Element => (\n    <TextInputIconContainer style={{ color }}>{children}</TextInputIconContainer>\n);\n\ninterface TextInputPropTypes {\n    /**\n     * Adds a HTML `id` attribute to the input. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disable the input.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds `readonly` HTML attribute, allowing users to select (but not modify) the input.\n     */\n    isReadOnly?: boolean;\n    /**\n     * Adds the `required` HTML attribute.\n     */\n    isRequired?: boolean;\n    /**\n     * A regular expression that the `<input>` element's value is checked against when submitting a\n     * form.\n     */\n    pattern?: string;\n    /**\n     * The maximum number of characters that a user can enter. `onChange` will not fire if a user\n     * enters a character that exceeds `maxLength`.\n     */\n    maxLength?: number;\n    /**\n     * Makes the text and border color red.\n     */\n    hasError?: boolean;\n    /**\n     * Text that appears within the input when there is no `value`.\n     */\n    placeholder?: string;\n    /**\n     * Controls the height and padding of the input.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Sets the `type` attribute on the input element.\n     */\n    type?: 'email' | 'password' | 'text' | 'search' | 'tel' | 'number';\n    /**\n     * A [proposed specification](https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute)\n     * that enables specification of virtual keyboard type in Chrome. Currently only supported in\n     * Chrome and Android.\n     */\n    inputMode?: 'numeric';\n    /**\n     * The HTML `name` attribute that will be pased to the input. It is required if working with a\n     * form that uses `<form action=\"\" method=\"\">` to submit data to a server.\n     */\n    name?: string;\n    /**\n     * The current value of the input.\n     */\n    value?: string | number;\n    /**\n     * Content that appears within the input on the left.\n     */\n    innerLeft?: React.ReactNode;\n    /**\n     * Content that appears within the input on the right.\n     */\n    innerRight?: React.ReactNode;\n    /**\n     * The function that is called when the input value changes.\n     *\n     * It receives two arguments: `onChange(newValue, event)`.\n     *\n     * The consumer of this component should use that data to update the `value` prop passed in to\n     * this component.\n     */\n    onChange: (value: string, event: React.ChangeEvent<HTMLInputElement>) => void;\n    /**\n     * Function that fires when you click into the input.\n     */\n    onClick?: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n    /**\n     * Fires when the input gains focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when the input loses focus, regardless of whether the value has changed.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a key is pressed down with the input focused.\n     */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a key press is released with the input focused.\n     */\n    onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * Fires when a valid key input is made.\n     */\n    onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n    /**\n     * This tells the browser to give the input focus when the page is loaded. This can [only be\n     * used once on a page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autofocus).\n     */\n    shouldFocusOnPageLoad?: boolean;\n    /**\n     * A selector hook into the React component for use in automated testing environments. It is\n     * applied internally to the `<input />` element.\n     */\n    dataTest?: string;\n    /**\n     * This tells the browser whether to attempt autocompletion of the input.\n     * [Supports all values](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).\n     */\n    autoComplete?: React.InputHTMLAttributes<HTMLInputElement>['autoComplete'];\n}\n\nconst TextInput = React.forwardRef<HTMLInputElement, TextInputPropTypes>(\n    (\n        {\n            id,\n            type = 'text',\n            isDisabled = false,\n            isReadOnly = false,\n            isRequired = false,\n            hasError = false,\n            placeholder,\n            size = 'large',\n            name,\n            value = '',\n            innerLeft,\n            innerRight,\n            onClick = (): void => {},\n            onChange = (): void => {},\n            onFocus = (): void => {},\n            onBlur = (): void => {},\n            onKeyDown = (): void => {},\n            onKeyUp = (): void => {},\n            onKeyPress = (): void => {},\n            shouldFocusOnPageLoad = false,\n            dataTest,\n            inputMode,\n            pattern,\n            maxLength,\n            autoComplete,\n        }: TextInputPropTypes,\n        outerRef,\n    ): JSX.Element => {\n        const uiState = getUIState({ isDisabled, isReadOnly, hasError });\n        // The input element rendered by this component. We use `useState` instead of\n        // `useRef` because callback refs allow us to add more than one `ref` to a DOM node.\n        const [inputEl, setInputEl] = useState<HTMLInputElement | null>(null);\n\n        const focusInput = (): void => {\n            if (inputEl) {\n                inputEl.focus();\n            }\n        };\n\n        /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n        return (\n            <div\n                className={classNames({\n                    [styles.root]: true,\n                    [styles.rootUiStateDefault]: uiState === 'default',\n                    [styles.rootUiStateReadonly]: uiState === 'readonly',\n                    [styles.rootUiStateDisabled]: uiState === 'disabled',\n                    [styles.rootUiStateError]: uiState === 'error',\n                })}\n            >\n                {innerLeft && (\n                    <Context.Provider\n                        value={{\n                            hasValue: !!value,\n                            size,\n                            position: 'left',\n                        }}\n                    >\n                        <div className={styles.inputInnerElement} onClick={focusInput}>\n                            {innerLeft}\n                        </div>\n                    </Context.Provider>\n                )}\n\n                <input\n                    className={classNames({\n                        [styles.input]: true,\n                        [styles.inputError]: uiState === 'error',\n                        [styles.inputSizeSmall]: size === 'small',\n                        [styles.inputSizeLarge]: size === 'large',\n                        [styles.inputInnerLeft]: innerLeft,\n                        [styles.inputInnerRight]: innerRight,\n                    })}\n                    disabled={isDisabled}\n                    readOnly={isReadOnly}\n                    required={isRequired}\n                    placeholder={placeholder}\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus={shouldFocusOnPageLoad}\n                    name={name}\n                    type={type}\n                    value={value}\n                    onChange={(e): void => onChange(e.target.value, e)}\n                    onClick={(e): void => onClick(e)}\n                    onFocus={(e): void => onFocus(e)}\n                    onBlur={(e): void => onBlur(e)}\n                    onKeyDown={(e): void => onKeyDown(e)}\n                    onKeyUp={(e): void => onKeyUp(e)}\n                    onKeyPress={(e): void => onKeyPress(e)}\n                    id={id}\n                    ref={(el): void => {\n                        setInputEl(el);\n\n                        // `outerRef` is the potential forwarded `ref` passed in from a consumer.\n                        // Not all refs are callable functions, so only try and call it if it is.\n                        if (typeof outerRef === 'function') {\n                            outerRef(el);\n                        }\n                    }}\n                    data-test={dataTest}\n                    inputMode={inputMode}\n                    pattern={pattern}\n                    maxLength={maxLength}\n                    autoComplete={autoComplete}\n                />\n\n                {innerRight && (\n                    <Context.Provider\n                        value={{\n                            hasValue: !!value,\n                            size,\n                            position: 'right',\n                        }}\n                    >\n                        <div className={styles.inputInnerElement} onClick={focusInput}>\n                            {innerRight}\n                        </div>\n                    </Context.Provider>\n                )}\n\n                <InputRowContext.Consumer>\n                    {({\n                        isWithinInputRow,\n                        isFirstInputRowChild,\n                        isLastInputRowChild,\n                    }): JSX.Element => (\n                        <div\n                            className={classNames({\n                                [styles.inputStyles]: true,\n                                [styles.inputStylesRoundedBordersLeft]:\n                                    isFirstInputRowChild || !isWithinInputRow,\n                                [styles.inputStylesRoundedBordersRight]:\n                                    isLastInputRowChild || !isWithinInputRow,\n                                [styles.inputStylesHasNoRightBorder]:\n                                    isWithinInputRow && !isLastInputRowChild,\n                                [styles.inputStylesUiStateDefault]: uiState === 'default',\n                                [styles.inputStylesUiStateReadonly]: uiState === 'readonly',\n                                [styles.inputStylesUiStateDisabled]: uiState === 'disabled',\n                                [styles.inputStylesUiStateError]: uiState === 'error',\n                            })}\n                        />\n                    )}\n                </InputRowContext.Consumer>\n            </div>\n        );\n    },\n);\nTextInput.displayName = 'TextInput';\n\nexport default TextInput;\nexport { TextInputIcon, TextInputClearButton };\n"]},"metadata":{},"sourceType":"module"}