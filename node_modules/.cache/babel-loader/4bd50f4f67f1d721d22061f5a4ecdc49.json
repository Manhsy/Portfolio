{"ast":null,"code":"import React from 'react';\nimport styles from './badge.module.scss'; // TODO(giles): remove all \"checked\" configs once we delete the isChecked prop\n\nvar sizeClasses = {\n  xsmall: {\n    userOnline: {\n      top: 0,\n      right: -2,\n      size: 12\n    },\n    userChecked: {\n      top: -2,\n      right: -4,\n      size: 17\n    },\n    entityOnline: {\n      size: 12\n    }\n  },\n  small: {\n    userOnline: {\n      top: 1,\n      right: -2,\n      size: 12\n    },\n    userChecked: {\n      top: -2,\n      right: -4,\n      size: 17\n    },\n    entityOnline: {\n      size: 12\n    }\n  },\n  medium: {\n    userOnline: {\n      top: 2,\n      right: 2,\n      size: 14\n    },\n    userChecked: {\n      top: -2,\n      right: -2,\n      size: 20\n    },\n    entityOnline: {\n      size: 14\n    }\n  },\n  large: {\n    userOnline: {\n      top: 4,\n      right: 5,\n      size: 18\n    },\n    userChecked: {\n      top: 0,\n      right: 0,\n      size: 24\n    },\n    entityOnline: {\n      size: 18\n    }\n  },\n  xlarge: {\n    userOnline: {\n      top: 0,\n      right: 14,\n      size: 24\n    },\n    userChecked: {\n      top: 0,\n      right: 6,\n      size: 30\n    },\n    entityOnline: {\n      size: 24\n    }\n  }\n};\n/**\n * `Badge` appears on the top-right corner of an `Avatar`. It is used to either\n * show a checkmark or an indicator that there are unread notifications.\n */\n\nfunction Badge(_ref) {\n  var size = _ref.size,\n      type = _ref.type,\n      children = _ref.children;\n  var badgeType = 'entityOnline';\n\n  if (type === 'user') {\n    if (children) {\n      badgeType = 'userChecked';\n    } else {\n      badgeType = 'userOnline';\n    }\n  }\n\n  var styleConfig = sizeClasses[size][badgeType];\n  return React.createElement(\"div\", {\n    className: styles.badge,\n    style: {\n      // EntityAvatar badges stick out by one third of their diameter.\n      // UserAvatar badges have custom positions in the style object.\n      top: badgeType === 'entityOnline' ? -(styleConfig.size / 3) : styleConfig.top,\n      right: badgeType === 'entityOnline' ? -(styleConfig.size / 3) : styleConfig.right,\n      width: styleConfig.size,\n      height: styleConfig.size\n    }\n  }, children);\n}\n\nexport default Badge;","map":{"version":3,"sources":["../../../../../components/Avatar/subcomponents/badge.tsx"],"names":["sizeClasses","xsmall","userOnline","top","right","size","userChecked","entityOnline","small","medium","large","xlarge","type","children","badgeType","styleConfig","styles","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './badge.module.scss';\n\ninterface ConfigItem {\n    top?: number;\n    right?: number;\n    size: number;\n}\n\ntype SizeClassesType = {\n    xsmall: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    small: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    medium: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    large: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n    xlarge: {\n        userOnline: ConfigItem;\n        userChecked: ConfigItem;\n        entityOnline: ConfigItem;\n    };\n};\n\n// TODO(giles): remove all \"checked\" configs once we delete the isChecked prop\nconst sizeClasses: SizeClassesType = {\n    xsmall: {\n        userOnline: {\n            top: 0,\n            right: -2,\n            size: 12,\n        },\n        userChecked: {\n            top: -2,\n            right: -4,\n            size: 17,\n        },\n        entityOnline: {\n            size: 12,\n        },\n    },\n    small: {\n        userOnline: {\n            top: 1,\n            right: -2,\n            size: 12,\n        },\n        userChecked: {\n            top: -2,\n            right: -4,\n            size: 17,\n        },\n        entityOnline: {\n            size: 12,\n        },\n    },\n    medium: {\n        userOnline: {\n            top: 2,\n            right: 2,\n            size: 14,\n        },\n        userChecked: {\n            top: -2,\n            right: -2,\n            size: 20,\n        },\n        entityOnline: {\n            size: 14,\n        },\n    },\n    large: {\n        userOnline: {\n            top: 4,\n            right: 5,\n            size: 18,\n        },\n        userChecked: {\n            top: 0,\n            right: 0,\n            size: 24,\n        },\n        entityOnline: {\n            size: 18,\n        },\n    },\n    xlarge: {\n        userOnline: {\n            top: 0,\n            right: 14,\n            size: 24,\n        },\n        userChecked: {\n            top: 0,\n            right: 6,\n            size: 30,\n        },\n        entityOnline: {\n            size: 24,\n        },\n    },\n};\n\ntype BadgeType = 'userOnline' | 'userChecked' | 'entityOnline';\n\ninterface PropTypes {\n    size: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';\n    type: 'user' | 'entity';\n    children?: React.ReactNode;\n}\n\n/**\n * `Badge` appears on the top-right corner of an `Avatar`. It is used to either\n * show a checkmark or an indicator that there are unread notifications.\n */\nexport default function Badge({ size, type, children }: PropTypes): JSX.Element {\n    let badgeType: BadgeType = 'entityOnline';\n\n    if (type === 'user') {\n        if (children) {\n            badgeType = 'userChecked';\n        } else {\n            badgeType = 'userOnline';\n        }\n    }\n\n    const styleConfig: ConfigItem = sizeClasses[size][badgeType];\n\n    return (\n        <div\n            className={styles.badge}\n            style={{\n                // EntityAvatar badges stick out by one third of their diameter.\n                // UserAvatar badges have custom positions in the style object.\n                top: badgeType === 'entityOnline' ? -(styleConfig.size / 3) : styleConfig.top,\n                right: badgeType === 'entityOnline' ? -(styleConfig.size / 3) : styleConfig.right,\n                width: styleConfig.size,\n                height: styleConfig.size,\n            }}\n        >\n            {children}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}