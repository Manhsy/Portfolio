{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { tpColorGray, tpColorBlack, tpColorRed } from '@thumbtack/thumbprint-tokens';\nimport styles from './index.module.scss';\nvar iconColor = {\n  disabled: tpColorGray,\n  default: tpColorBlack,\n  error: tpColorRed\n};\n\nvar getUIState = function getUIState(_ref) {\n  var isDisabled = _ref.isDisabled,\n      hasError = _ref.hasError;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (hasError) {\n    return 'error';\n  }\n\n  return 'default';\n};\n\nvar Dropdown = function Dropdown(_ref2) {\n  var _classNames, _classNames2;\n\n  var children = _ref2.children,\n      dataTest = _ref2.dataTest,\n      dataTestId = _ref2.dataTestId,\n      _ref2$hasError = _ref2.hasError,\n      hasError = _ref2$hasError === void 0 ? false : _ref2$hasError,\n      id = _ref2.id,\n      _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      _ref2$isFullWidth = _ref2.isFullWidth,\n      isFullWidth = _ref2$isFullWidth === void 0 ? false : _ref2$isFullWidth,\n      _ref2$isRequired = _ref2.isRequired,\n      isRequired = _ref2$isRequired === void 0 ? false : _ref2$isRequired,\n      name = _ref2.name,\n      _onChange = _ref2.onChange,\n      onFocus = _ref2.onFocus,\n      onBlur = _ref2.onBlur,\n      _ref2$onClick = _ref2.onClick,\n      onClick = _ref2$onClick === void 0 ? function () {} : _ref2$onClick,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 'large' : _ref2$size,\n      value = _ref2.value;\n  var uiState = getUIState({\n    isDisabled: isDisabled,\n    hasError: hasError\n  });\n  return React.createElement(\"div\", {\n    className: classNames((_classNames = {}, _defineProperty(_classNames, styles.root, true), _defineProperty(_classNames, styles.rootWidthFull, isFullWidth), _classNames))\n  }, React.createElement(\"select\", {\n    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.select, true), _defineProperty(_classNames2, styles.selectStateDisabled, uiState === 'disabled'), _defineProperty(_classNames2, styles.selectStateError, uiState === 'error'), _defineProperty(_classNames2, styles.selectStateDefault, uiState === 'default'), _defineProperty(_classNames2, styles.selectSizeSmall, size === 'small'), _defineProperty(_classNames2, styles.selectSizeLarge, size === 'large'), _classNames2)),\n    id: id,\n    disabled: isDisabled,\n    required: isRequired,\n    value: value,\n    onClick: onClick,\n    onChange: function onChange(event) {\n      return _onChange(event.target.value, event);\n    },\n    onFocus: onFocus,\n    onBlur: onBlur,\n    \"data-testid\": dataTestId,\n    \"data-test\": dataTest,\n    name: name\n  }, children), React.createElement(\"svg\", {\n    viewBox: \"0 0 24 24\",\n    width: \"18\",\n    height: \"18\",\n    className: styles.caret,\n    stroke: iconColor[uiState],\n    strokeWidth: \"3\",\n    fill: \"none\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, React.createElement(\"polyline\", {\n    points: \"6 9 12 15 18 9\"\n  })));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["../../../../components/Dropdown/index.tsx"],"names":["iconColor","disabled","default","error","tokens","getUIState","isDisabled","hasError","Dropdown","children","dataTest","dataTestId","id","isFullWidth","isRequired","name","onChange","onFocus","onBlur","onClick","size","value","uiState","classNames","styles","event"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\nconst iconColor = {\n    disabled: tokens.tpColorGray,\n    default: tokens.tpColorBlack,\n    error: tokens.tpColorRed,\n};\n\nconst getUIState = ({\n    isDisabled,\n    hasError,\n}: {\n    isDisabled: boolean;\n    hasError: boolean;\n}): 'disabled' | 'error' | 'default' => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\ninterface PropTypes {\n    /**\n     * A collection of [HTML `<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option).\n     */\n    children?: React.ReactNode;\n    /**\n     * Adds a HTML `id` attribute to the select. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disables the select dropdown.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds `required` HTML attribute to element, indicating that an option with a non-empty string\n     * value must be selected.\n     */\n    isRequired?: boolean;\n    /**\n     * Makes the radio and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Changes the selectâ€™s font-size, height, and padding.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Set the `<select>`'s width to `100%` as opposed to the default behavior\n     * of only taking up the necessary width.\n     */\n    isFullWidth?: boolean;\n    /**\n     * The `value` of the `<option>` that is selected. See [React documentation\n     * on `<select>` and controlled components](https://facebook.github.io/react/docs/forms.html#the-select-tag)\n     * to learn more.\n     */\n    value: string;\n    /**\n     * Function that is fired when the value of the select changes.\n     */\n    onClick?: (event: React.MouseEvent<HTMLSelectElement, MouseEvent>) => void;\n    /**\n     * A function that is fired when the value of the select changes. The\n     * new `value` is passed to the function.\n     */\n    onChange: (value: string, event: React.ChangeEvent<HTMLSelectElement>) => void;\n    /**\n     * Fires when the select receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLSelectElement>) => void;\n    /**\n     * Fires when the select loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLSelectElement>) => void;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Adds `name` HTML attribute to element, indicating the property name associated with the\n     * selected value.\n     */\n    name?: string;\n}\n\nconst Dropdown = ({\n    children,\n    dataTest,\n    dataTestId,\n    hasError = false,\n    id,\n    isDisabled = false,\n    isFullWidth = false,\n    isRequired = false,\n    name,\n    onChange,\n    onFocus,\n    onBlur,\n    onClick = (): void => {},\n    size = 'large',\n    value,\n}: PropTypes): JSX.Element => {\n    const uiState = getUIState({ isDisabled, hasError });\n\n    return (\n        <div\n            className={classNames({\n                [styles.root]: true,\n                [styles.rootWidthFull]: isFullWidth,\n            })}\n        >\n            <select\n                className={classNames({\n                    [styles.select]: true,\n                    [styles.selectStateDisabled]: uiState === 'disabled',\n                    [styles.selectStateError]: uiState === 'error',\n                    [styles.selectStateDefault]: uiState === 'default',\n                    [styles.selectSizeSmall]: size === 'small',\n                    [styles.selectSizeLarge]: size === 'large',\n                })}\n                id={id}\n                disabled={isDisabled}\n                required={isRequired}\n                value={value}\n                onClick={onClick}\n                onChange={(event): void => onChange(event.target.value, event)}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                data-testid={dataTestId}\n                data-test={dataTest}\n                name={name}\n            >\n                {children}\n            </select>\n\n            <svg\n                viewBox=\"0 0 24 24\"\n                width=\"18\"\n                height=\"18\"\n                className={styles.caret}\n                stroke={iconColor[uiState]}\n                strokeWidth=\"3\"\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            >\n                <polyline points=\"6 9 12 15 18 9\" />\n            </svg>\n        </div>\n    );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}