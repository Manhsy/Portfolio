{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport ModalBase from '../ModalBase/index.js';\nimport styles from './index.module.scss';\n\nvar ModalStandard = function ModalStandard(_ref) {\n  var _classnames, _classnames2;\n\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      onCloseClick = _ref.onCloseClick,\n      onCloseFinish = _ref.onCloseFinish,\n      onOpenFinish = _ref.onOpenFinish,\n      shouldCloseOnBackdropClick = _ref.shouldCloseOnBackdropClick,\n      shouldHideCloseButton = _ref.shouldHideCloseButton,\n      theme = _ref.theme;\n  return React.createElement(ModalBase, {\n    isOpen: isOpen,\n    onCloseClick: onCloseClick,\n    contentsMaxWidth: \"600px\",\n    shouldCloseOnBackdropClick: shouldCloseOnBackdropClick,\n    onOpenFinish: onOpenFinish,\n    onCloseFinish: onCloseFinish\n  }, React.createElement(\"div\", {\n    className: classNames((_classnames = {}, _defineProperty(_classnames, styles.contents, true), _defineProperty(_classnames, styles.contentsBrand, theme === 'brand'), _classnames))\n  }, children, shouldHideCloseButton === false && React.createElement(\"button\", {\n    onClick: onCloseClick,\n    className: styles.closeButton,\n    type: \"button\"\n  }, React.createElement(\"svg\", {\n    viewBox: \"0 0 24 24\",\n    width: \"24\",\n    height: \"24\",\n    stroke: \"currentColor\",\n    strokeWidth: \"1\",\n    fill: \"none\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: classNames((_classnames2 = {}, _defineProperty(_classnames2, styles.closeIcon, true), _defineProperty(_classnames2, styles.closeIconBrand, theme === 'brand'), _classnames2))\n  }, React.createElement(\"line\", {\n    x1: \"18\",\n    y1: \"6\",\n    x2: \"6\",\n    y2: \"18\"\n  }), React.createElement(\"line\", {\n    x1: \"6\",\n    y1: \"6\",\n    x2: \"18\",\n    y2: \"18\"\n  })))));\n};\n\nModalStandard.propTypes = {\n  /**\n   * Content that appears above the Backdrop.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Function that fires to close the modal.\n   */\n  onCloseClick: PropTypes.func.isRequired,\n\n  /**\n   * Function that fires once the modal has opened and transitions have ended.\n   */\n  onOpenFinish: PropTypes.func,\n\n  /**\n   * Function that fires once the modal has closed and transitions have ended.\n   */\n  onCloseFinish: PropTypes.func,\n\n  /**\n   * Determines if the modal should close when clicking on the Backdrop,\n   * outside of the `children`.\n   */\n  shouldCloseOnBackdropClick: PropTypes.bool,\n\n  /**\n   * Determines if the close button should be rendered. This is generally discouraged and should\n   * be used carefully. If used, the contents passed into the modal must contain a focusable\n   * element such as a link or button.\n   */\n  shouldHideCloseButton: PropTypes.bool,\n\n  /**\n   * Should the Backdrop appear open.\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Sets the color of the background and close button.\n   */\n  theme: PropTypes.oneOf(['brand', 'faint'])\n};\nModalStandard.defaultProps = {\n  children: undefined,\n  onOpenFinish: undefined,\n  onCloseFinish: undefined,\n  isOpen: false,\n  theme: 'faint',\n  shouldCloseOnBackdropClick: true,\n  shouldHideCloseButton: false\n};\nexport default ModalStandard;","map":{"version":3,"sources":["../../../../components/ModalStandard/index.jsx"],"names":["ModalStandard","children","isOpen","onCloseClick","onCloseFinish","onOpenFinish","shouldCloseOnBackdropClick","shouldHideCloseButton","theme","classnames","styles","PropTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ModalBase from '../ModalBase/index.jsx';\nimport styles from './index.module.scss';\n\nconst ModalStandard = ({\n    children,\n    isOpen,\n    onCloseClick,\n    onCloseFinish,\n    onOpenFinish,\n    shouldCloseOnBackdropClick,\n    shouldHideCloseButton,\n    theme,\n}) => (\n    <ModalBase\n        isOpen={isOpen}\n        onCloseClick={onCloseClick}\n        contentsMaxWidth=\"600px\"\n        shouldCloseOnBackdropClick={shouldCloseOnBackdropClick}\n        onOpenFinish={onOpenFinish}\n        onCloseFinish={onCloseFinish}\n    >\n        <div\n            className={classnames({\n                [styles.contents]: true,\n                [styles.contentsBrand]: theme === 'brand',\n            })}\n        >\n            {children}\n            {shouldHideCloseButton === false && (\n                <button onClick={onCloseClick} className={styles.closeButton} type=\"button\">\n                    <svg\n                        viewBox=\"0 0 24 24\"\n                        width=\"24\"\n                        height=\"24\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"1\"\n                        fill=\"none\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        className={classnames({\n                            [styles.closeIcon]: true,\n                            [styles.closeIconBrand]: theme === 'brand',\n                        })}\n                    >\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                    </svg>\n                </button>\n            )}\n        </div>\n    </ModalBase>\n);\n\nModalStandard.propTypes = {\n    /**\n     * Content that appears above the Backdrop.\n     */\n    children: PropTypes.node,\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: PropTypes.func.isRequired,\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish: PropTypes.func,\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish: PropTypes.func,\n    /**\n     * Determines if the modal should close when clicking on the Backdrop,\n     * outside of the `children`.\n     */\n    shouldCloseOnBackdropClick: PropTypes.bool,\n    /**\n     * Determines if the close button should be rendered. This is generally discouraged and should\n     * be used carefully. If used, the contents passed into the modal must contain a focusable\n     * element such as a link or button.\n     */\n    shouldHideCloseButton: PropTypes.bool,\n    /**\n     * Should the Backdrop appear open.\n     */\n    isOpen: PropTypes.bool,\n    /**\n     * Sets the color of the background and close button.\n     */\n    theme: PropTypes.oneOf(['brand', 'faint']),\n};\n\nModalStandard.defaultProps = {\n    children: undefined,\n    onOpenFinish: undefined,\n    onCloseFinish: undefined,\n    isOpen: false,\n    theme: 'faint',\n    shouldCloseOnBackdropClick: true,\n    shouldHideCloseButton: false,\n};\n\nexport default ModalStandard;\n"]},"metadata":{},"sourceType":"module"}