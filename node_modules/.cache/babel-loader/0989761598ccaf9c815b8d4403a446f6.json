{"ast":null,"code":"import { useEffect } from 'react';\nvar ESC_KEY = 27;\nvar EVENT_NAME = 'keyup';\n/**\n * React Hook to register a keyboard listener to run a function when the ESC key is pressed.\n *\n * @param {function} doClose Function to run when ESC key is pressed.\n * @param {boolean} isActive Whether or not the key listener does anything.\n */\n\nfunction useCloseOnEscape(doClose) {\n  var isActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  useEffect(function () {\n    var handleKeyUp = function handleKeyUp(event) {\n      if (isActive && event.keyCode === ESC_KEY) {\n        event.preventDefault();\n        doClose();\n      }\n    };\n\n    document.addEventListener(EVENT_NAME, handleKeyUp);\n    return function () {\n      document.removeEventListener(EVENT_NAME, handleKeyUp);\n    };\n  }, [doClose, isActive]);\n}\n\nexport default useCloseOnEscape;","map":{"version":3,"sources":["../../../utils/use-close-on-escape.ts"],"names":["ESC_KEY","EVENT_NAME","isActive","useEffect","handleKeyUp","event","doClose","document"],"mappings":";AAEA,IAAMA,OAAO,GAAb,EAAA;AACA,IAAMC,UAAU,GAAhB,OAAA;;;;;;;;AAQe,SAAA,gBAAA,CAAA,OAAA,EAAuE;MAAxBC,QAAwB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAb,K;AACrEC,EAAAA,SAAS,CAAC,YAAoB;QACpBC,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAgC;UAC5CF,QAAQ,IAAIG,KAAK,CAALA,OAAAA,KAAhB,O,EAA2C;AACvCA,QAAAA,KAAK,CAALA,cAAAA;AACAC,QAAAA,OAAO;;AAHf,K;;AAOAC,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,UAAAA,EAAAA,WAAAA;WAEO,YAAY;AACfA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,UAAAA,EAAAA,WAAAA;AADJ,K;AAVK,GAAA,EAaN,CAAA,OAAA,EAbHJ,QAaG,CAbM,CAATA","sourcesContent":["import { useEffect } from 'react';\n\nconst ESC_KEY = 27;\nconst EVENT_NAME = 'keyup';\n\n/**\n * React Hook to register a keyboard listener to run a function when the ESC key is pressed.\n *\n * @param {function} doClose Function to run when ESC key is pressed.\n * @param {boolean} isActive Whether or not the key listener does anything.\n */\nexport default function useCloseOnEscape(doClose: () => void, isActive = false): void {\n    useEffect((): (() => void) => {\n        const handleKeyUp = (event: KeyboardEvent): void => {\n            if (isActive && event.keyCode === ESC_KEY) {\n                event.preventDefault();\n                doClose();\n            }\n        };\n\n        document.addEventListener(EVENT_NAME, handleKeyUp);\n\n        return (): void => {\n            document.removeEventListener(EVENT_NAME, handleKeyUp);\n        };\n    }, [doClose, isActive]);\n}\n"]},"metadata":{},"sourceType":"module"}