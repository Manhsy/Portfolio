{"ast":null,"code":"import { defineProperty as _defineProperty, inherits as _inherits, createClass as _createClass, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf, assertThisInitialized as _assertThisInitialized } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { tpDuration5, tpDuration4 } from '@thumbtack/thumbprint-tokens';\nimport { TextButton } from '../Button/index.js';\nimport ReactDOM from 'react-dom';\nimport noop from 'lodash/noop';\nimport StickyFooter from './components/sticky-footer.js';\nimport Transition from './components/transition.js';\nimport ModalCurtain from '../ModalCurtain/index.js';\nimport styles from './index.module.scss';\n\nvar _React$createContext = React.createContext({\n  stickyFooterContainerRef: null,\n  setSticky: noop\n}),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer; // These values are duplicated in the Sass.\n\n\nvar TRANSITION_OPEN_SPEED = tpDuration5;\nvar TRANSITION_CLOSE_SPEED = tpDuration4;\n/**\n * `ModalAnimatedWrapper` is an exported component that we export for developers that want access to\n * `Modal` without padding and a close button. We export it as a named export instead of\n * creating a `hasNoPadding` prop partly to discourage the use of `Modal` without padding.\n *\n * This component uses `ModalCurtain` and includes the backdrop, transition, and white modal\n * wrapper that is available at a few widths.\n */\n\nvar ModalAnimatedWrapper = function ModalAnimatedWrapper(_ref) {\n  var children = _ref.children,\n      _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n      onCloseClick = _ref.onCloseClick,\n      onCloseFinish = _ref.onCloseFinish,\n      onOpenFinish = _ref.onOpenFinish,\n      _ref$shouldCloseOnCur = _ref.shouldCloseOnCurtainClick,\n      shouldCloseOnCurtainClick = _ref$shouldCloseOnCur === void 0 ? true : _ref$shouldCloseOnCur,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 'medium' : _ref$width,\n      _ref$heightAboveSmall = _ref.heightAboveSmall,\n      heightAboveSmall = _ref$heightAboveSmall === void 0 ? 'auto' : _ref$heightAboveSmall,\n      _ref$shouldPageScroll = _ref.shouldPageScrollAboveSmall,\n      shouldPageScrollAboveSmall = _ref$shouldPageScroll === void 0 ? true : _ref$shouldPageScroll;\n  return React.createElement(Transition, {\n    in: isOpen,\n    timeout: {\n      enter: TRANSITION_OPEN_SPEED,\n      exit: TRANSITION_CLOSE_SPEED\n    },\n    onEntered: onOpenFinish,\n    onExited: onCloseFinish\n  }, function (transitionStage) {\n    return React.createElement(ModalCurtain, {\n      stage: transitionStage,\n      onCloseClick: onCloseClick\n    }, function (_ref2) {\n      var _classNames, _classNames2, _classNames3;\n\n      var curtainClassName = _ref2.curtainClassName,\n          curtainOnClick = _ref2.curtainOnClick;\n      return (// eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n        React.createElement(\"div\", {\n          className: classNames((_classNames = {}, _defineProperty(_classNames, curtainClassName, true), _defineProperty(_classNames, styles.curtain, true), _defineProperty(_classNames, styles.curtainOpen, isOpen), _classNames))\n        }, React.createElement(\"div\", {\n          className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.curtainInner, true), _defineProperty(_classNames2, styles.curtainInnerShouldPageScrollAboveSmall, shouldPageScrollAboveSmall), _classNames2)),\n          onClick: shouldCloseOnCurtainClick ? curtainOnClick : undefined,\n          \"data-test\": \"thumbprint-modal-curtain\"\n        }, React.createElement(\"div\", {\n          className: classNames((_classNames3 = {}, _defineProperty(_classNames3, styles.wrapper, true), _defineProperty(_classNames3, styles.wrapperOpen, isOpen), _defineProperty(_classNames3, styles.wrapperWide, width === 'wide'), _defineProperty(_classNames3, styles.wrapperNarrow, width === 'narrow'), _defineProperty(_classNames3, styles.wrapperMedium, width === 'medium'), _defineProperty(_classNames3, styles.wrapperHeightMedium, heightAboveSmall === 'medium'), _defineProperty(_classNames3, styles.wrapperHeightTall, heightAboveSmall === 'tall'), _defineProperty(_classNames3, styles.wrapperShouldPageScrollAboveSmall, shouldPageScrollAboveSmall), _classNames3)),\n          \"data-test\": \"thumbprint-modal-wrapper\"\n        }, React.createElement(\"div\", {\n          className: classNames(_defineProperty({}, styles.container, true)),\n          \"data-test\": \"thumbprint-modal-container\"\n        }, children))))\n      );\n    });\n  });\n};\n\nvar ModalHeader = function ModalHeader(_ref3) {\n  var children = _ref3.children;\n  return React.createElement(\"div\", {\n    className: styles.modalHeader\n  }, children);\n};\n\nvar ModalTitle = function ModalTitle(_ref4) {\n  var children = _ref4.children;\n  return React.createElement(\"div\", {\n    className: styles.modalTitle\n  }, children);\n};\n\nvar ModalDescription = function ModalDescription(_ref5) {\n  var children = _ref5.children;\n  return React.createElement(\"div\", {\n    className: styles.modalDescription\n  }, children);\n};\n\nvar ModalContent = function ModalContent(_ref6) {\n  var children = _ref6.children;\n  return React.createElement(\"div\", {\n    className: styles.modalContent\n  }, children);\n};\n\nvar ModalContentFullBleed = function ModalContentFullBleed(_ref7) {\n  var children = _ref7.children,\n      _ref7$className = _ref7.className,\n      className = _ref7$className === void 0 ? '' : _ref7$className,\n      _ref7$style = _ref7.style,\n      style = _ref7$style === void 0 ? {} : _ref7$style;\n  return React.createElement(\"div\", {\n    className: classNames(className, styles.modalContentFullBleed),\n    style: style\n  }, children);\n};\n\nvar ModalFooter = /*#__PURE__*/function (_React$Component) {\n  _inherits(ModalFooter, _React$Component);\n\n  function ModalFooter(props) {\n    var _this;\n\n    _classCallCheck(this, ModalFooter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalFooter).call(this, props));\n    _this.state = {\n      isClient: false\n    };\n    return _this;\n  }\n\n  _createClass(ModalFooter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isClient: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isClient = this.state.isClient;\n      var _this$props = this.props,\n          isSticky = _this$props.isSticky,\n          children = _this$props.children;\n\n      if (!isClient) {\n        return null;\n      }\n\n      return React.createElement(Consumer, null, function (_ref8) {\n        var stickyFooterContainerRef = _ref8.stickyFooterContainerRef,\n            setSticky = _ref8.setSticky; // When `isSticky` is true, the `ModalFooter` must change its position in the\n        // DOM so that it is fixed at the bottom of the modal on small viewports. We\n        // use React's Context API so that it is a property of the `ModalFooter`\n        // component and not the `Modal` API.\n        //\n        // `stickyFooterContainerRef` is the DOM element where the sticky footer will\n        // render. `setSticky` is a function that updates the state in `Modal`,\n        // changing the CSS to make the contents scroll and the footer fixed at the\n        // bottom.\n\n        if (!isSticky || stickyFooterContainerRef === null || stickyFooterContainerRef.current === null) {\n          return React.createElement(\"div\", {\n            className: styles.modalFooterFluid\n          }, children);\n        } // We have to create a separate component here because `setSticky` updates\n        // state in `Modal` and state updates are not allowed within `render`.\n        // Moving it to a separate component allows us to call it within\n        // `componentDidMount`.\n        // https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d#6a05\n\n\n        return ReactDOM.createPortal(React.createElement(StickyFooter, {\n          setSticky: setSticky\n        }, children), stickyFooterContainerRef.current);\n      });\n    }\n  }]);\n\n  return ModalFooter;\n}(React.Component);\n\nvar Modal = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Modal, _React$Component2);\n\n  function Modal(props) {\n    var _this2;\n\n    _classCallCheck(this, Modal);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));\n    _this2.state = {\n      hasStickyFooter: false,\n      stickyFooterContainerRef: React.createRef()\n    };\n    _this2.setSticky = _this2.setSticky.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  _createClass(Modal, [{\n    key: \"setSticky\",\n    value: function setSticky(newVal) {\n      var hasStickyFooter = this.state.hasStickyFooter;\n\n      if (newVal !== hasStickyFooter) {\n        this.setState({\n          hasStickyFooter: newVal\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames6;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          _this$props2$isOpen = _this$props2.isOpen,\n          isOpen = _this$props2$isOpen === void 0 ? false : _this$props2$isOpen,\n          onCloseClick = _this$props2.onCloseClick,\n          onCloseFinish = _this$props2.onCloseFinish,\n          onOpenFinish = _this$props2.onOpenFinish,\n          _this$props2$shouldCl = _this$props2.shouldCloseOnCurtainClick,\n          shouldCloseOnCurtainClick = _this$props2$shouldCl === void 0 ? true : _this$props2$shouldCl,\n          _this$props2$shouldHi = _this$props2.shouldHideCloseButton,\n          shouldHideCloseButton = _this$props2$shouldHi === void 0 ? false : _this$props2$shouldHi,\n          _this$props2$width = _this$props2.width,\n          width = _this$props2$width === void 0 ? 'medium' : _this$props2$width,\n          _this$props2$heightAb = _this$props2.heightAboveSmall,\n          heightAboveSmall = _this$props2$heightAb === void 0 ? 'auto' : _this$props2$heightAb;\n      var _this$state = this.state,\n          hasStickyFooter = _this$state.hasStickyFooter,\n          stickyFooterContainerRef = _this$state.stickyFooterContainerRef;\n      return React.createElement(ModalAnimatedWrapper, {\n        onCloseClick: onCloseClick,\n        onOpenFinish: onOpenFinish,\n        onCloseFinish: onCloseFinish,\n        shouldCloseOnCurtainClick: shouldCloseOnCurtainClick,\n        isOpen: isOpen,\n        width: width,\n        heightAboveSmall: heightAboveSmall // We allow the modal to grow taller than the page only if there is no sticky\n        // footer. This means that the page can scroll vertically when the modal contents\n        // are tall enough. If we have a sticky footer, we prevent the modal from getting\n        // taller than the viewport so that the footer can always appear at the bottom.\n        // In this case, the inside of the modal itself will scroll vertically as needed.\n        ,\n        shouldPageScrollAboveSmall: !hasStickyFooter\n      }, React.createElement(Provider, {\n        value: {\n          stickyFooterContainerRef: stickyFooterContainerRef,\n          setSticky: this.setSticky\n        }\n      }, React.createElement(\"div\", {\n        className: styles.contents\n      }, React.createElement(\"div\", {\n        className: classNames(styles.contentsPadding, _defineProperty({}, styles.contentsPaddingNotSticky, !hasStickyFooter))\n      }, children)), React.createElement(\"div\", {\n        ref: stickyFooterContainerRef\n      }), React.createElement(\"div\", {\n        className: classNames((_classNames6 = {}, _defineProperty(_classNames6, styles.closeButton, true), _defineProperty(_classNames6, styles.closeButtonNotSticky, !hasStickyFooter), _classNames6))\n      }, shouldHideCloseButton === false && React.createElement(TextButton, {\n        accessibilityLabel: \"Close modal\",\n        dataTest: \"close-modal\",\n        iconLeft: React.createElement(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          width: \"18\",\n          height: \"18\",\n          stroke: \"currentColor\",\n          strokeWidth: \"3\",\n          fill: \"none\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          className: styles.closeButtonIcon\n        }, React.createElement(\"line\", {\n          x1: \"18\",\n          y1: \"6\",\n          x2: \"6\",\n          y2: \"18\"\n        }), React.createElement(\"line\", {\n          x1: \"6\",\n          y1: \"6\",\n          x2: \"18\",\n          y2: \"18\"\n        })),\n        onClick: onCloseClick,\n        theme: \"inherit\"\n      }))));\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nexport default Modal;\nexport { ModalAnimatedWrapper, ModalContent, ModalContentFullBleed, ModalDescription, ModalFooter, ModalHeader, ModalTitle };","map":{"version":3,"sources":["../../../../components/Modal/index.tsx"],"names":["Provider","Consumer","stickyFooterContainerRef","setSticky","noop","TRANSITION_OPEN_SPEED","TRANSITION_CLOSE_SPEED","ModalAnimatedWrapper","children","isOpen","onCloseClick","onCloseFinish","onOpenFinish","shouldCloseOnCurtainClick","width","heightAboveSmall","shouldPageScrollAboveSmall","enter","exit","curtainClassName","curtainOnClick","classNames","styles","ModalHeader","modalHeader","ModalTitle","modalTitle","ModalDescription","modalDescription","ModalContent","modalContent","ModalContentFullBleed","className","style","ModalFooter","React","Component","isClient","isSticky","modalFooterFluid","ReactDOM","Modal","hasStickyFooter","newVal","shouldHideCloseButton","contents","closeButtonIcon"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport { TextButton } from '../Button/index';\nimport StickyFooter from './components/sticky-footer';\nimport Transition from './components/transition';\nimport ModalCurtain from '../ModalCurtain/index';\n\nimport styles from './index.module.scss';\n\ntype StickyContext = {\n    stickyFooterContainerRef: React.RefObject<HTMLDivElement> | null;\n    setSticky: (isSticky: boolean) => void;\n};\n\nconst { Provider, Consumer } = React.createContext<StickyContext>({\n    stickyFooterContainerRef: null,\n    setSticky: noop,\n});\n\n// These values are duplicated in the Sass.\nconst TRANSITION_OPEN_SPEED = tokens.tpDuration5;\nconst TRANSITION_CLOSE_SPEED = tokens.tpDuration4;\n\n/**\n * `ModalAnimatedWrapper` is an exported component that we export for developers that want access to\n * `Modal` without padding and a close button. We export it as a named export instead of\n * creating a `hasNoPadding` prop partly to discourage the use of `Modal` without padding.\n *\n * This component uses `ModalCurtain` and includes the backdrop, transition, and white modal\n * wrapper that is available at a few widths.\n */\nconst ModalAnimatedWrapper = ({\n    children,\n    isOpen = false,\n    onCloseClick,\n    onCloseFinish,\n    onOpenFinish,\n    shouldCloseOnCurtainClick = true,\n    width = 'medium',\n    heightAboveSmall = 'auto',\n    shouldPageScrollAboveSmall = true,\n}: ModalAnimatedWrapperPropTypes): JSX.Element => (\n    <Transition\n        in={isOpen}\n        timeout={{\n            enter: TRANSITION_OPEN_SPEED,\n            exit: TRANSITION_CLOSE_SPEED,\n        }}\n        onEntered={onOpenFinish}\n        onExited={onCloseFinish}\n    >\n        {(transitionStage): JSX.Element => (\n            <ModalCurtain stage={transitionStage} onCloseClick={onCloseClick}>\n                {({ curtainClassName, curtainOnClick }): JSX.Element => (\n                    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                    <div\n                        className={classNames({\n                            [curtainClassName]: true,\n                            [styles.curtain]: true,\n                            [styles.curtainOpen]: isOpen,\n                        })}\n                    >\n                        {/*\n                            Extra nested <div> to prevent curtain's\n                            bottom padding from being ignored in Firefox and Edge\n                            (See #376 and https://github.com/w3c/csswg-drafts/issues/129)\n\n                            onClick listener is attached to this innermost node\n                            that constitutes curtain\n                        */}\n                        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n                        <div\n                            className={classNames({\n                                [styles.curtainInner]: true,\n                                [styles.curtainInnerShouldPageScrollAboveSmall]: shouldPageScrollAboveSmall,\n                            })}\n                            onClick={shouldCloseOnCurtainClick ? curtainOnClick : undefined}\n                            data-test=\"thumbprint-modal-curtain\"\n                        >\n                            <div\n                                className={classNames({\n                                    [styles.wrapper]: true,\n                                    [styles.wrapperOpen]: isOpen,\n                                    [styles.wrapperWide]: width === 'wide',\n                                    [styles.wrapperNarrow]: width === 'narrow',\n                                    [styles.wrapperMedium]: width === 'medium',\n                                    [styles.wrapperHeightMedium]: heightAboveSmall === 'medium',\n                                    [styles.wrapperHeightTall]: heightAboveSmall === 'tall',\n                                    [styles.wrapperShouldPageScrollAboveSmall]: shouldPageScrollAboveSmall,\n                                })}\n                                data-test=\"thumbprint-modal-wrapper\"\n                            >\n                                <div\n                                    className={classNames({\n                                        [styles.container]: true,\n                                    })}\n                                    data-test=\"thumbprint-modal-container\"\n                                >\n                                    {children}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </ModalCurtain>\n        )}\n    </Transition>\n);\n\ninterface ModalAnimatedWrapperPropTypes {\n    /**\n     * Content that appears within the modal.\n     */\n    children?: React.ReactNode;\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: () => void;\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish?: () => void;\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish?: () => void;\n    /**\n     * Determines if the modal should close when clicking on the curtain, outside of the `children`.\n     */\n    shouldCloseOnCurtainClick?: boolean;\n    /**\n     * Allows the page to scroll vertically at viewports larger than the small breakpoint. If\n     * `false`, the modal will always be equal to or smaller than the viewport and the contents\n     * of the modal will scroll, not the page itself.\n     */\n    shouldPageScrollAboveSmall?: boolean;\n    /**\n     * Should the modal appear open.\n     */\n    isOpen?: boolean;\n    /**\n     * Sets the max-width of the modal container.\n     */\n    width?: 'narrow' | 'medium' | 'wide';\n    /**\n     * Sets height of the modal container above small viewport.\n     * If `auto` (default), the modal height will be determined by its content.\n     * Otherwise, the modal height will be fixed at some constant px.\n     */\n    heightAboveSmall?: 'auto' | 'medium' | 'tall';\n}\n\ninterface ModalHeaderPropTypes {\n    /**\n     * Content (usually a `ModalTitle` and `ModalDescription`) that appears at the top of the\n     * modal.\n     */\n    children: React.ReactNode;\n}\n\ninterface ModalTitlePropTypes {\n    /**\n     * Text that describes the modal contents. It is intended for use within the `ModalHeader`.\n     */\n    children: string;\n}\n\ninterface ModalDescriptionPropTypes {\n    /**\n     * Text intended for use below a `ModalTitle` and within a `ModalHeader`.\n     */\n    children: React.ReactNode;\n}\n\ninterface ModalContentPropTypes {\n    /**\n     * Content (usually a form) that makes up the main part of the modal.\n     */\n    children: React.ReactNode;\n}\n\ninterface ModalContentFullBleedPropTypes {\n    /**\n     * Content (usually a form) that makes up the main part of the modal.\n     */\n    children: React.ReactNode;\n    /**\n     * Allows the React `className` prop to be passed through to the rendered element.\n     */\n    className?: string;\n    /**\n     * Allows the React `style` prop to be passed through to the rendered element.\n     */\n    style?: React.CSSProperties;\n}\n\ninterface ModalFooterPropTypes {\n    /**\n     * Content (ususally buttons) to render within the footer.\n     */\n    children: React.ReactNode;\n    /**\n     * Attaches the footer to the bottom of the modal below the small breakpoint.\n     */\n    isSticky?: boolean;\n}\n\ninterface ModalPropTypes {\n    /**\n     * Content that appears within the modal.\n     */\n    children?: React.ReactNode;\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: () => void;\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish?: () => void;\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish?: () => void;\n    /**\n     * Determines if the close button should be rendered. This is generally discouraged and should\n     * be used carefully. If used, the contents passed into the modal must contain a focusable\n     * element such as a link or button.\n     */\n    shouldHideCloseButton?: boolean;\n    /**\n     * Determines if the modal should close when clicking on the curtain, outside of the `children`.\n     */\n    shouldCloseOnCurtainClick?: boolean;\n    /**\n     * Should the modal appear open.\n     */\n    isOpen?: boolean;\n    /**\n     * Sets the max-width of the modal container.\n     */\n    width?: 'narrow' | 'medium' | 'wide';\n    /**\n     * Sets height of the modal container above small viewport.\n     * If `auto` (default), the modal height will be determined by its content.\n     * Otherwise, the modal height will be fixed at some constant px.\n     */\n    heightAboveSmall?: 'auto' | 'medium' | 'tall';\n}\n\nconst ModalHeader = ({ children }: ModalHeaderPropTypes): JSX.Element => (\n    <div className={styles.modalHeader}>{children}</div>\n);\n\nconst ModalTitle = ({ children }: ModalTitlePropTypes): JSX.Element => (\n    <div className={styles.modalTitle}>{children}</div>\n);\n\nconst ModalDescription = ({ children }: ModalDescriptionPropTypes): JSX.Element => (\n    <div className={styles.modalDescription}>{children}</div>\n);\n\nconst ModalContent = ({ children }: ModalContentPropTypes): JSX.Element => (\n    <div className={styles.modalContent}>{children}</div>\n);\n\nconst ModalContentFullBleed = ({\n    children,\n    className = '',\n    style = {},\n}: ModalContentFullBleedPropTypes): JSX.Element => (\n    <div className={classNames(className, styles.modalContentFullBleed)} style={style}>\n        {children}\n    </div>\n);\n\nclass ModalFooter extends React.Component<ModalFooterPropTypes, { isClient: boolean }> {\n    constructor(props: ModalFooterPropTypes) {\n        super(props);\n\n        this.state = {\n            isClient: false,\n        };\n    }\n\n    componentDidMount(): void {\n        this.setState({\n            isClient: true,\n        });\n    }\n\n    render(): JSX.Element | null {\n        const { isClient } = this.state;\n        const { isSticky, children } = this.props;\n\n        if (!isClient) {\n            return null;\n        }\n\n        return (\n            <Consumer>\n                {({ stickyFooterContainerRef, setSticky }): JSX.Element => {\n                    // When `isSticky` is true, the `ModalFooter` must change its position in the\n                    // DOM so that it is fixed at the bottom of the modal on small viewports. We\n                    // use React's Context API so that it is a property of the `ModalFooter`\n                    // component and not the `Modal` API.\n                    //\n                    // `stickyFooterContainerRef` is the DOM element where the sticky footer will\n                    // render. `setSticky` is a function that updates the state in `Modal`,\n                    // changing the CSS to make the contents scroll and the footer fixed at the\n                    // bottom.\n                    if (\n                        !isSticky ||\n                        stickyFooterContainerRef === null ||\n                        stickyFooterContainerRef.current === null\n                    ) {\n                        return <div className={styles.modalFooterFluid}>{children}</div>;\n                    }\n\n                    // We have to create a separate component here because `setSticky` updates\n                    // state in `Modal` and state updates are not allowed within `render`.\n                    // Moving it to a separate component allows us to call it within\n                    // `componentDidMount`.\n                    // https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d#6a05\n                    return ReactDOM.createPortal(\n                        <StickyFooter setSticky={setSticky}>{children}</StickyFooter>,\n                        stickyFooterContainerRef.current,\n                    );\n                }}\n            </Consumer>\n        );\n    }\n}\n\ninterface ModalStateTypes {\n    hasStickyFooter: boolean;\n    stickyFooterContainerRef: React.RefObject<HTMLDivElement> | null;\n}\n\nclass Modal extends React.Component<ModalPropTypes, ModalStateTypes> {\n    constructor(props: ModalPropTypes) {\n        super(props);\n\n        this.state = {\n            hasStickyFooter: false,\n            stickyFooterContainerRef: React.createRef<HTMLDivElement>(),\n        };\n        this.setSticky = this.setSticky.bind(this);\n    }\n\n    setSticky(newVal: boolean): void {\n        const { hasStickyFooter } = this.state;\n\n        if (newVal !== hasStickyFooter) {\n            this.setState({\n                hasStickyFooter: newVal,\n            });\n        }\n    }\n\n    render(): JSX.Element {\n        const {\n            children,\n            isOpen = false,\n            onCloseClick,\n            onCloseFinish,\n            onOpenFinish,\n            shouldCloseOnCurtainClick = true,\n            shouldHideCloseButton = false,\n            width = 'medium',\n            heightAboveSmall = 'auto',\n        } = this.props;\n\n        const { hasStickyFooter, stickyFooterContainerRef } = this.state;\n\n        return (\n            <ModalAnimatedWrapper\n                onCloseClick={onCloseClick}\n                onOpenFinish={onOpenFinish}\n                onCloseFinish={onCloseFinish}\n                shouldCloseOnCurtainClick={shouldCloseOnCurtainClick}\n                isOpen={isOpen}\n                width={width}\n                heightAboveSmall={heightAboveSmall}\n                // We allow the modal to grow taller than the page only if there is no sticky\n                // footer. This means that the page can scroll vertically when the modal contents\n                // are tall enough. If we have a sticky footer, we prevent the modal from getting\n                // taller than the viewport so that the footer can always appear at the bottom.\n                // In this case, the inside of the modal itself will scroll vertically as needed.\n                shouldPageScrollAboveSmall={!hasStickyFooter}\n            >\n                <Provider\n                    value={{\n                        stickyFooterContainerRef,\n                        setSticky: this.setSticky,\n                    }}\n                >\n                    <div className={styles.contents}>\n                        {/*\n                            Extra nested <div> to prevent bottom padding from being ignored\n                            in Firefox and Edge\n                            (See #376 and https://github.com/w3c/csswg-drafts/issues/129)\n                        */}\n                        <div\n                            className={classNames(styles.contentsPadding, {\n                                [styles.contentsPaddingNotSticky]: !hasStickyFooter,\n                            })}\n                        >\n                            {children}\n                        </div>\n                    </div>\n                    {/*\n                        If a user uses `<ModalFooter isSticky />`, it gets\n                        moved here with React portals.\n                    */}\n                    <div ref={stickyFooterContainerRef} />\n                    {/*\n                        The close button is last in the DOM so that it is\n                        not focused first by the focus trap. We visually\n                        position it at the top with flexbox.\n                    */}\n                    <div\n                        className={classNames({\n                            [styles.closeButton]: true,\n                            [styles.closeButtonNotSticky]: !hasStickyFooter,\n                        })}\n                    >\n                        {shouldHideCloseButton === false && (\n                            <TextButton\n                                accessibilityLabel=\"Close modal\"\n                                dataTest=\"close-modal\"\n                                iconLeft={\n                                    <svg\n                                        viewBox=\"0 0 24 24\"\n                                        width=\"18\"\n                                        height=\"18\"\n                                        stroke=\"currentColor\"\n                                        strokeWidth=\"3\"\n                                        fill=\"none\"\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        className={styles.closeButtonIcon}\n                                    >\n                                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                                    </svg>\n                                }\n                                onClick={onCloseClick}\n                                theme=\"inherit\"\n                            />\n                        )}\n                    </div>\n                </Provider>\n            </ModalAnimatedWrapper>\n        );\n    }\n}\n\nexport default Modal;\nexport {\n    ModalHeader,\n    ModalTitle,\n    ModalDescription,\n    ModalContent,\n    ModalContentFullBleed,\n    ModalFooter,\n    ModalAnimatedWrapper,\n};\n"]},"metadata":{},"sourceType":"module"}