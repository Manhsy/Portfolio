{"ast":null,"code":"import { inherits as _inherits, classCallCheck as _classCallCheck, possibleConstructorReturn as _possibleConstructorReturn, getPrototypeOf as _getPrototypeOf, assertThisInitialized as _assertThisInitialized, createClass as _createClass, defineProperty as _defineProperty } from '../../../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport noScroll from 'no-scroll';\nimport FocusTrap from 'focus-trap-react';\nimport ModalContents from '../modal-contents/index.js';\nimport styles from './index.module.scss';\nvar ESC_KEY = 27;\n\nvar toggleScrolling = function toggleScrolling(isOpen) {\n  if (isOpen) {\n    noScroll.on();\n  } else {\n    noScroll.off();\n  }\n};\n\nvar ModalStructure = /*#__PURE__*/function (_React$Component) {\n  _inherits(ModalStructure, _React$Component);\n\n  function ModalStructure(props) {\n    var _this;\n\n    _classCallCheck(this, ModalStructure);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalStructure).call(this, props));\n    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));\n    _this.toggleKeyDownListener = _this.toggleKeyDownListener.bind(_assertThisInitialized(_this));\n    _this.state = {\n      keyDownListenerRegistered: false\n    };\n    var shouldAnimate = _this.props.shouldAnimate;\n    /**\n     * Duration of the modal's transition on open and close. This value is duplicated in the\n     * Sass.\n     */\n\n    _this.TRANSITION_SPEED = shouldAnimate ? 500 : 0;\n    return _this;\n  }\n\n  _createClass(ModalStructure, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          shouldCloseOnEscape = _this$props.shouldCloseOnEscape;\n      this.toggleKeyDownListener(isOpen, shouldCloseOnEscape);\n\n      if (isOpen) {\n        // Only disable scrolling on `componentDidMount` if the modal should immediately open\n        // once it is mounted. Turning off the scroll lock if it has never been enabled may\n        // cause the page to jump.\n        toggleScrolling(isOpen);\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps) {\n      var _this$props2 = this.props,\n          isOpen = _this$props2.isOpen,\n          onOpenFinish = _this$props2.onOpenFinish,\n          onCloseFinish = _this$props2.onCloseFinish,\n          shouldCloseOnEscape = _this$props2.shouldCloseOnEscape; // Enable or disable the background scrolling if the `isOpen` prop has changed.\n\n      if (isOpen !== nextProps.isOpen) {\n        toggleScrolling(nextProps.isOpen); // Set timeouts that match out transition speed. This allows us to fire functions when\n        // our transitions are complete and the modal is entirely opened or closed.\n\n        if (nextProps.isOpen === true && onOpenFinish) {\n          setTimeout(onOpenFinish, this.TRANSITION_SPEED);\n        } else if (nextProps.isOpen === false && onCloseFinish) {\n          setTimeout(onCloseFinish, this.TRANSITION_SPEED);\n        }\n      } // Add or remove the `ESC` key listener when `isOpen` or `shouldCloseOnEscape` changes.\n\n\n      if (isOpen !== nextProps.isOpen || shouldCloseOnEscape !== nextProps.shouldCloseOnEscape) {\n        this.toggleKeyDownListener(nextProps.isOpen, nextProps.shouldCloseOnEscape);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleKeyDownListener(false, false);\n      toggleScrolling(false);\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      var onCloseClick = this.props.onCloseClick;\n\n      if (event.keyCode === ESC_KEY) {\n        event.preventDefault();\n        onCloseClick(event);\n      }\n    }\n    /**\n     * Adds or removes an event listener for `keyDown`. This is used to close the modal on `ESC`.\n     * @param {boolean} isOpen\n     * @param {boolean} shouldCloseOnEscape\n     */\n\n  }, {\n    key: \"toggleKeyDownListener\",\n    value: function toggleKeyDownListener(isOpen, shouldCloseOnEscape) {\n      var keyDownListenerRegistered = this.state.keyDownListenerRegistered;\n\n      if (isOpen && shouldCloseOnEscape && !keyDownListenerRegistered) {\n        document.addEventListener('keydown', this.handleKeyDown);\n        this.setState({\n          keyDownListenerRegistered: true\n        });\n      } else if (keyDownListenerRegistered) {\n        document.removeEventListener('keydown', this.handleKeyDown);\n        this.setState({\n          keyDownListenerRegistered: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classnames;\n\n      var _this$props3 = this.props,\n          assistiveTitle = _this$props3.assistiveTitle,\n          backdropPadding = _this$props3.backdropPadding,\n          children = _this$props3.children,\n          contentsMaxWidth = _this$props3.contentsMaxWidth,\n          isOpen = _this$props3.isOpen,\n          onCloseClick = _this$props3.onCloseClick,\n          shouldAnimate = _this$props3.shouldAnimate,\n          shouldCloseOnBackdropClick = _this$props3.shouldCloseOnBackdropClick;\n      return React.createElement(FocusTrap, {\n        active: isOpen\n      }, React.createElement(\"div\", {\n        className: classNames(styles.modalStructureBackdrop, (_classnames = {}, _defineProperty(_classnames, styles.modalStructureBackdropOpen, isOpen), _defineProperty(_classnames, styles.modalStructureBackdropAnimated, shouldAnimate), _classnames)),\n        style: {\n          padding: backdropPadding\n        }\n      }, React.createElement(ModalContents, {\n        contentsMaxWidth: contentsMaxWidth,\n        onCloseClick: onCloseClick,\n        disableOnClickOutside: !isOpen || !shouldCloseOnBackdropClick,\n        isOpen: isOpen,\n        shouldAnimate: shouldAnimate,\n        role: \"dialog\",\n        \"aria-label\": assistiveTitle\n      }, children)));\n    }\n  }]);\n\n  return ModalStructure;\n}(React.Component);\n\nModalStructure.propTypes = {\n  /**\n   * Content that appears on top of the backdrop.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Should the backdrop appear open.\n   */\n  isOpen: PropTypes.bool,\n\n  /**\n   * Accessibility title used to describe the content of the modal to screen readers.\n   */\n  assistiveTitle: PropTypes.string,\n\n  /**\n   * Function that fires to close the modal.\n   */\n  onCloseClick: PropTypes.func.isRequired,\n\n  /**\n   * Function that fires once the modal has opened and transitions have ended.\n   */\n  onOpenFinish: PropTypes.func,\n\n  /**\n   * Function that fires once the modal has closed and transitions have ended.\n   */\n  onCloseFinish: PropTypes.func,\n\n  /**\n   * Animate when opening and closing the modal.\n   */\n  shouldAnimate: PropTypes.bool,\n\n  /**\n   * Determines if the modal should close when clicking on the backdrop, outside of the content.\n   */\n  shouldCloseOnBackdropClick: PropTypes.bool,\n\n  /**\n   * Determines if the modal should close when pressing the escape key.\n   */\n  shouldCloseOnEscape: PropTypes.bool,\n\n  /**\n   * Amount of space separating the contents from the backdrop.\n   */\n  backdropPadding: PropTypes.oneOf([0, '48px 20px']),\n\n  /**\n   * The max width of the container that wraps the contents of the modal.\n   */\n  contentsMaxWidth: PropTypes.string\n};\nModalStructure.defaultProps = {\n  children: undefined,\n  isOpen: false,\n  assistiveTitle: 'Modal',\n  onOpenFinish: undefined,\n  onCloseFinish: undefined,\n  backdropPadding: '48px 20px',\n  contentsMaxWidth: '100%',\n  shouldAnimate: true,\n  shouldCloseOnBackdropClick: true,\n  shouldCloseOnEscape: true\n};\nexport default ModalStructure;","map":{"version":3,"sources":["../../../../../../components/ModalBase/subcomponents/modal-structure/index.jsx"],"names":["ESC_KEY","toggleScrolling","noScroll","ModalStructure","React","Component","keyDownListenerRegistered","shouldAnimate","isOpen","shouldCloseOnEscape","nextProps","onOpenFinish","onCloseFinish","setTimeout","event","onCloseClick","document","assistiveTitle","backdropPadding","children","contentsMaxWidth","shouldCloseOnBackdropClick","classnames","styles","padding","PropTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport noScroll from 'no-scroll';\nimport FocusTrap from 'focus-trap-react';\nimport ModalContents from '../modal-contents/index.jsx';\nimport styles from './index.module.scss';\n\nconst ESC_KEY = 27;\n\nconst toggleScrolling = isOpen => {\n    if (isOpen) {\n        noScroll.on();\n    } else {\n        noScroll.off();\n    }\n};\n\nexport default class ModalStructure extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.toggleKeyDownListener = this.toggleKeyDownListener.bind(this);\n        this.state = {\n            keyDownListenerRegistered: false,\n        };\n\n        const { shouldAnimate } = this.props;\n\n        /**\n         * Duration of the modal's transition on open and close. This value is duplicated in the\n         * Sass.\n         */\n        this.TRANSITION_SPEED = shouldAnimate ? 500 : 0;\n    }\n\n    componentDidMount() {\n        const { isOpen, shouldCloseOnEscape } = this.props;\n\n        this.toggleKeyDownListener(isOpen, shouldCloseOnEscape);\n\n        if (isOpen) {\n            // Only disable scrolling on `componentDidMount` if the modal should immediately open\n            // once it is mounted. Turning off the scroll lock if it has never been enabled may\n            // cause the page to jump.\n            toggleScrolling(isOpen);\n        }\n    }\n\n    componentWillUpdate(nextProps) {\n        const { isOpen, onOpenFinish, onCloseFinish, shouldCloseOnEscape } = this.props;\n\n        // Enable or disable the background scrolling if the `isOpen` prop has changed.\n        if (isOpen !== nextProps.isOpen) {\n            toggleScrolling(nextProps.isOpen);\n\n            // Set timeouts that match out transition speed. This allows us to fire functions when\n            // our transitions are complete and the modal is entirely opened or closed.\n            if (nextProps.isOpen === true && onOpenFinish) {\n                setTimeout(onOpenFinish, this.TRANSITION_SPEED);\n            } else if (nextProps.isOpen === false && onCloseFinish) {\n                setTimeout(onCloseFinish, this.TRANSITION_SPEED);\n            }\n        }\n\n        // Add or remove the `ESC` key listener when `isOpen` or `shouldCloseOnEscape` changes.\n        if (isOpen !== nextProps.isOpen || shouldCloseOnEscape !== nextProps.shouldCloseOnEscape) {\n            this.toggleKeyDownListener(nextProps.isOpen, nextProps.shouldCloseOnEscape);\n        }\n    }\n\n    componentWillUnmount() {\n        this.toggleKeyDownListener(false, false);\n        toggleScrolling(false);\n    }\n\n    handleKeyDown(event) {\n        const { onCloseClick } = this.props;\n\n        if (event.keyCode === ESC_KEY) {\n            event.preventDefault();\n            onCloseClick(event);\n        }\n    }\n\n    /**\n     * Adds or removes an event listener for `keyDown`. This is used to close the modal on `ESC`.\n     * @param {boolean} isOpen\n     * @param {boolean} shouldCloseOnEscape\n     */\n    toggleKeyDownListener(isOpen, shouldCloseOnEscape) {\n        const { keyDownListenerRegistered } = this.state;\n\n        if (isOpen && shouldCloseOnEscape && !keyDownListenerRegistered) {\n            document.addEventListener('keydown', this.handleKeyDown);\n            this.setState({ keyDownListenerRegistered: true });\n        } else if (keyDownListenerRegistered) {\n            document.removeEventListener('keydown', this.handleKeyDown);\n            this.setState({ keyDownListenerRegistered: false });\n        }\n    }\n\n    render() {\n        const {\n            assistiveTitle,\n            backdropPadding,\n            children,\n            contentsMaxWidth,\n            isOpen,\n            onCloseClick,\n            shouldAnimate,\n            shouldCloseOnBackdropClick,\n        } = this.props;\n\n        return (\n            <FocusTrap active={isOpen}>\n                <div\n                    className={classnames(styles.modalStructureBackdrop, {\n                        [styles.modalStructureBackdropOpen]: isOpen,\n                        [styles.modalStructureBackdropAnimated]: shouldAnimate,\n                    })}\n                    style={{ padding: backdropPadding }}\n                >\n                    <ModalContents\n                        contentsMaxWidth={contentsMaxWidth}\n                        onCloseClick={onCloseClick}\n                        disableOnClickOutside={!isOpen || !shouldCloseOnBackdropClick}\n                        isOpen={isOpen}\n                        shouldAnimate={shouldAnimate}\n                        role=\"dialog\"\n                        aria-label={assistiveTitle}\n                    >\n                        {children}\n                    </ModalContents>\n                </div>\n            </FocusTrap>\n        );\n    }\n}\n\nModalStructure.propTypes = {\n    /**\n     * Content that appears on top of the backdrop.\n     */\n    children: PropTypes.node,\n    /**\n     * Should the backdrop appear open.\n     */\n    isOpen: PropTypes.bool,\n    /**\n     * Accessibility title used to describe the content of the modal to screen readers.\n     */\n    assistiveTitle: PropTypes.string,\n    /**\n     * Function that fires to close the modal.\n     */\n    onCloseClick: PropTypes.func.isRequired,\n    /**\n     * Function that fires once the modal has opened and transitions have ended.\n     */\n    onOpenFinish: PropTypes.func,\n    /**\n     * Function that fires once the modal has closed and transitions have ended.\n     */\n    onCloseFinish: PropTypes.func,\n    /**\n     * Animate when opening and closing the modal.\n     */\n    shouldAnimate: PropTypes.bool,\n    /**\n     * Determines if the modal should close when clicking on the backdrop, outside of the content.\n     */\n    shouldCloseOnBackdropClick: PropTypes.bool,\n    /**\n     * Determines if the modal should close when pressing the escape key.\n     */\n    shouldCloseOnEscape: PropTypes.bool,\n    /**\n     * Amount of space separating the contents from the backdrop.\n     */\n    backdropPadding: PropTypes.oneOf([0, '48px 20px']),\n    /**\n     * The max width of the container that wraps the contents of the modal.\n     */\n    contentsMaxWidth: PropTypes.string,\n};\n\nModalStructure.defaultProps = {\n    children: undefined,\n    isOpen: false,\n    assistiveTitle: 'Modal',\n    onOpenFinish: undefined,\n    onCloseFinish: undefined,\n    backdropPadding: '48px 20px',\n    contentsMaxWidth: '100%',\n    shouldAnimate: true,\n    shouldCloseOnBackdropClick: true,\n    shouldCloseOnEscape: true,\n};\n"]},"metadata":{},"sourceType":"module"}