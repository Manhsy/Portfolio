{"ast":null,"code":"import React from 'react';\nimport canUseDOM from './can-use-dom.js';\nimport ReactDOM from 'react-dom';\n/**\n * Component to conditionally portal a component to the end of the `<body>` if a certain condition is\n * true. Also automatically guards against trying to use portals in SSR where `document` is not\n * defined.\n */\n\nfunction ConditionalPortal(_ref) {\n  var _ref$shouldDisplace = _ref.shouldDisplace,\n      shouldDisplace = _ref$shouldDisplace === void 0 ? false : _ref$shouldDisplace,\n      children = _ref.children;\n\n  if (!children) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, canUseDOM && shouldDisplace ? ReactDOM.createPortal(children, document.body) : children);\n}\n\nexport default ConditionalPortal;","map":{"version":3,"sources":["../../../utils/ConditionalPortal.tsx"],"names":["shouldDisplace","children","canUseDOM","ReactDOM","document"],"mappings":";;;AAeA;;;;;;AAKe,SAAA,iBAAA,CAAA,IAAA,EAGmB;iCAF9BA,c;MAAAA,cAE8B,GAAA,mBAAA,KAAA,KAAA,CAAA,GAFb,KAEa,GAAA,mB;MAD9BC,QAC8B,GAAA,IAAA,CAD9BA,Q;;MAEI,CAAJ,Q,EAAe;WACX,I;;;SAIA,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EACKC,SAAS,IAATA,cAAAA,GACKC,QAAQ,CAARA,YAAAA,CAAAA,QAAAA,EAAgCC,QAAQ,CAD7CF,IACKC,CADLD,GAFT,QACI,C","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport canUseDOM from './can-use-dom';\n\ninterface PropTypes {\n    /**\n     * Whether or not the contents should be displaced to the end of the `<body>`, or rendered inline.\n     */\n    shouldDisplace?: boolean;\n    /**\n     * The contents to render.\n     */\n    children?: React.ReactNode;\n}\n\n/**\n * Component to conditionally portal a component to the end of the `<body>` if a certain condition is\n * true. Also automatically guards against trying to use portals in SSR where `document` is not\n * defined.\n */\nexport default function ConditionalPortal({\n    shouldDisplace = false,\n    children,\n}: PropTypes): JSX.Element | null {\n    if (!children) {\n        return null;\n    }\n\n    return (\n        <React.Fragment>\n            {canUseDOM && shouldDisplace\n                ? ReactDOM.createPortal(children, document.body)\n                : children}\n        </React.Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}